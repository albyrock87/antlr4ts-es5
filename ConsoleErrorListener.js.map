{"version":3,"sources":["ConsoleErrorListener.js","../src/ConsoleErrorListener.ts"],"names":["Object","defineProperty","exports","value","ConsoleErrorListener","recognizer","offendingSymbol","line","charPositionInLine","msg","e","console","error","INSTANCE"],"mappings":"AAAA;ACAA;;;;;;;;;;;ADKAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;ACMA;;;;;IAIAC,oB;;;;;;;;;;AAMC;;;;;;;;;;;gCAYCC,U,EACAC,e,EACAC,I,EACAC,kB,EACAC,G,EACAC,C,EAAmC;AACnCC,MAAAA,OAAO,CAACC,KAAR,gBAAsBL,IAAtB,cAA8BC,kBAA9B,cAAoDC,GAApD;AACA;;;;AAxBD;;;;;AAGuBL,oBAAA,CAAAS,QAAA,GAAiC,IAAIT,oBAAJ,EAAjC;AAJxBF,OAAA,CAAAE,oBAAA,GAAAA,oBAAA","file":"ConsoleErrorListener.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n *\n * @author Sam Harwell\n */\nclass ConsoleErrorListener {\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation prints messages to {@link System#err} containing the\n     * values of `line`, `charPositionInLine`, and `msg` using\n     * the following format.\n     *\n     * <pre>\n     * line *line*:*charPositionInLine* *msg*\n     * </pre>\n     */\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n        console.error(`line ${line}:${charPositionInLine} ${msg}`);\n    }\n}\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\nexports.ConsoleErrorListener = ConsoleErrorListener;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:50.5479602-07:00\n\nimport { ANTLRErrorListener } from \"./ANTLRErrorListener\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\n\n/**\n *\n * @author Sam Harwell\n */\nexport class ConsoleErrorListener implements ANTLRErrorListener<any> {\n\t/**\n\t * Provides a default instance of {@link ConsoleErrorListener}.\n\t */\n\tpublic static readonly INSTANCE: ConsoleErrorListener = new ConsoleErrorListener();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation prints messages to {@link System#err} containing the\n\t * values of `line`, `charPositionInLine`, and `msg` using\n\t * the following format.\n\t *\n\t * <pre>\n\t * line *line*:*charPositionInLine* *msg*\n\t * </pre>\n\t */\n\tpublic syntaxError<T>(\n\t\trecognizer: Recognizer<T, any>,\n\t\toffendingSymbol: T,\n\t\tline: number,\n\t\tcharPositionInLine: number,\n\t\tmsg: string,\n\t\te: RecognitionException | undefined): void {\n\t\tconsole.error(`line ${line}:${charPositionInLine} ${msg}`);\n\t}\n}\n"]}