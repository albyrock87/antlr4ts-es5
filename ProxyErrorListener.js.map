{"version":3,"sources":["ProxyErrorListener.js","../src/ProxyErrorListener.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","ProxyErrorListener","delegates","Error","recognizer","offendingSymbol","line","charPositionInLine","msg","e","forEach","listener","syntaxError","Override","NotNull","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,OAAO,GAAI,UAAQ,SAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACrE,SAAO,UAAUhB,MAAV,EAAkBC,GAAlB,EAAuB;AAAEe,IAAAA,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcc,UAAd,CAAT;AAAqC,GAArE;AACH,CAFD;;AAGAR,MAAM,CAACM,cAAP,CAAsBI,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ACLA,IAAAC,YAAA,GAAAC,OAAA,CAAA,cAAA,CAAA;AAEA;;;;;;;;;IAOAC,kB;;;AAEC,8BAAoBC,SAApB,EAA0C;AAAA;AAAtB,SAAAA,SAAA,GAAAA,SAAA;;AACnB,QAAI,CAACA,SAAL,EAAgB;AACf,YAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACA;AACD;;;;mCAEqB;AACrB,aAAO,KAAKD,SAAZ;AACA;;;gCAISE,U,EACTC,e,EACAC,I,EACAC,kB,EACSC,G,EACTC,C,EAAmC;AACnC,WAAKP,SAAL,CAAeQ,OAAf,CAAuB,UAACC,QAAD,EAAa;AACnC,YAAIA,QAAQ,CAACC,WAAb,EAA0B;AACzBD,UAAAA,QAAQ,CAACC,WAAT,CAAqBR,UAArB,EAAiCC,eAAjC,EAAkDC,IAAlD,EAAwDC,kBAAxD,EAA4EC,GAA5E,EAAiFC,CAAjF;AACA;AACD,OAJD;AAKA;;;;;AAZD/B,UAAA,CAAA,CADCqB,YAAA,CAAAc,QACD,EACEnB,OAAA,CAAA,CAAA,EAAAK,YAAA,CAAAe,OAAA,CADF,EAKEpB,OAAA,CAAA,CAAA,EAAAK,YAAA,CAAAe,OAAA,CALF,CAAA,EDcEb,kBAAkB,CAACc,SCdrB,EDcgC,aCdhC,EDc+C,ICd/C,CAAA;;AAbDlB,OAAA,CAAAI,kBAAA,GAAAA,kBAAA","file":"ProxyErrorListener.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"./Decorators\");\n/**\n * This implementation of {@link ANTLRErrorListener} dispatches all calls to a\n * collection of delegate listeners. This reduces the effort required to support multiple\n * listeners.\n *\n * @author Sam Harwell\n */\nclass ProxyErrorListener {\n    constructor(delegates) {\n        this.delegates = delegates;\n        if (!delegates) {\n            throw new Error(\"Invalid delegates\");\n        }\n    }\n    getDelegates() {\n        return this.delegates;\n    }\n    syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e) {\n        this.delegates.forEach((listener) => {\n            if (listener.syntaxError) {\n                listener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);\n            }\n        });\n    }\n}\n__decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull),\n    __param(4, Decorators_1.NotNull)\n], ProxyErrorListener.prototype, \"syntaxError\", null);\nexports.ProxyErrorListener = ProxyErrorListener;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:56.8126690-07:00\nimport { ANTLRErrorListener } from \"./ANTLRErrorListener\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { Override, NotNull } from \"./Decorators\";\n\n/**\n * This implementation of {@link ANTLRErrorListener} dispatches all calls to a\n * collection of delegate listeners. This reduces the effort required to support multiple\n * listeners.\n *\n * @author Sam Harwell\n */\nexport class ProxyErrorListener<TSymbol, TListener extends ANTLRErrorListener<TSymbol>> implements ANTLRErrorListener<TSymbol> {\n\n\tconstructor(private delegates: TListener[]) {\n\t\tif (!delegates) {\n\t\t\tthrow new Error(\"Invalid delegates\");\n\t\t}\n\t}\n\n\tprotected getDelegates(): ReadonlyArray<TListener> {\n\t\treturn this.delegates;\n\t}\n\n\t@Override\n\tpublic syntaxError<T extends TSymbol>(\n\t\t@NotNull recognizer: Recognizer<T, any>,\n\t\toffendingSymbol: T | undefined,\n\t\tline: number,\n\t\tcharPositionInLine: number,\n\t\t@NotNull msg: string,\n\t\te: RecognitionException | undefined): void {\n\t\tthis.delegates.forEach((listener) => {\n\t\t\tif (listener.syntaxError) {\n\t\t\t\tlistener.syntaxError(recognizer, offendingSymbol, line, charPositionInLine, msg, e);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}