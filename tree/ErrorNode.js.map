{"version":3,"sources":["tree/ErrorNode.js","../src/tree/ErrorNode.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","TerminalNode_1","ErrorNode","token","visitor","visitErrorNode","TerminalNode","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAAC,cAAA,GAAAD,OAAA,CAAA,gBAAA,CAAA;AAGA;;;;;;;;IAMAE,S;;;;;AACC,qBAAYC,KAAZ,EAAwB;AAAA;AAAA,oHACjBA,KADiB;AAEvB;;;;2BAGgBC,O,EAA4B;AAC5C,aAAOA,OAAO,CAACC,cAAR,CAAuB,IAAvB,CAAP;AACA;;;EAR6BJ,cAAA,CAAAK,Y;;AAM9BzB,UAAA,CAAA,CADCkB,YAAA,CAAAQ,QACD,CAAA,EDOEL,SAAS,CAACM,SCPZ,EDOuB,QCPvB,EDOiC,ICPjC,CAAA;;AANDX,OAAA,CAAAK,SAAA,GAAAA,SAAA","file":"ErrorNode.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00\nconst Decorators_1 = require(\"../Decorators\");\nconst TerminalNode_1 = require(\"./TerminalNode\");\n/** Represents a token that was consumed during resynchronization\n *  rather than during a valid match operation. For example,\n *  we will create this kind of a node during single token insertion\n *  and deletion as well as during \"consume until error recovery set\"\n *  upon no viable alternative exceptions.\n */\nclass ErrorNode extends TerminalNode_1.TerminalNode {\n    constructor(token) {\n        super(token);\n    }\n    accept(visitor) {\n        return visitor.visitErrorNode(this);\n    }\n}\n__decorate([\n    Decorators_1.Override\n], ErrorNode.prototype, \"accept\", null);\nexports.ErrorNode = ErrorNode;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:47.4646355-07:00\n\nimport { Override } from \"../Decorators\";\nimport { ParseTreeVisitor } from \"./ParseTreeVisitor\";\nimport { TerminalNode } from \"./TerminalNode\";\nimport { Token } from \"../Token\";\n\n/** Represents a token that was consumed during resynchronization\n *  rather than during a valid match operation. For example,\n *  we will create this kind of a node during single token insertion\n *  and deletion as well as during \"consume until error recovery set\"\n *  upon no viable alternative exceptions.\n */\nexport class ErrorNode extends TerminalNode {\n\tconstructor(token: Token) {\n\t\tsuper(token);\n\t}\n\n\t@Override\n\tpublic accept<T>(visitor: ParseTreeVisitor<T>): T {\n\t\treturn visitor.visitErrorNode(this);\n\t}\n}\n"]}