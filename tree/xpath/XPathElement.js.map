{"version":3,"sources":["tree/xpath/XPathElement.js","../src/tree/xpath/XPathElement.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","XPathElement","nodeName","invert","inv","className","constructor","name","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AACA,IAAAC,YAAA,GAAAC,OAAA,CAAA,kBAAA,CAAA;;IAGAC,Y;;;AAIC;;;AAGA,wBAAYC,QAAZ,EAA4B;AAAA;AAC3B,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAc,KAAd;AACA;;;;+BASc;AACd,UAAIC,GAAG,GAAW,KAAKD,MAAL,GAAc,GAAd,GAAoB,EAAtC;AACA,UAAIE,SAAS,GAAWf,MAAM,CAACgB,WAAP,CAAmBC,IAA3C;AACA,aAAOF,SAAS,GAAG,GAAZ,GAAkBD,GAAlB,GAAwB,KAAKF,QAA7B,GAAwC,GAA/C;AACA;;;;;AAJDrB,UAAA,CAAA,CADCkB,YAAA,CAAAS,QACD,CAAA,EDEEP,YAAY,CAACQ,SCFf,EDE0B,UCF1B,EDEsC,ICFtC,CAAA;;AAnBDZ,OAAA,CAAAI,YAAA,GAAAA,YAAA","file":"XPathElement.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CONVERSTION complete, Burt Harris 10/14/2016\nconst Decorators_1 = require(\"../../Decorators\");\nclass XPathElement {\n    /** Construct element like `/ID` or `ID` or `/*` etc...\n     *  op is null if just node\n     */\n    constructor(nodeName) {\n        this.nodeName = nodeName;\n        this.invert = false;\n    }\n    toString() {\n        let inv = this.invert ? \"!\" : \"\";\n        let className = Object.constructor.name;\n        return className + \"[\" + inv + this.nodeName + \"]\";\n    }\n}\n__decorate([\n    Decorators_1.Override\n], XPathElement.prototype, \"toString\", null);\nexports.XPathElement = XPathElement;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\nimport { Override } from \"../../Decorators\";\nimport { ParseTree } from \"../ParseTree\";\n\nexport abstract class XPathElement {\n\tprotected nodeName: string;\n\tpublic invert: boolean;\n\n\t/** Construct element like `/ID` or `ID` or `/*` etc...\n\t *  op is null if just node\n\t */\n\tconstructor(nodeName: string) {\n\t\tthis.nodeName = nodeName;\n\t\tthis.invert = false;\n\t}\n\n\t/**\n\t * Given tree rooted at `t` return all nodes matched by this path\n\t * element.\n\t */\n\tpublic abstract evaluate(t: ParseTree): ParseTree[];\n\n\t@Override\n\tpublic toString(): string {\n\t\tlet inv: string = this.invert ? \"!\" : \"\";\n\t\tlet className: string = Object.constructor.name;\n\t\treturn className + \"[\" + inv + this.nodeName + \"]\";\n\t}\n}\n"]}