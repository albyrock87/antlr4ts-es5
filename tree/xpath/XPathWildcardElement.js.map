{"version":3,"sources":["tree/xpath/XPathWildcardElement.js","../src/tree/xpath/XPathWildcardElement.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","Trees_1","XPath_1","XPathElement_1","XPathWildcardElement","XPath","WILDCARD","t","kids","invert","Trees","getChildren","push","XPathElement","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AACA,IAAAC,YAAA,GAAAC,OAAA,CAAA,kBAAA,CAAA;;AAGA,IAAAC,OAAA,GAAAD,OAAA,CAAA,UAAA,CAAA;;AACA,IAAAE,OAAA,GAAAF,OAAA,CAAA,SAAA,CAAA;;AACA,IAAAG,cAAA,GAAAH,OAAA,CAAA,gBAAA,CAAA;;IAEAI,oB;;;;;AACC,kCAAA;AAAA;AAAA,+HACOF,OAAA,CAAAG,KAAA,CAAMC,QADb;AAEC;;;;6BAGeC,C,EAAY;AAC3B,UAAIC,IAAI,GAAgB,EAAxB;;AACA,UAAI,KAAKC,MAAT,EAAiB;AAChB;AACA,eAAOD,IAAP;AACA;;AAL0B;AAAA;AAAA;;AAAA;AAM3B,6BAAcP,OAAA,CAAAS,KAAA,CAAMC,WAAN,CAAkBJ,CAAlB,CAAd,8HAAoC;AAAA,cAA3BrB,CAA2B;AACnCsB,UAAAA,IAAI,CAACI,IAAL,CAAU1B,CAAV;AACA;AAR0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAS3B,aAAOsB,IAAP;AACA;;;EAhBwCL,cAAA,CAAAU,Y;;AAMzChC,UAAA,CAAA,CADCkB,YAAA,CAAAe,QACD,CAAA,EDgBEV,oBAAoB,CAACW,SChBvB,EDgBkC,UChBlC,EDgB8C,IChB9C,CAAA;;AANDlB,OAAA,CAAAO,oBAAA,GAAAA,oBAAA","file":"XPathWildcardElement.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CONVERSTION complete, Burt Harris 10/14/2016\nconst Decorators_1 = require(\"../../Decorators\");\nconst Trees_1 = require(\"../Trees\");\nconst XPath_1 = require(\"./XPath\");\nconst XPathElement_1 = require(\"./XPathElement\");\nclass XPathWildcardElement extends XPathElement_1.XPathElement {\n    constructor() {\n        super(XPath_1.XPath.WILDCARD);\n    }\n    evaluate(t) {\n        let kids = [];\n        if (this.invert) {\n            // !* is weird but valid (empty)\n            return kids;\n        }\n        for (let c of Trees_1.Trees.getChildren(t)) {\n            kids.push(c);\n        }\n        return kids;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], XPathWildcardElement.prototype, \"evaluate\", null);\nexports.XPathWildcardElement = XPathWildcardElement;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\nimport { Override } from \"../../Decorators\";\nimport { ParseTree } from \"../ParseTree\";\nimport { TerminalNode } from \"../TerminalNode\";\nimport { Trees } from \"../Trees\";\nimport { XPath } from \"./XPath\";\nimport { XPathElement } from \"./XPathElement\";\n\nexport class XPathWildcardElement extends XPathElement {\n\tconstructor() {\n\t\tsuper(XPath.WILDCARD);\n\t}\n\n\t@Override\n\tpublic evaluate(t: ParseTree): ParseTree[] {\n\t\tlet kids: ParseTree[] = [];\n\t\tif (this.invert) {\n\t\t\t// !* is weird but valid (empty)\n\t\t\treturn kids;\n\t\t}\n\t\tfor (let c of Trees.getChildren(t)) {\n\t\t\tkids.push(c);\n\t\t}\n\t\treturn kids;\n\t}\n}\n"]}