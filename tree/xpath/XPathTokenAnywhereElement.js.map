{"version":3,"sources":["tree/xpath/XPathTokenAnywhereElement.js","../src/tree/xpath/XPathTokenAnywhereElement.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","Trees_1","XPathElement_1","XPathTokenAnywhereElement","tokenName","tokenType","t","Trees","findAllTokenNodes","XPathElement","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AACA,IAAAC,YAAA,GAAAC,OAAA,CAAA,kBAAA,CAAA;;AAEA,IAAAC,OAAA,GAAAD,OAAA,CAAA,UAAA,CAAA;;AACA,IAAAE,cAAA,GAAAF,OAAA,CAAA,gBAAA,CAAA;;IAEAG,yB;;;;;AAEC,qCAAYC,SAAZ,EAA+BC,SAA/B,EAAgD;AAAA;;AAAA;AAC/C,qIAAMD,SAAN;AACA,UAAKC,SAAL,GAAiBA,SAAjB;AAF+C;AAG/C;;;;6BAGeC,C,EAAY;AAC3B,aAAOL,OAAA,CAAAM,KAAA,CAAMC,iBAAN,CAAwBF,CAAxB,EAA2B,KAAKD,SAAhC,CAAP;AACA;;;EAV6CH,cAAA,CAAAO,Y;;AAQ9C5B,UAAA,CAAA,CADCkB,YAAA,CAAAW,QACD,CAAA,EDQEP,yBAAyB,CAACQ,SCR5B,EDQuC,UCRvC,EDQmD,ICRnD,CAAA;;AARDd,OAAA,CAAAM,yBAAA,GAAAA,yBAAA","file":"XPathTokenAnywhereElement.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CONVERSTION complete, Burt Harris 10/14/2016\nconst Decorators_1 = require(\"../../Decorators\");\nconst Trees_1 = require(\"../Trees\");\nconst XPathElement_1 = require(\"./XPathElement\");\nclass XPathTokenAnywhereElement extends XPathElement_1.XPathElement {\n    constructor(tokenName, tokenType) {\n        super(tokenName);\n        this.tokenType = tokenType;\n    }\n    evaluate(t) {\n        return Trees_1.Trees.findAllTokenNodes(t, this.tokenType);\n    }\n}\n__decorate([\n    Decorators_1.Override\n], XPathTokenAnywhereElement.prototype, \"evaluate\", null);\nexports.XPathTokenAnywhereElement = XPathTokenAnywhereElement;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\nimport { Override } from \"../../Decorators\";\nimport { ParseTree } from \"../ParseTree\";\nimport { Trees } from \"../Trees\";\nimport { XPathElement } from \"./XPathElement\";\n\nexport class XPathTokenAnywhereElement extends XPathElement {\n\tprotected tokenType: number;\n\tconstructor(tokenName: string, tokenType: number) {\n\t\tsuper(tokenName);\n\t\tthis.tokenType = tokenType;\n\t}\n\n\t@Override\n\tpublic evaluate(t: ParseTree): ParseTree[] {\n\t\treturn Trees.findAllTokenNodes(t, this.tokenType);\n\t}\n}\n"]}