{"version":3,"sources":["tree/pattern/RuleTagToken.js","../src/tree/pattern/RuleTagToken.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","Token_1","RuleTagToken","ruleName","bypassTokenType","label","Error","_ruleName","_label","Token","DEFAULT_CHANNEL","undefined","NotNull","prototype","Override"],"mappings":"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","file":"RuleTagToken.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../../Decorators\");\nconst Token_1 = require(\"../../Token\");\n/**\n * A {@link Token} object representing an entire subtree matched by a parser\n * rule; e.g., `<expr>`. These tokens are created for {@link TagChunk}\n * chunks where the tag corresponds to a parser rule.\n */\nlet RuleTagToken = class RuleTagToken {\n    /**\n     * Constructs a new instance of {@link RuleTagToken} with the specified rule\n     * name, bypass token type, and label.\n     *\n     * @param ruleName The name of the parser rule this rule tag matches.\n     * @param bypassTokenType The bypass token type assigned to the parser rule.\n     * @param label The label associated with the rule tag, or `undefined` if\n     * the rule tag is unlabeled.\n     *\n     * @exception IllegalArgumentException if `ruleName` is not defined\n     * or empty.\n     */\n    constructor(ruleName, bypassTokenType, label) {\n        if (ruleName == null || ruleName.length === 0) {\n            throw new Error(\"ruleName cannot be null or empty.\");\n        }\n        this._ruleName = ruleName;\n        this.bypassTokenType = bypassTokenType;\n        this._label = label;\n    }\n    /**\n     * Gets the name of the rule associated with this rule tag.\n     *\n     * @returns The name of the parser rule associated with this rule tag.\n     */\n    get ruleName() {\n        return this._ruleName;\n    }\n    /**\n     * Gets the label associated with the rule tag.\n     *\n     * @returns The name of the label associated with the rule tag, or\n     * `undefined` if this is an unlabeled rule tag.\n     */\n    get label() {\n        return this._label;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.\n     */\n    get channel() {\n        return Token_1.Token.DEFAULT_CHANNEL;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * This method returns the rule tag formatted with `<` and `>`\n     * delimiters.\n     */\n    get text() {\n        if (this._label != null) {\n            return \"<\" + this._label + \":\" + this._ruleName + \">\";\n        }\n        return \"<\" + this._ruleName + \">\";\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * Rule tag tokens have types assigned according to the rule bypass\n     * transitions created during ATN deserialization.\n     */\n    get type() {\n        return this.bypassTokenType;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns 0.\n     */\n    get line() {\n        return 0;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns -1.\n     */\n    get charPositionInLine() {\n        return -1;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns -1.\n     */\n    get tokenIndex() {\n        return -1;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns -1.\n     */\n    get startIndex() {\n        return -1;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns -1.\n     */\n    get stopIndex() {\n        return -1;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns `undefined`.\n     */\n    get tokenSource() {\n        return undefined;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} always returns `undefined`.\n     */\n    get inputStream() {\n        return undefined;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link RuleTagToken} returns a string of the form\n     * `ruleName:bypassTokenType`.\n     */\n    toString() {\n        return this._ruleName + \":\" + this.bypassTokenType;\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], RuleTagToken.prototype, \"ruleName\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"channel\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"text\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"type\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"line\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"charPositionInLine\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"tokenIndex\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"startIndex\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"stopIndex\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"tokenSource\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"inputStream\", null);\n__decorate([\n    Decorators_1.Override\n], RuleTagToken.prototype, \"toString\", null);\nRuleTagToken = __decorate([\n    __param(0, Decorators_1.NotNull)\n], RuleTagToken);\nexports.RuleTagToken = RuleTagToken;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.0343500-07:00\n\nimport { CharStream } from \"../../CharStream\";\nimport { NotNull, Override } from \"../../Decorators\";\nimport { Token } from \"../../Token\";\nimport { TokenSource } from \"../../TokenSource\";\n\n/**\n * A {@link Token} object representing an entire subtree matched by a parser\n * rule; e.g., `<expr>`. These tokens are created for {@link TagChunk}\n * chunks where the tag corresponds to a parser rule.\n */\nexport class RuleTagToken implements Token {\n\t/**\n\t * This is the backing field for `ruleName`.\n\t */\n\tprivate _ruleName: string;\n\t/**\n\t * The token type for the current token. This is the token type assigned to\n\t * the bypass alternative for the rule during ATN deserialization.\n\t */\n\tprivate bypassTokenType: number;\n\t/**\n\t * This is the backing field for `label`.\n\t */\n\tprivate _label?: string;\n\n\t/**\n\t * Constructs a new instance of {@link RuleTagToken} with the specified rule\n\t * name, bypass token type, and label.\n\t *\n\t * @param ruleName The name of the parser rule this rule tag matches.\n\t * @param bypassTokenType The bypass token type assigned to the parser rule.\n\t * @param label The label associated with the rule tag, or `undefined` if\n\t * the rule tag is unlabeled.\n\t *\n\t * @exception IllegalArgumentException if `ruleName` is not defined\n\t * or empty.\n\t */\n\tconstructor(@NotNull ruleName: string, bypassTokenType: number, label?: string) {\n\t\tif (ruleName == null || ruleName.length === 0) {\n\t\t\tthrow new Error(\"ruleName cannot be null or empty.\");\n\t\t}\n\n\t\tthis._ruleName = ruleName;\n\t\tthis.bypassTokenType = bypassTokenType;\n\t\tthis._label = label;\n\t}\n\n\t/**\n\t * Gets the name of the rule associated with this rule tag.\n\t *\n\t * @returns The name of the parser rule associated with this rule tag.\n\t */\n\t@NotNull\n\tget ruleName(): string {\n\t\treturn this._ruleName;\n\t}\n\n\t/**\n\t * Gets the label associated with the rule tag.\n\t *\n\t * @returns The name of the label associated with the rule tag, or\n\t * `undefined` if this is an unlabeled rule tag.\n\t */\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * Rule tag tokens are always placed on the {@link #DEFAULT_CHANNEL}.\n\t */\n\t@Override\n\tget channel(): number {\n\t\treturn Token.DEFAULT_CHANNEL;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This method returns the rule tag formatted with `<` and `>`\n\t * delimiters.\n\t */\n\t@Override\n\tget text(): string {\n\t\tif (this._label != null) {\n\t\t\treturn \"<\" + this._label + \":\" + this._ruleName + \">\";\n\t\t}\n\n\t\treturn \"<\" + this._ruleName + \">\";\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * Rule tag tokens have types assigned according to the rule bypass\n\t * transitions created during ATN deserialization.\n\t */\n\t@Override\n\tget type(): number {\n\t\treturn this.bypassTokenType;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns 0.\n\t */\n\t@Override\n\tget line(): number {\n\t\treturn 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns -1.\n\t */\n\t@Override\n\tget charPositionInLine(): number {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns -1.\n\t */\n\t@Override\n\tget tokenIndex(): number {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns -1.\n\t */\n\t@Override\n\tget startIndex(): number {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns -1.\n\t */\n\t@Override\n\tget stopIndex(): number {\n\t\treturn -1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns `undefined`.\n\t */\n\t@Override\n\tget tokenSource(): TokenSource | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} always returns `undefined`.\n\t */\n\t@Override\n\tget inputStream(): CharStream | undefined {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link RuleTagToken} returns a string of the form\n\t * `ruleName:bypassTokenType`.\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\treturn this._ruleName + \":\" + this.bypassTokenType;\n\t}\n}\n"]}