{"version":3,"sources":["tree/pattern/TagChunk.js","../src/tree/pattern/TagChunk.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Chunk_1","require","Decorators_1","TagChunk","tag","label","Error","_tag","_label","Chunk","NotNull","prototype","Override"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,OAAA,GAAAC,OAAA,CAAA,SAAA,CAAA;;AACA,IAAAC,YAAA,GAAAD,OAAA,CAAA,kBAAA,CAAA;AAEA;;;;;;;;;;;;;;IAYAE,Q;;;;;AAUC;;;;;;;;;;;;AAYA,oBAAYC,GAAZ,EAAyBC,KAAzB,EAAuC;AAAA;;AAAA;AACtC;;AAEA,QAAID,GAAG,IAAI,IAAP,IAAeA,GAAG,CAACf,MAAJ,KAAe,CAAlC,EAAqC;AACpC,YAAM,IAAIiB,KAAJ,CAAU,6BAAV,CAAN;AACA;;AAED,UAAKC,IAAL,GAAYH,GAAZ;AACA,UAAKI,MAAL,GAAcH,KAAd;AARsC;AAStC;AAED;;;;;;;;;;AAoBA;;;;;+BAMe;AACd,UAAI,KAAKG,MAAL,IAAe,IAAnB,EAAyB;AACxB,eAAO,KAAKA,MAAL,GAAc,GAAd,GAAoB,KAAKD,IAAhC;AACA;;AAED,aAAO,KAAKA,IAAZ;AACA;;;wBA1BM;AACN,aAAO,KAAKA,IAAZ;AACA;AAED;;;;;;;;;wBAMS;AACR,aAAO,KAAKC,MAAZ;AACA;;;EAnD4BR,OAAA,CAAAS,K;;AAuC7B3B,UAAA,CAAA,CADCoB,YAAA,CAAAQ,OACD,CAAA,EDkBEP,QAAQ,CAACQ,SClBX,EDkBsB,KClBtB,EDkB6B,IClB7B,CAAA;;AAoBA7B,UAAA,CAAA,CADCoB,YAAA,CAAAU,QACD,CAAA,EDCET,QAAQ,CAACQ,SCDX,EDCsB,UCDtB,EDCkC,ICDlC,CAAA;;AA3DDb,OAAA,CAAAK,QAAA,GAAAA,QAAA","file":"TagChunk.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:46.1670669-07:00\nconst Chunk_1 = require(\"./Chunk\");\nconst Decorators_1 = require(\"../../Decorators\");\n/**\n * Represents a placeholder tag in a tree pattern. A tag can have any of the\n * following forms.\n *\n * * `expr`: An unlabeled placeholder for a parser rule `expr`.\n * * `ID`: An unlabeled placeholder for a token of type `ID`.\n * * `e:expr`: A labeled placeholder for a parser rule `expr`.\n * * `id:ID`: A labeled placeholder for a token of type `ID`.\n *\n * This class does not perform any validation on the tag or label names aside\n * from ensuring that the tag is a defined, non-empty string.\n */\nclass TagChunk extends Chunk_1.Chunk {\n    /**\n     * Construct a new instance of {@link TagChunk} using the specified label\n     * and tag.\n     *\n     * @param label The label for the tag. If this is `undefined`, the\n     * {@link TagChunk} represents an unlabeled tag.\n     * @param tag The tag, which should be the name of a parser rule or token\n     * type.\n     *\n     * @exception IllegalArgumentException if `tag` is not defined or\n     * empty.\n     */\n    constructor(tag, label) {\n        super();\n        if (tag == null || tag.length === 0) {\n            throw new Error(\"tag cannot be null or empty\");\n        }\n        this._tag = tag;\n        this._label = label;\n    }\n    /**\n     * Get the tag for this chunk.\n     *\n     * @returns The tag for the chunk.\n     */\n    get tag() {\n        return this._tag;\n    }\n    /**\n     * Get the label, if any, assigned to this chunk.\n     *\n     * @returns The label assigned to this chunk, or `undefined` if no label is\n     * assigned to the chunk.\n     */\n    get label() {\n        return this._label;\n    }\n    /**\n     * This method returns a text representation of the tag chunk. Labeled tags\n     * are returned in the form `label:tag`, and unlabeled tags are\n     * returned as just the tag name.\n     */\n    toString() {\n        if (this._label != null) {\n            return this._label + \":\" + this._tag;\n        }\n        return this._tag;\n    }\n}\n__decorate([\n    Decorators_1.NotNull\n], TagChunk.prototype, \"tag\", null);\n__decorate([\n    Decorators_1.Override\n], TagChunk.prototype, \"toString\", null);\nexports.TagChunk = TagChunk;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.1670669-07:00\n\nimport { Chunk } from \"./Chunk\";\nimport { NotNull, Override } from \"../../Decorators\";\n\n/**\n * Represents a placeholder tag in a tree pattern. A tag can have any of the\n * following forms.\n *\n * * `expr`: An unlabeled placeholder for a parser rule `expr`.\n * * `ID`: An unlabeled placeholder for a token of type `ID`.\n * * `e:expr`: A labeled placeholder for a parser rule `expr`.\n * * `id:ID`: A labeled placeholder for a token of type `ID`.\n *\n * This class does not perform any validation on the tag or label names aside\n * from ensuring that the tag is a defined, non-empty string.\n */\nexport class TagChunk extends Chunk {\n\t/**\n\t * This is the backing field for `tag`.\n\t */\n\tprivate _tag: string;\n\t/**\n\t * This is the backing field for `label`.\n\t */\n\tprivate _label?: string;\n\n\t/**\n\t * Construct a new instance of {@link TagChunk} using the specified label\n\t * and tag.\n\t *\n\t * @param label The label for the tag. If this is `undefined`, the\n\t * {@link TagChunk} represents an unlabeled tag.\n\t * @param tag The tag, which should be the name of a parser rule or token\n\t * type.\n\t *\n\t * @exception IllegalArgumentException if `tag` is not defined or\n\t * empty.\n\t */\n\tconstructor(tag: string, label?: string) {\n\t\tsuper();\n\n\t\tif (tag == null || tag.length === 0) {\n\t\t\tthrow new Error(\"tag cannot be null or empty\");\n\t\t}\n\n\t\tthis._tag = tag;\n\t\tthis._label = label;\n\t}\n\n\t/**\n\t * Get the tag for this chunk.\n\t *\n\t * @returns The tag for the chunk.\n\t */\n\t@NotNull\n\tget tag(): string {\n\t\treturn this._tag;\n\t}\n\n\t/**\n\t * Get the label, if any, assigned to this chunk.\n\t *\n\t * @returns The label assigned to this chunk, or `undefined` if no label is\n\t * assigned to the chunk.\n\t */\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * This method returns a text representation of the tag chunk. Labeled tags\n\t * are returned in the form `label:tag`, and unlabeled tags are\n\t * returned as just the tag name.\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\tif (this._label != null) {\n\t\t\treturn this._label + \":\" + this._tag;\n\t\t}\n\n\t\treturn this._tag;\n\t}\n}\n"]}