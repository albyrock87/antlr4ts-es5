{"version":3,"sources":["tree/pattern/TokenTagToken.js","../src/tree/pattern/TokenTagToken.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","CommonToken_1","require","Decorators_1","TokenTagToken","tokenName","type","label","_tokenName","_label","CommonToken","NotNull","prototype","Override"],"mappings":"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","file":"TokenTagToken.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00\nconst CommonToken_1 = require(\"../../CommonToken\");\nconst Decorators_1 = require(\"../../Decorators\");\n/**\n * A {@link Token} object representing a token of a particular type; e.g.,\n * `<ID>`. These tokens are created for {@link TagChunk} chunks where the\n * tag corresponds to a lexer rule or token type.\n */\nlet TokenTagToken = class TokenTagToken extends CommonToken_1.CommonToken {\n    /**\n     * Constructs a new instance of {@link TokenTagToken} with the specified\n     * token name, type, and label.\n     *\n     * @param tokenName The token name.\n     * @param type The token type.\n     * @param label The label associated with the token tag, or `undefined` if\n     * the token tag is unlabeled.\n     */\n    constructor(tokenName, type, label) {\n        super(type);\n        this._tokenName = tokenName;\n        this._label = label;\n    }\n    /**\n     * Gets the token name.\n     * @returns The token name.\n     */\n    get tokenName() {\n        return this._tokenName;\n    }\n    /**\n     * Gets the label associated with the rule tag.\n     *\n     * @returns The name of the label associated with the rule tag, or\n     * `undefined` if this is an unlabeled rule tag.\n     */\n    get label() {\n        return this._label;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link TokenTagToken} returns the token tag\n     * formatted with `<` and `>` delimiters.\n     */\n    get text() {\n        if (this._label != null) {\n            return \"<\" + this._label + \":\" + this._tokenName + \">\";\n        }\n        return \"<\" + this._tokenName + \">\";\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link TokenTagToken} returns a string of the form\n     * `tokenName:type`.\n     */\n    toString() {\n        return this._tokenName + \":\" + this.type;\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], TokenTagToken.prototype, \"_tokenName\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], TokenTagToken.prototype, \"tokenName\", null);\n__decorate([\n    Decorators_1.Override\n], TokenTagToken.prototype, \"text\", null);\n__decorate([\n    Decorators_1.Override\n], TokenTagToken.prototype, \"toString\", null);\nTokenTagToken = __decorate([\n    __param(0, Decorators_1.NotNull)\n], TokenTagToken);\nexports.TokenTagToken = TokenTagToken;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.3281988-07:00\n\nimport { CommonToken } from \"../../CommonToken\";\nimport { NotNull, Override } from \"../../Decorators\";\n\n/**\n * A {@link Token} object representing a token of a particular type; e.g.,\n * `<ID>`. These tokens are created for {@link TagChunk} chunks where the\n * tag corresponds to a lexer rule or token type.\n */\nexport class TokenTagToken extends CommonToken {\n\t/**\n\t * This is the backing field for `tokenName`.\n\t */\n\t@NotNull\n\tprivate _tokenName: string;\n\t/**\n\t * This is the backing field for `label`.\n\t */\n\tprivate _label: string | undefined;\n\n\t/**\n\t * Constructs a new instance of {@link TokenTagToken} with the specified\n\t * token name, type, and label.\n\t *\n\t * @param tokenName The token name.\n\t * @param type The token type.\n\t * @param label The label associated with the token tag, or `undefined` if\n\t * the token tag is unlabeled.\n\t */\n\tconstructor(@NotNull tokenName: string, type: number, label?: string) {\n\t\tsuper(type);\n\t\tthis._tokenName = tokenName;\n\t\tthis._label = label;\n\t}\n\n\t/**\n\t * Gets the token name.\n\t * @returns The token name.\n\t */\n\t@NotNull\n\tget tokenName(): string {\n\t\treturn this._tokenName;\n\t}\n\n\t/**\n\t * Gets the label associated with the rule tag.\n\t *\n\t * @returns The name of the label associated with the rule tag, or\n\t * `undefined` if this is an unlabeled rule tag.\n\t */\n\tget label(): string | undefined {\n\t\treturn this._label;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link TokenTagToken} returns the token tag\n\t * formatted with `<` and `>` delimiters.\n\t */\n\t@Override\n\tget text(): string {\n\t\tif (this._label != null) {\n\t\t\treturn \"<\" + this._label + \":\" + this._tokenName + \">\";\n\t\t}\n\n\t\treturn \"<\" + this._tokenName + \">\";\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link TokenTagToken} returns a string of the form\n\t * `tokenName:type`.\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\treturn this._tokenName + \":\" + this.type;\n\t}\n}\n"]}