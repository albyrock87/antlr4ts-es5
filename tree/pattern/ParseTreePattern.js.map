{"version":3,"sources":["tree/pattern/ParseTreePattern.js","../src/tree/pattern/ParseTreePattern.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","XPath_1","ParseTreePattern","matcher","pattern","patternRuleIndex","patternTree","_matcher","_patternRuleIndex","_pattern","_patternTree","tree","match","succeeded","xpath","subtrees","XPath","findAll","parser","matches","t","push","NotNull","prototype"],"mappings":"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","file":"ParseTreePattern.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// CONVERSTION complete, Burt Harris 10/14/2016\nconst Decorators_1 = require(\"../../Decorators\");\nconst XPath_1 = require(\"../xpath/XPath\");\n/**\n * A pattern like `<ID> = <expr>;` converted to a {@link ParseTree} by\n * {@link ParseTreePatternMatcher#compile(String, int)}.\n */\nlet ParseTreePattern = class ParseTreePattern {\n    /**\n     * Construct a new instance of the {@link ParseTreePattern} class.\n     *\n     * @param matcher The {@link ParseTreePatternMatcher} which created this\n     * tree pattern.\n     * @param pattern The tree pattern in concrete syntax form.\n     * @param patternRuleIndex The parser rule which serves as the root of the\n     * tree pattern.\n     * @param patternTree The tree pattern in {@link ParseTree} form.\n     */\n    constructor(matcher, pattern, patternRuleIndex, patternTree) {\n        this._matcher = matcher;\n        this._patternRuleIndex = patternRuleIndex;\n        this._pattern = pattern;\n        this._patternTree = patternTree;\n    }\n    /**\n     * Match a specific parse tree against this tree pattern.\n     *\n     * @param tree The parse tree to match against this tree pattern.\n     * @returns A {@link ParseTreeMatch} object describing the result of the\n     * match operation. The `ParseTreeMatch.succeeded` method can be\n     * used to determine whether or not the match was successful.\n     */\n    match(tree) {\n        return this._matcher.match(tree, this);\n    }\n    /**\n     * Determine whether or not a parse tree matches this tree pattern.\n     *\n     * @param tree The parse tree to match against this tree pattern.\n     * @returns `true` if `tree` is a match for the current tree\n     * pattern; otherwise, `false`.\n     */\n    matches(tree) {\n        return this._matcher.match(tree, this).succeeded;\n    }\n    /**\n     * Find all nodes using XPath and then try to match those subtrees against\n     * this tree pattern.\n     *\n     * @param tree The {@link ParseTree} to match against this pattern.\n     * @param xpath An expression matching the nodes\n     *\n     * @returns A collection of {@link ParseTreeMatch} objects describing the\n     * successful matches. Unsuccessful matches are omitted from the result,\n     * regardless of the reason for the failure.\n     */\n    findAll(tree, xpath) {\n        let subtrees = XPath_1.XPath.findAll(tree, xpath, this._matcher.parser);\n        let matches = [];\n        for (let t of subtrees) {\n            let match = this.match(t);\n            if (match.succeeded) {\n                matches.push(match);\n            }\n        }\n        return matches;\n    }\n    /**\n     * Get the {@link ParseTreePatternMatcher} which created this tree pattern.\n     *\n     * @returns The {@link ParseTreePatternMatcher} which created this tree\n     * pattern.\n     */\n    get matcher() {\n        return this._matcher;\n    }\n    /**\n     * Get the tree pattern in concrete syntax form.\n     *\n     * @returns The tree pattern in concrete syntax form.\n     */\n    get pattern() {\n        return this._pattern;\n    }\n    /**\n     * Get the parser rule which serves as the outermost rule for the tree\n     * pattern.\n     *\n     * @returns The parser rule which serves as the outermost rule for the tree\n     * pattern.\n     */\n    get patternRuleIndex() {\n        return this._patternRuleIndex;\n    }\n    /**\n     * Get the tree pattern as a {@link ParseTree}. The rule and token tags from\n     * the pattern are present in the parse tree as terminal nodes with a symbol\n     * of type {@link RuleTagToken} or {@link TokenTagToken}.\n     *\n     * @returns The tree pattern as a {@link ParseTree}.\n     */\n    get patternTree() {\n        return this._patternTree;\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"_pattern\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"_patternTree\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"_matcher\", void 0);\n__decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n], ParseTreePattern.prototype, \"match\", null);\n__decorate([\n    __param(0, Decorators_1.NotNull)\n], ParseTreePattern.prototype, \"matches\", null);\n__decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull), __param(1, Decorators_1.NotNull)\n], ParseTreePattern.prototype, \"findAll\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"matcher\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"pattern\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreePattern.prototype, \"patternTree\", null);\nParseTreePattern = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n], ParseTreePattern);\nexports.ParseTreePattern = ParseTreePattern;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\nimport { NotNull } from \"../../Decorators\";\nimport { ParseTree } from \"../ParseTree\";\nimport { ParseTreeMatch } from \"./ParseTreeMatch\";\nimport { ParseTreePatternMatcher } from \"./ParseTreePatternMatcher\";\nimport { XPath } from \"../xpath/XPath\";\n\n/**\n * A pattern like `<ID> = <expr>;` converted to a {@link ParseTree} by\n * {@link ParseTreePatternMatcher#compile(String, int)}.\n */\nexport class ParseTreePattern {\n\t/**\n\t * This is the backing field for `patternRuleIndex`.\n\t */\n\tprivate _patternRuleIndex: number;\n\n\t/**\n\t * This is the backing field for `pattern`.\n\t */\n\t@NotNull\n\tprivate _pattern: string;\n\n\t/**\n\t * This is the backing field for `patternTree`.\n\t */\n\t@NotNull\n\tprivate _patternTree: ParseTree;\n\n\t/**\n\t * This is the backing field for `matcher`.\n\t */\n\t@NotNull\n\tprivate _matcher: ParseTreePatternMatcher;\n\n\t/**\n\t * Construct a new instance of the {@link ParseTreePattern} class.\n\t *\n\t * @param matcher The {@link ParseTreePatternMatcher} which created this\n\t * tree pattern.\n\t * @param pattern The tree pattern in concrete syntax form.\n\t * @param patternRuleIndex The parser rule which serves as the root of the\n\t * tree pattern.\n\t * @param patternTree The tree pattern in {@link ParseTree} form.\n\t */\n\tconstructor(\n\t\t@NotNull matcher: ParseTreePatternMatcher,\n\t\t@NotNull pattern: string,\n\t\tpatternRuleIndex: number,\n\t\t@NotNull patternTree: ParseTree) {\n\t\tthis._matcher = matcher;\n\t\tthis._patternRuleIndex = patternRuleIndex;\n\t\tthis._pattern = pattern;\n\t\tthis._patternTree = patternTree;\n\t}\n\n\t/**\n\t * Match a specific parse tree against this tree pattern.\n\t *\n\t * @param tree The parse tree to match against this tree pattern.\n\t * @returns A {@link ParseTreeMatch} object describing the result of the\n\t * match operation. The `ParseTreeMatch.succeeded` method can be\n\t * used to determine whether or not the match was successful.\n\t */\n\t@NotNull\n\tpublic match(@NotNull tree: ParseTree): ParseTreeMatch {\n\t\treturn this._matcher.match(tree, this);\n\t}\n\n\t/**\n\t * Determine whether or not a parse tree matches this tree pattern.\n\t *\n\t * @param tree The parse tree to match against this tree pattern.\n\t * @returns `true` if `tree` is a match for the current tree\n\t * pattern; otherwise, `false`.\n\t */\n\tpublic matches(@NotNull tree: ParseTree): boolean {\n\t\treturn this._matcher.match(tree, this).succeeded;\n\t}\n\n\t/**\n\t * Find all nodes using XPath and then try to match those subtrees against\n\t * this tree pattern.\n\t *\n\t * @param tree The {@link ParseTree} to match against this pattern.\n\t * @param xpath An expression matching the nodes\n\t *\n\t * @returns A collection of {@link ParseTreeMatch} objects describing the\n\t * successful matches. Unsuccessful matches are omitted from the result,\n\t * regardless of the reason for the failure.\n\t */\n\t@NotNull\n\tpublic findAll(@NotNull tree: ParseTree, @NotNull xpath: string): ParseTreeMatch[] {\n\t\tlet subtrees: Set<ParseTree> = XPath.findAll(tree, xpath, this._matcher.parser);\n\t\tlet matches: ParseTreeMatch[] = [];\n\t\tfor (let t of subtrees) {\n\t\t\tlet match: ParseTreeMatch = this.match(t);\n\t\t\tif (match.succeeded) {\n\t\t\t\tmatches.push(match);\n\t\t\t}\n\t\t}\n\t\treturn matches;\n\t}\n\n\t/**\n\t * Get the {@link ParseTreePatternMatcher} which created this tree pattern.\n\t *\n\t * @returns The {@link ParseTreePatternMatcher} which created this tree\n\t * pattern.\n\t */\n\t@NotNull\n\tget matcher(): ParseTreePatternMatcher {\n\t\treturn this._matcher;\n\t}\n\n\t/**\n\t * Get the tree pattern in concrete syntax form.\n\t *\n\t * @returns The tree pattern in concrete syntax form.\n\t */\n\t@NotNull\n\tget pattern(): string {\n\t\treturn this._pattern;\n\t}\n\n\t/**\n\t * Get the parser rule which serves as the outermost rule for the tree\n\t * pattern.\n\t *\n\t * @returns The parser rule which serves as the outermost rule for the tree\n\t * pattern.\n\t */\n\tget patternRuleIndex(): number {\n\t\treturn this._patternRuleIndex;\n\t}\n\n\t/**\n\t * Get the tree pattern as a {@link ParseTree}. The rule and token tags from\n\t * the pattern are present in the parse tree as terminal nodes with a symbol\n\t * of type {@link RuleTagToken} or {@link TokenTagToken}.\n\t *\n\t * @returns The tree pattern as a {@link ParseTree}.\n\t */\n\t@NotNull\n\tget patternTree(): ParseTree {\n\t\treturn this._patternTree;\n\t}\n}\n"]}