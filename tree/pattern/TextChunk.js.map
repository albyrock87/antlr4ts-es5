{"version":3,"sources":["tree/pattern/TextChunk.js","../src/tree/pattern/TextChunk.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Chunk_1","require","Decorators_1","TextChunk","text","Error","_text","Chunk","NotNull","prototype","Override"],"mappings":"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","file":"TextChunk.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:46.2521448-07:00\nconst Chunk_1 = require(\"./Chunk\");\nconst Decorators_1 = require(\"../../Decorators\");\n/**\n * Represents a span of raw text (concrete syntax) between tags in a tree\n * pattern string.\n */\nlet TextChunk = class TextChunk extends Chunk_1.Chunk {\n    /**\n     * Constructs a new instance of {@link TextChunk} with the specified text.\n     *\n     * @param text The text of this chunk.\n     * @exception IllegalArgumentException if `text` is not defined.\n     */\n    constructor(text) {\n        super();\n        if (text == null) {\n            throw new Error(\"text cannot be null\");\n        }\n        this._text = text;\n    }\n    /**\n     * Gets the raw text of this chunk.\n     *\n     * @returns The text of the chunk.\n     */\n    get text() {\n        return this._text;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * The implementation for {@link TextChunk} returns the result of\n     * `text` in single quotes.\n     */\n    toString() {\n        return \"'\" + this._text + \"'\";\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], TextChunk.prototype, \"_text\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], TextChunk.prototype, \"text\", null);\n__decorate([\n    Decorators_1.Override\n], TextChunk.prototype, \"toString\", null);\nTextChunk = __decorate([\n    __param(0, Decorators_1.NotNull)\n], TextChunk);\nexports.TextChunk = TextChunk;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:46.2521448-07:00\n\nimport { Chunk } from \"./Chunk\";\nimport { NotNull, Override } from \"../../Decorators\";\n\n/**\n * Represents a span of raw text (concrete syntax) between tags in a tree\n * pattern string.\n */\nexport class TextChunk extends Chunk {\n\t/**\n\t * This is the backing field for {@link #getText}.\n\t */\n\t@NotNull\n\tprivate _text: string;\n\n\t/**\n\t * Constructs a new instance of {@link TextChunk} with the specified text.\n\t *\n\t * @param text The text of this chunk.\n\t * @exception IllegalArgumentException if `text` is not defined.\n\t */\n\tconstructor(@NotNull text: string) {\n\t\tsuper();\n\n\t\tif (text == null) {\n\t\t\tthrow new Error(\"text cannot be null\");\n\t\t}\n\n\t\tthis._text = text;\n\t}\n\n\t/**\n\t * Gets the raw text of this chunk.\n\t *\n\t * @returns The text of the chunk.\n\t */\n\t@NotNull\n\tget text(): string {\n\t\treturn this._text;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * The implementation for {@link TextChunk} returns the result of\n\t * `text` in single quotes.\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\treturn \"'\" + this._text + \"'\";\n\t}\n}\n"]}