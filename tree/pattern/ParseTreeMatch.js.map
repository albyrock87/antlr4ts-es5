{"version":3,"sources":["tree/pattern/ParseTreeMatch.js","../src/tree/pattern/ParseTreeMatch.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","ParseTreeMatch","tree","pattern","labels","mismatchedNode","Error","_tree","_pattern","_labels","_mismatchedNode","label","parseTrees","get","undefined","nodes","succeeded","size","NotNull","prototype","Override"],"mappings":"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","file":"ParseTreeMatch.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../../Decorators\");\n/**\n * Represents the result of matching a {@link ParseTree} against a tree pattern.\n */\nlet ParseTreeMatch = class ParseTreeMatch {\n    /**\n     * Constructs a new instance of {@link ParseTreeMatch} from the specified\n     * parse tree and pattern.\n     *\n     * @param tree The parse tree to match against the pattern.\n     * @param pattern The parse tree pattern.\n     * @param labels A mapping from label names to collections of\n     * {@link ParseTree} objects located by the tree pattern matching process.\n     * @param mismatchedNode The first node which failed to match the tree\n     * pattern during the matching process.\n     *\n     * @throws {@link Error} if `tree` is not defined\n     * @throws {@link Error} if `pattern` is not defined\n     * @throws {@link Error} if `labels` is not defined\n     */\n    constructor(tree, pattern, labels, mismatchedNode) {\n        if (!tree) {\n            throw new Error(\"tree cannot be null\");\n        }\n        if (!pattern) {\n            throw new Error(\"pattern cannot be null\");\n        }\n        if (!labels) {\n            throw new Error(\"labels cannot be null\");\n        }\n        this._tree = tree;\n        this._pattern = pattern;\n        this._labels = labels;\n        this._mismatchedNode = mismatchedNode;\n    }\n    /**\n     * Get the last node associated with a specific `label`.\n     *\n     * For example, for pattern `<id:ID>`, `get(\"id\")` returns the\n     * node matched for that `ID`. If more than one node\n     * matched the specified label, only the last is returned. If there is\n     * no node associated with the label, this returns `undefined`.\n     *\n     * Pattern tags like `<ID>` and `<expr>` without labels are\n     * considered to be labeled with `ID` and `expr`, respectively.\n     *\n     * @param label The label to check.\n     *\n     * @returns The last {@link ParseTree} to match a tag with the specified\n     * label, or `undefined` if no parse tree matched a tag with the label.\n     */\n    get(label) {\n        let parseTrees = this._labels.get(label);\n        if (!parseTrees || parseTrees.length === 0) {\n            return undefined;\n        }\n        return parseTrees[parseTrees.length - 1]; // return last if multiple\n    }\n    /**\n     * Return all nodes matching a rule or token tag with the specified label.\n     *\n     * If the `label` is the name of a parser rule or token in the\n     * grammar, the resulting list will contain both the parse trees matching\n     * rule or tags explicitly labeled with the label and the complete set of\n     * parse trees matching the labeled and unlabeled tags in the pattern for\n     * the parser rule or token. For example, if `label` is `\"foo\"`,\n     * the result will contain *all* of the following.\n     *\n     * * Parse tree nodes matching tags of the form `<foo:anyRuleName>` and\n     *   `<foo:AnyTokenName>`.\n     * * Parse tree nodes matching tags of the form `<anyLabel:foo>`.\n     * * Parse tree nodes matching tags of the form `<foo>`.\n     *\n     * @param label The label.\n     *\n     * @returns A collection of all {@link ParseTree} nodes matching tags with\n     * the specified `label`. If no nodes matched the label, an empty list\n     * is returned.\n     */\n    getAll(label) {\n        const nodes = this._labels.get(label);\n        if (!nodes) {\n            return [];\n        }\n        return nodes;\n    }\n    /**\n     * Return a mapping from label &rarr; [list of nodes].\n     *\n     * The map includes special entries corresponding to the names of rules and\n     * tokens referenced in tags in the original pattern. For additional\n     * information, see the description of {@link #getAll(String)}.\n     *\n     * @returns A mapping from labels to parse tree nodes. If the parse tree\n     * pattern did not contain any rule or token tags, this map will be empty.\n     */\n    get labels() {\n        return this._labels;\n    }\n    /**\n     * Get the node at which we first detected a mismatch.\n     *\n     * @returns the node at which we first detected a mismatch, or `undefined`\n     * if the match was successful.\n     */\n    get mismatchedNode() {\n        return this._mismatchedNode;\n    }\n    /**\n     * Gets a value indicating whether the match operation succeeded.\n     *\n     * @returns `true` if the match operation succeeded; otherwise,\n     * `false`.\n     */\n    get succeeded() {\n        return !this._mismatchedNode;\n    }\n    /**\n     * Get the tree pattern we are matching against.\n     *\n     * @returns The tree pattern we are matching against.\n     */\n    get pattern() {\n        return this._pattern;\n    }\n    /**\n     * Get the parse tree we are trying to match to a pattern.\n     *\n     * @returns The {@link ParseTree} we are trying to match to a pattern.\n     */\n    get tree() {\n        return this._tree;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    toString() {\n        return `Match ${this.succeeded ? \"succeeded\" : \"failed\"}; found ${this.labels.size} labels`;\n    }\n};\n__decorate([\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n], ParseTreeMatch.prototype, \"getAll\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreeMatch.prototype, \"labels\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreeMatch.prototype, \"pattern\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseTreeMatch.prototype, \"tree\", null);\n__decorate([\n    Decorators_1.Override\n], ParseTreeMatch.prototype, \"toString\", null);\nParseTreeMatch = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull)\n], ParseTreeMatch);\nexports.ParseTreeMatch = ParseTreeMatch;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// CONVERSTION complete, Burt Harris 10/14/2016\nimport { MultiMap } from \"../../misc/MultiMap\";\nimport { NotNull, Override } from \"../../Decorators\";\nimport { ParseTree } from \"../ParseTree\";\nimport { ParseTreePattern } from \"./ParseTreePattern\";\n\n/**\n * Represents the result of matching a {@link ParseTree} against a tree pattern.\n */\nexport class ParseTreeMatch {\n\t/**\n\t * This is the backing field for `tree`.\n\t */\n\tprivate _tree: ParseTree;\n\n\t/**\n\t * This is the backing field for `pattern`.\n\t */\n\tprivate _pattern: ParseTreePattern;\n\n\t/**\n\t * This is the backing field for `labels`.\n\t */\n\tprivate _labels: MultiMap<string, ParseTree>;\n\n\t/**\n\t * This is the backing field for `mismatchedNode`.\n\t */\n\tprivate _mismatchedNode?: ParseTree;\n\n\t/**\n\t * Constructs a new instance of {@link ParseTreeMatch} from the specified\n\t * parse tree and pattern.\n\t *\n\t * @param tree The parse tree to match against the pattern.\n\t * @param pattern The parse tree pattern.\n\t * @param labels A mapping from label names to collections of\n\t * {@link ParseTree} objects located by the tree pattern matching process.\n\t * @param mismatchedNode The first node which failed to match the tree\n\t * pattern during the matching process.\n\t *\n\t * @throws {@link Error} if `tree` is not defined\n\t * @throws {@link Error} if `pattern` is not defined\n\t * @throws {@link Error} if `labels` is not defined\n\t */\n\tconstructor(\n\t\t@NotNull tree: ParseTree,\n\t\t@NotNull pattern: ParseTreePattern,\n\t\t@NotNull labels: MultiMap<string, ParseTree>,\n\t\tmismatchedNode: ParseTree | undefined) {\n\t\tif (!tree) {\n\t\t\tthrow new Error(\"tree cannot be null\");\n\t\t}\n\n\t\tif (!pattern) {\n\t\t\tthrow new Error(\"pattern cannot be null\");\n\t\t}\n\n\t\tif (!labels) {\n\t\t\tthrow new Error(\"labels cannot be null\");\n\t\t}\n\n\t\tthis._tree = tree;\n\t\tthis._pattern = pattern;\n\t\tthis._labels = labels;\n\t\tthis._mismatchedNode = mismatchedNode;\n\t}\n\n\t/**\n\t * Get the last node associated with a specific `label`.\n\t *\n\t * For example, for pattern `<id:ID>`, `get(\"id\")` returns the\n\t * node matched for that `ID`. If more than one node\n\t * matched the specified label, only the last is returned. If there is\n\t * no node associated with the label, this returns `undefined`.\n\t *\n\t * Pattern tags like `<ID>` and `<expr>` without labels are\n\t * considered to be labeled with `ID` and `expr`, respectively.\n\t *\n\t * @param label The label to check.\n\t *\n\t * @returns The last {@link ParseTree} to match a tag with the specified\n\t * label, or `undefined` if no parse tree matched a tag with the label.\n\t */\n\tpublic get(label: string): ParseTree | undefined {\n\t\tlet parseTrees = this._labels.get(label);\n\t\tif (!parseTrees || parseTrees.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn parseTrees[parseTrees.length - 1]; // return last if multiple\n\t}\n\n\t/**\n\t * Return all nodes matching a rule or token tag with the specified label.\n\t *\n\t * If the `label` is the name of a parser rule or token in the\n\t * grammar, the resulting list will contain both the parse trees matching\n\t * rule or tags explicitly labeled with the label and the complete set of\n\t * parse trees matching the labeled and unlabeled tags in the pattern for\n\t * the parser rule or token. For example, if `label` is `\"foo\"`,\n\t * the result will contain *all* of the following.\n\t *\n\t * * Parse tree nodes matching tags of the form `<foo:anyRuleName>` and\n\t *   `<foo:AnyTokenName>`.\n\t * * Parse tree nodes matching tags of the form `<anyLabel:foo>`.\n\t * * Parse tree nodes matching tags of the form `<foo>`.\n\t *\n\t * @param label The label.\n\t *\n\t * @returns A collection of all {@link ParseTree} nodes matching tags with\n\t * the specified `label`. If no nodes matched the label, an empty list\n\t * is returned.\n\t */\n\t@NotNull\n\tpublic getAll(@NotNull label: string): ParseTree[] {\n\t\tconst nodes = this._labels.get(label);\n\t\tif (!nodes) {\n\t\t\treturn [];\n\t\t}\n\t\treturn nodes;\n\t}\n\n\t/**\n\t * Return a mapping from label &rarr; [list of nodes].\n\t *\n\t * The map includes special entries corresponding to the names of rules and\n\t * tokens referenced in tags in the original pattern. For additional\n\t * information, see the description of {@link #getAll(String)}.\n\t *\n\t * @returns A mapping from labels to parse tree nodes. If the parse tree\n\t * pattern did not contain any rule or token tags, this map will be empty.\n\t */\n\t@NotNull\n\tget labels(): MultiMap<string, ParseTree> {\n\t\treturn this._labels;\n\t}\n\n\t/**\n\t * Get the node at which we first detected a mismatch.\n\t *\n\t * @returns the node at which we first detected a mismatch, or `undefined`\n\t * if the match was successful.\n\t */\n\tget mismatchedNode(): ParseTree | undefined {\n\t\treturn this._mismatchedNode;\n\t}\n\n\t/**\n\t * Gets a value indicating whether the match operation succeeded.\n\t *\n\t * @returns `true` if the match operation succeeded; otherwise,\n\t * `false`.\n\t */\n\tget succeeded(): boolean {\n\t\treturn !this._mismatchedNode;\n\t}\n\n\t/**\n\t * Get the tree pattern we are matching against.\n\t *\n\t * @returns The tree pattern we are matching against.\n\t */\n\t@NotNull\n\tget pattern(): ParseTreePattern {\n\t\treturn this._pattern;\n\t}\n\n\t/**\n\t * Get the parse tree we are trying to match to a pattern.\n\t *\n\t * @returns The {@link ParseTree} we are trying to match to a pattern.\n\t */\n\t@NotNull\n\tget tree(): ParseTree {\n\t\treturn this._tree;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tpublic toString(): string {\n\t\treturn `Match ${\n\t\t\tthis.succeeded ? \"succeeded\" : \"failed\"}; found ${\n\t\t\tthis.labels.size} labels`;\n\t}\n}\n"]}