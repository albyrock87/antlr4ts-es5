{"version":3,"sources":["tree/pattern/Chunk.js","../src/tree/pattern/Chunk.ts"],"names":["Object","defineProperty","exports","value","Chunk"],"mappings":"AAAA;ACAA;;;;;;;;;ADKAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCAA;;AAEA;;;;;;;;;;;;IAWAC,K;;;;AAAAF,OAAA,CAAAE,KAAA,GAAAA,KAAA","file":"Chunk.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:45.2799060-07:00\n/**\n * A chunk is either a token tag, a rule tag, or a span of literal text within a\n * tree pattern.\n *\n * The method {@link ParseTreePatternMatcher#split(String)} returns a list of\n * chunks in preparation for creating a token stream by\n * {@link ParseTreePatternMatcher#tokenize(String)}. From there, we get a parse\n * tree from with {@link ParseTreePatternMatcher#compile(String, int)}. These\n * chunks are converted to {@link RuleTagToken}, {@link TokenTagToken}, or the\n * regular tokens of the text surrounding the tags.\n */\nclass Chunk {\n}\nexports.Chunk = Chunk;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:45.2799060-07:00\n\n/**\n * A chunk is either a token tag, a rule tag, or a span of literal text within a\n * tree pattern.\n *\n * The method {@link ParseTreePatternMatcher#split(String)} returns a list of\n * chunks in preparation for creating a token stream by\n * {@link ParseTreePatternMatcher#tokenize(String)}. From there, we get a parse\n * tree from with {@link ParseTreePatternMatcher#compile(String, int)}. These\n * chunks are converted to {@link RuleTagToken}, {@link TokenTagToken}, or the\n * regular tokens of the text surrounding the tags.\n */\nexport abstract class Chunk {\n}\n"]}