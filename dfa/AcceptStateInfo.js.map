{"version":3,"sources":["dfa/AcceptStateInfo.js","../src/dfa/AcceptStateInfo.ts"],"names":["Object","defineProperty","exports","value","AcceptStateInfo","prediction","lexerActionExecutor","_prediction","_lexerActionExecutor"],"mappings":"AAAA;ACAA;;;;;;;;;;;ADKAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;ACIA;;;;;;;;;;IASAC,e;;;AAMC,2BAAYC,UAAZ,EAAgCC,mBAAhC,EAAyE;AAAA;AACxE,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,oBAAL,GAA4BF,mBAA5B;AACA;AAED;;;;;;;;;;;wBAOc;AACb,aAAO,KAAKC,WAAZ;AACA;AAED;;;;;;;wBAIuB;AACtB,aAAO,KAAKC,oBAAZ;AACA;;;;;AA5BFN,OAAA,CAAAE,eAAA,GAAAA,eAAA","file":"AcceptStateInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Stores information about a {@link DFAState} which is an accept state under\n * some condition. Certain settings, such as\n * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to\n * this information to determine whether or not a particular state is an accept\n * state.\n *\n * @author Sam Harwell\n */\nclass AcceptStateInfo {\n    constructor(prediction, lexerActionExecutor) {\n        this._prediction = prediction;\n        this._lexerActionExecutor = lexerActionExecutor;\n    }\n    /**\n     * Gets the prediction made by this accept state. Note that this value\n     * assumes the predicates, if any, in the {@link DFAState} evaluate to\n     * `true`. If predicate evaluation is enabled, the final prediction of\n     * the accept state will be determined by the result of predicate\n     * evaluation.\n     */\n    get prediction() {\n        return this._prediction;\n    }\n    /**\n     * Gets the {@link LexerActionExecutor} which can be used to execute actions\n     * and/or commands after the lexer matches a token.\n     */\n    get lexerActionExecutor() {\n        return this._lexerActionExecutor;\n    }\n}\nexports.AcceptStateInfo = AcceptStateInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:38.1172076-07:00\n\nimport { LexerActionExecutor } from \"../atn/LexerActionExecutor\";\n\n/**\n * Stores information about a {@link DFAState} which is an accept state under\n * some condition. Certain settings, such as\n * {@link ParserATNSimulator#getPredictionMode()}, may be used in addition to\n * this information to determine whether or not a particular state is an accept\n * state.\n *\n * @author Sam Harwell\n */\nexport class AcceptStateInfo {\n\tprivate readonly _prediction: number;\n\tprivate readonly _lexerActionExecutor?: LexerActionExecutor;\n\n\tconstructor(prediction: number);\n\tconstructor(prediction: number, lexerActionExecutor: LexerActionExecutor | undefined);\n\tconstructor(prediction: number, lexerActionExecutor?: LexerActionExecutor) {\n\t\tthis._prediction = prediction;\n\t\tthis._lexerActionExecutor = lexerActionExecutor;\n\t}\n\n\t/**\n\t * Gets the prediction made by this accept state. Note that this value\n\t * assumes the predicates, if any, in the {@link DFAState} evaluate to\n\t * `true`. If predicate evaluation is enabled, the final prediction of\n\t * the accept state will be determined by the result of predicate\n\t * evaluation.\n\t */\n\tget prediction(): number {\n\t\treturn this._prediction;\n\t}\n\n\t/**\n\t * Gets the {@link LexerActionExecutor} which can be used to execute actions\n\t * and/or commands after the lexer matches a token.\n\t */\n\tget lexerActionExecutor(): LexerActionExecutor | undefined {\n\t\treturn this._lexerActionExecutor;\n\t}\n}\n"]}