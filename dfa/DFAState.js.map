{"version":3,"sources":["dfa/DFAState.js","../src/dfa/DFAState.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","ATN_1","require","BitSet_1","MurmurHash_1","Decorators_1","PredictionContext_1","assert","DFAState","configs","stateNumber","edges","Map","contextEdges","symbol","isContextSensitive","contextSymbols","get","set","atn","isOutermostConfigSet","BitSet","invokingState","PredictionContext","EMPTY_FULL_STATE_KEY","Error","map","existing","undefined","size","result","hash","MurmurHash","initialize","update","hashCode","finish","o","other","sameSet","equals","buf","isAcceptState","predicates","prediction","toString","_acceptStateInfo","acceptStateInfo","ATN","INVALID_ALT_NUMBER","lexerActionExecutor","NotNull","prototype","Override","PredPrediction","pred","alt"],"mappings":"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","file":"DFAState.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ATN_1 = require(\"../atn/ATN\");\nconst BitSet_1 = require(\"../misc/BitSet\");\nconst MurmurHash_1 = require(\"../misc/MurmurHash\");\nconst Decorators_1 = require(\"../Decorators\");\nconst PredictionContext_1 = require(\"../atn/PredictionContext\");\nconst assert = require(\"assert\");\n/** A DFA state represents a set of possible ATN configurations.\n *  As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n *  to keep track of all possible states the ATN can be in after\n *  reading each input symbol.  That is to say, after reading\n *  input a1a2..an, the DFA is in a state that represents the\n *  subset T of the states of the ATN that are reachable from the\n *  ATN's start state along some path labeled a1a2..an.\"\n *  In conventional NFA&rarr;DFA conversion, therefore, the subset T\n *  would be a bitset representing the set of states the\n *  ATN could be in.  We need to track the alt predicted by each\n *  state as well, however.  More importantly, we need to maintain\n *  a stack of states, tracking the closure operations as they\n *  jump from rule to rule, emulating rule invocations (method calls).\n *  I have to add a stack to simulate the proper lookahead sequences for\n *  the underlying LL grammar from which the ATN was derived.\n *\n *  I use a set of ATNConfig objects not simple states.  An ATNConfig\n *  is both a state (ala normal conversion) and a RuleContext describing\n *  the chain of rules (if any) followed to arrive at that state.\n *\n *  A DFA state may have multiple references to a particular state,\n *  but with different ATN contexts (with same or different alts)\n *  meaning that state was reached via a different set of rule invocations.\n */\nclass DFAState {\n    /**\n     * Constructs a new `DFAState`.\n     *\n     * @param configs The set of ATN configurations defining this state.\n     */\n    constructor(configs) {\n        this.stateNumber = -1;\n        this.configs = configs;\n        this.edges = new Map();\n        this.contextEdges = new Map();\n    }\n    get isContextSensitive() {\n        return !!this.contextSymbols;\n    }\n    isContextSymbol(symbol) {\n        if (!this.isContextSensitive) {\n            return false;\n        }\n        return this.contextSymbols.get(symbol);\n    }\n    setContextSymbol(symbol) {\n        assert(this.isContextSensitive);\n        this.contextSymbols.set(symbol);\n    }\n    setContextSensitive(atn) {\n        assert(!this.configs.isOutermostConfigSet);\n        if (this.isContextSensitive) {\n            return;\n        }\n        if (!this.contextSymbols) {\n            this.contextSymbols = new BitSet_1.BitSet();\n        }\n    }\n    get acceptStateInfo() {\n        return this._acceptStateInfo;\n    }\n    set acceptStateInfo(acceptStateInfo) {\n        this._acceptStateInfo = acceptStateInfo;\n    }\n    get isAcceptState() {\n        return !!this._acceptStateInfo;\n    }\n    get prediction() {\n        if (!this._acceptStateInfo) {\n            return ATN_1.ATN.INVALID_ALT_NUMBER;\n        }\n        return this._acceptStateInfo.prediction;\n    }\n    get lexerActionExecutor() {\n        if (!this._acceptStateInfo) {\n            return undefined;\n        }\n        return this._acceptStateInfo.lexerActionExecutor;\n    }\n    getTarget(symbol) {\n        return this.edges.get(symbol);\n    }\n    setTarget(symbol, target) {\n        this.edges.set(symbol, target);\n    }\n    getEdgeMap() {\n        return this.edges;\n    }\n    getContextTarget(invokingState) {\n        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n            invokingState = -1;\n        }\n        return this.contextEdges.get(invokingState);\n    }\n    setContextTarget(invokingState, target) {\n        if (!this.isContextSensitive) {\n            throw new Error(\"The state is not context sensitive.\");\n        }\n        if (invokingState === PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY) {\n            invokingState = -1;\n        }\n        this.contextEdges.set(invokingState, target);\n    }\n    getContextEdgeMap() {\n        let map = new Map(this.contextEdges);\n        let existing = map.get(-1);\n        if (existing !== undefined) {\n            if (map.size === 1) {\n                let result = new Map();\n                result.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n                return result;\n            }\n            else {\n                map.delete(-1);\n                map.set(PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n            }\n        }\n        return map;\n    }\n    hashCode() {\n        let hash = MurmurHash_1.MurmurHash.initialize(7);\n        hash = MurmurHash_1.MurmurHash.update(hash, this.configs.hashCode());\n        hash = MurmurHash_1.MurmurHash.finish(hash, 1);\n        return hash;\n    }\n    /**\n     * Two {@link DFAState} instances are equal if their ATN configuration sets\n     * are the same. This method is used to see if a state already exists.\n     *\n     * Because the number of alternatives and number of ATN configurations are\n     * finite, there is a finite number of DFA states that can be processed.\n     * This is necessary to show that the algorithm terminates.\n     *\n     * Cannot test the DFA state numbers here because in\n     * {@link ParserATNSimulator#addDFAState} we need to know if any other state\n     * exists that has this exact set of ATN configurations. The\n     * {@link #stateNumber} is irrelevant.\n     */\n    equals(o) {\n        // compare set of ATN configurations in this set with other\n        if (this === o) {\n            return true;\n        }\n        if (!(o instanceof DFAState)) {\n            return false;\n        }\n        let other = o;\n        let sameSet = this.configs.equals(other.configs);\n        //\t\tSystem.out.println(\"DFAState.equals: \"+configs+(sameSet?\"==\":\"!=\")+other.configs);\n        return sameSet;\n    }\n    toString() {\n        let buf = \"\";\n        buf += (this.stateNumber) + (\":\") + (this.configs);\n        if (this.isAcceptState) {\n            buf += (\"=>\");\n            if (this.predicates) {\n                buf += this.predicates;\n            }\n            else {\n                buf += (this.prediction);\n            }\n        }\n        return buf.toString();\n    }\n}\n__decorate([\n    Decorators_1.NotNull\n], DFAState.prototype, \"configs\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], DFAState.prototype, \"edges\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], DFAState.prototype, \"contextEdges\", void 0);\n__decorate([\n    Decorators_1.Override\n], DFAState.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], DFAState.prototype, \"equals\", null);\n__decorate([\n    Decorators_1.Override\n], DFAState.prototype, \"toString\", null);\nexports.DFAState = DFAState;\n(function (DFAState) {\n    /** Map a predicate to a predicted alternative. */\n    let PredPrediction = class PredPrediction {\n        constructor(pred, alt) {\n            this.alt = alt;\n            this.pred = pred;\n        }\n        toString() {\n            return \"(\" + this.pred + \", \" + this.alt + \")\";\n        }\n    };\n    __decorate([\n        Decorators_1.NotNull\n    ], PredPrediction.prototype, \"pred\", void 0);\n    __decorate([\n        Decorators_1.Override\n    ], PredPrediction.prototype, \"toString\", null);\n    PredPrediction = __decorate([\n        __param(0, Decorators_1.NotNull)\n    ], PredPrediction);\n    DFAState.PredPrediction = PredPrediction;\n})(DFAState = exports.DFAState || (exports.DFAState = {}));\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:38.7771056-07:00\n\nimport { AcceptStateInfo } from \"./AcceptStateInfo\";\nimport { ATN } from \"../atn/ATN\";\nimport { ATNConfigSet } from \"../atn/ATNConfigSet\";\nimport { BitSet } from \"../misc/BitSet\";\nimport { LexerActionExecutor } from \"../atn/LexerActionExecutor\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { PredictionContext } from \"../atn/PredictionContext\";\nimport { SemanticContext } from \"../atn/SemanticContext\";\n\nimport * as assert from \"assert\";\n\n/** A DFA state represents a set of possible ATN configurations.\n *  As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n *  to keep track of all possible states the ATN can be in after\n *  reading each input symbol.  That is to say, after reading\n *  input a1a2..an, the DFA is in a state that represents the\n *  subset T of the states of the ATN that are reachable from the\n *  ATN's start state along some path labeled a1a2..an.\"\n *  In conventional NFA&rarr;DFA conversion, therefore, the subset T\n *  would be a bitset representing the set of states the\n *  ATN could be in.  We need to track the alt predicted by each\n *  state as well, however.  More importantly, we need to maintain\n *  a stack of states, tracking the closure operations as they\n *  jump from rule to rule, emulating rule invocations (method calls).\n *  I have to add a stack to simulate the proper lookahead sequences for\n *  the underlying LL grammar from which the ATN was derived.\n *\n *  I use a set of ATNConfig objects not simple states.  An ATNConfig\n *  is both a state (ala normal conversion) and a RuleContext describing\n *  the chain of rules (if any) followed to arrive at that state.\n *\n *  A DFA state may have multiple references to a particular state,\n *  but with different ATN contexts (with same or different alts)\n *  meaning that state was reached via a different set of rule invocations.\n */\nexport class DFAState {\n\tpublic stateNumber: number = -1;\n\n\t@NotNull\n\tpublic configs: ATNConfigSet;\n\n\t/** `edges.get(symbol)` points to target of symbol.\n\t */\n\t@NotNull\n\tprivate readonly edges: Map<number, DFAState>;\n\n\tprivate _acceptStateInfo: AcceptStateInfo | undefined;\n\n\t/** These keys for these edges are the top level element of the global context. */\n\t@NotNull\n\tprivate readonly contextEdges: Map<number, DFAState>;\n\n\t/** Symbols in this set require a global context transition before matching an input symbol. */\n\tprivate contextSymbols: BitSet | undefined;\n\n\t/**\n\t * This list is computed by {@link ParserATNSimulator#predicateDFAState}.\n\t */\n\tpublic predicates: DFAState.PredPrediction[] | undefined;\n\n\t/**\n\t * Constructs a new `DFAState`.\n\t *\n\t * @param configs The set of ATN configurations defining this state.\n\t */\n\tconstructor(configs: ATNConfigSet) {\n\t\tthis.configs = configs;\n\t\tthis.edges = new Map<number, DFAState>();\n\t\tthis.contextEdges = new Map<number, DFAState>();\n\t}\n\n\tget isContextSensitive(): boolean {\n\t\treturn !!this.contextSymbols;\n\t}\n\n\tpublic isContextSymbol(symbol: number): boolean {\n\t\tif (!this.isContextSensitive) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.contextSymbols!.get(symbol);\n\t}\n\n\tpublic setContextSymbol(symbol: number): void {\n\t\tassert(this.isContextSensitive);\n\t\tthis.contextSymbols!.set(symbol);\n\t}\n\n\tpublic setContextSensitive(atn: ATN): void {\n\t\tassert(!this.configs.isOutermostConfigSet);\n\t\tif (this.isContextSensitive) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.contextSymbols) {\n\t\t\tthis.contextSymbols = new BitSet();\n\t\t}\n\t}\n\n\tget acceptStateInfo(): AcceptStateInfo | undefined {\n\t\treturn this._acceptStateInfo;\n\t}\n\n\tset acceptStateInfo(acceptStateInfo: AcceptStateInfo | undefined) {\n\t\tthis._acceptStateInfo = acceptStateInfo;\n\t}\n\n\tget isAcceptState(): boolean {\n\t\treturn !!this._acceptStateInfo;\n\t}\n\n\tget prediction(): number {\n\t\tif (!this._acceptStateInfo) {\n\t\t\treturn ATN.INVALID_ALT_NUMBER;\n\t\t}\n\n\t\treturn this._acceptStateInfo.prediction;\n\t}\n\n\tget lexerActionExecutor(): LexerActionExecutor | undefined {\n\t\tif (!this._acceptStateInfo) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this._acceptStateInfo.lexerActionExecutor;\n\t}\n\n\tpublic getTarget(symbol: number): DFAState | undefined {\n\t\treturn this.edges.get(symbol);\n\t}\n\n\tpublic setTarget(symbol: number, target: DFAState): void {\n\t\tthis.edges.set(symbol, target);\n\t}\n\n\tpublic getEdgeMap(): Map<number, DFAState> {\n\t\treturn this.edges;\n\t}\n\n\tpublic getContextTarget(invokingState: number): DFAState | undefined {\n\t\tif (invokingState === PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\tinvokingState = -1;\n\t\t}\n\n\t\treturn this.contextEdges.get(invokingState);\n\t}\n\n\tpublic setContextTarget(invokingState: number, target: DFAState): void {\n\t\tif (!this.isContextSensitive) {\n\t\t\tthrow new Error(\"The state is not context sensitive.\");\n\t\t}\n\n\t\tif (invokingState === PredictionContext.EMPTY_FULL_STATE_KEY) {\n\t\t\tinvokingState = -1;\n\t\t}\n\n\t\tthis.contextEdges.set(invokingState, target);\n\t}\n\n\tpublic getContextEdgeMap(): Map<number, DFAState> {\n\t\tlet map = new Map<number, DFAState>(this.contextEdges);\n\t\tlet existing = map.get(-1);\n\t\tif (existing !== undefined) {\n\t\t\tif (map.size === 1) {\n\t\t\t\tlet result = new Map<number, DFAState>();\n\t\t\t\tresult.set(PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmap.delete(-1);\n\t\t\t\tmap.set(PredictionContext.EMPTY_FULL_STATE_KEY, existing);\n\t\t\t}\n\t\t}\n\n\t\treturn map;\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize(7);\n\t\thash = MurmurHash.update(hash, this.configs.hashCode());\n\t\thash = MurmurHash.finish(hash, 1);\n\t\treturn hash;\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.\n\t *\n\t * Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator#addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link #stateNumber} is irrelevant.\n\t */\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\t// compare set of ATN configurations in this set with other\n\t\tif (this === o) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!(o instanceof DFAState)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet other: DFAState = o;\n\t\tlet sameSet: boolean = this.configs.equals(other.configs);\n//\t\tSystem.out.println(\"DFAState.equals: \"+configs+(sameSet?\"==\":\"!=\")+other.configs);\n\t\treturn sameSet;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tlet buf = \"\";\n\t\tbuf += (this.stateNumber) + (\":\") + (this.configs);\n\t\tif (this.isAcceptState) {\n\t\t\tbuf += (\"=>\");\n\t\t\tif (this.predicates) {\n\t\t\t\tbuf += this.predicates;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbuf += (this.prediction);\n\t\t\t}\n\t\t}\n\t\treturn buf.toString();\n\t}\n}\n\nexport namespace DFAState {\n\t/** Map a predicate to a predicted alternative. */\n\texport class PredPrediction {\n\t\t@NotNull\n\t\tpublic pred: SemanticContext;  // never null; at least SemanticContext.NONE\n\t\tpublic alt: number;\n\t\tconstructor(@NotNull pred: SemanticContext, alt: number) {\n\t\t\tthis.alt = alt;\n\t\t\tthis.pred = pred;\n\t\t}\n\n\t\t@Override\n\t\tpublic toString(): string {\n\t\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t\t}\n\t}\n}\n"]}