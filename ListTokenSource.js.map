{"version":3,"sources":["ListTokenSource.js","../src/ListTokenSource.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","CommonTokenFactory_1","require","Decorators_1","Token_1","ListTokenSource","tokens","sourceName","_factory","CommonTokenFactory","DEFAULT","Error","_sourceName","eofToken","start","previousStop","stopIndex","stop","Math","max","create","source","stream","inputStream","Token","EOF","DEFAULT_CHANNEL","line","charPositionInLine","t","type","lastToken","tokenText","text","lastNewLine","lastIndexOf","startIndex","charAt","undefined","factory","Override","prototype","NotNull"],"mappings":"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","file":"ListTokenSource.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CommonTokenFactory_1 = require(\"./CommonTokenFactory\");\nconst Decorators_1 = require(\"./Decorators\");\nconst Token_1 = require(\"./Token\");\n/**\n * Provides an implementation of {@link TokenSource} as a wrapper around a list\n * of {@link Token} objects.\n *\n * If the final token in the list is an {@link Token#EOF} token, it will be used\n * as the EOF token for every call to {@link #nextToken} after the end of the\n * list is reached. Otherwise, an EOF token will be created.\n */\nlet ListTokenSource = class ListTokenSource {\n    /**\n     * Constructs a new {@link ListTokenSource} instance from the specified\n     * collection of {@link Token} objects and source name.\n     *\n     * @param tokens The collection of {@link Token} objects to provide as a\n     * {@link TokenSource}.\n     * @param sourceName The name of the {@link TokenSource}. If this value is\n     * `undefined`, {@link #getSourceName} will attempt to infer the name from\n     * the next {@link Token} (or the previous token if the end of the input has\n     * been reached).\n     *\n     * @exception NullPointerException if `tokens` is `undefined`\n     */\n    constructor(tokens, sourceName) {\n        /**\n         * The index into {@link #tokens} of token to return by the next call to\n         * {@link #nextToken}. The end of the input is indicated by this value\n         * being greater than or equal to the number of items in {@link #tokens}.\n         */\n        this.i = 0;\n        /**\n         * This is the backing field for {@link #getTokenFactory} and\n         * {@link setTokenFactory}.\n         */\n        this._factory = CommonTokenFactory_1.CommonTokenFactory.DEFAULT;\n        if (tokens == null) {\n            throw new Error(\"tokens cannot be null\");\n        }\n        this.tokens = tokens;\n        this._sourceName = sourceName;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    get charPositionInLine() {\n        if (this.i < this.tokens.length) {\n            return this.tokens[this.i].charPositionInLine;\n        }\n        else if (this.eofToken != null) {\n            return this.eofToken.charPositionInLine;\n        }\n        else if (this.tokens.length > 0) {\n            // have to calculate the result from the line/column of the previous\n            // token, along with the text of the token.\n            let lastToken = this.tokens[this.tokens.length - 1];\n            let tokenText = lastToken.text;\n            if (tokenText != null) {\n                let lastNewLine = tokenText.lastIndexOf(\"\\n\");\n                if (lastNewLine >= 0) {\n                    return tokenText.length - lastNewLine - 1;\n                }\n            }\n            return lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;\n        }\n        // only reach this if tokens is empty, meaning EOF occurs at the first\n        // position in the input\n        return 0;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    nextToken() {\n        if (this.i >= this.tokens.length) {\n            if (this.eofToken == null) {\n                let start = -1;\n                if (this.tokens.length > 0) {\n                    let previousStop = this.tokens[this.tokens.length - 1].stopIndex;\n                    if (previousStop !== -1) {\n                        start = previousStop + 1;\n                    }\n                }\n                let stop = Math.max(-1, start - 1);\n                this.eofToken = this._factory.create({ source: this, stream: this.inputStream }, Token_1.Token.EOF, \"EOF\", Token_1.Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);\n            }\n            return this.eofToken;\n        }\n        let t = this.tokens[this.i];\n        if (this.i === this.tokens.length - 1 && t.type === Token_1.Token.EOF) {\n            this.eofToken = t;\n        }\n        this.i++;\n        return t;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    get line() {\n        if (this.i < this.tokens.length) {\n            return this.tokens[this.i].line;\n        }\n        else if (this.eofToken != null) {\n            return this.eofToken.line;\n        }\n        else if (this.tokens.length > 0) {\n            // have to calculate the result from the line/column of the previous\n            // token, along with the text of the token.\n            let lastToken = this.tokens[this.tokens.length - 1];\n            let line = lastToken.line;\n            let tokenText = lastToken.text;\n            if (tokenText != null) {\n                for (let i = 0; i < tokenText.length; i++) {\n                    if (tokenText.charAt(i) === \"\\n\") {\n                        line++;\n                    }\n                }\n            }\n            // if no text is available, assume the token did not contain any newline characters.\n            return line;\n        }\n        // only reach this if tokens is empty, meaning EOF occurs at the first\n        // position in the input\n        return 1;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    get inputStream() {\n        if (this.i < this.tokens.length) {\n            return this.tokens[this.i].inputStream;\n        }\n        else if (this.eofToken != null) {\n            return this.eofToken.inputStream;\n        }\n        else if (this.tokens.length > 0) {\n            return this.tokens[this.tokens.length - 1].inputStream;\n        }\n        // no input stream information is available\n        return undefined;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    get sourceName() {\n        if (this._sourceName) {\n            return this._sourceName;\n        }\n        let inputStream = this.inputStream;\n        if (inputStream != null) {\n            return inputStream.sourceName;\n        }\n        return \"List\";\n    }\n    /**\n     * {@inheritDoc}\n     */\n    // @Override\n    set tokenFactory(factory) {\n        this._factory = factory;\n    }\n    /**\n     * {@inheritDoc}\n     */\n    get tokenFactory() {\n        return this._factory;\n    }\n};\n__decorate([\n    Decorators_1.Override\n], ListTokenSource.prototype, \"charPositionInLine\", null);\n__decorate([\n    Decorators_1.Override\n], ListTokenSource.prototype, \"nextToken\", null);\n__decorate([\n    Decorators_1.Override\n], ListTokenSource.prototype, \"line\", null);\n__decorate([\n    Decorators_1.Override\n], ListTokenSource.prototype, \"inputStream\", null);\n__decorate([\n    Decorators_1.Override\n], ListTokenSource.prototype, \"sourceName\", null);\n__decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull,\n    __param(0, Decorators_1.NotNull)\n], ListTokenSource.prototype, \"tokenFactory\", null);\nListTokenSource = __decorate([\n    __param(0, Decorators_1.NotNull)\n], ListTokenSource);\nexports.ListTokenSource = ListTokenSource;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:52.1916955-07:00\n\nimport { CharStream } from \"./CharStream\";\nimport { CommonTokenFactory } from \"./CommonTokenFactory\";\nimport { NotNull, Override } from \"./Decorators\";\nimport { Token } from \"./Token\";\nimport { TokenFactory } from \"./TokenFactory\";\nimport { TokenSource } from \"./TokenSource\";\n\n/**\n * Provides an implementation of {@link TokenSource} as a wrapper around a list\n * of {@link Token} objects.\n *\n * If the final token in the list is an {@link Token#EOF} token, it will be used\n * as the EOF token for every call to {@link #nextToken} after the end of the\n * list is reached. Otherwise, an EOF token will be created.\n */\nexport class ListTokenSource implements TokenSource {\n\t/**\n\t * The wrapped collection of {@link Token} objects to return.\n\t */\n\tprotected tokens: Token[];\n\n\t/**\n\t * The name of the input source. If this value is `undefined`, a call to\n\t * {@link #getSourceName} should return the source name used to create the\n\t * the next token in {@link #tokens} (or the previous token if the end of\n\t * the input has been reached).\n\t */\n\tprivate _sourceName?: string;\n\n\t/**\n\t * The index into {@link #tokens} of token to return by the next call to\n\t * {@link #nextToken}. The end of the input is indicated by this value\n\t * being greater than or equal to the number of items in {@link #tokens}.\n\t */\n\tprotected i: number = 0;\n\n\t/**\n\t * This field caches the EOF token for the token source.\n\t */\n\tprotected eofToken?: Token;\n\n\t/**\n\t * This is the backing field for {@link #getTokenFactory} and\n\t * {@link setTokenFactory}.\n\t */\n\tprivate _factory: TokenFactory = CommonTokenFactory.DEFAULT;\n\n\t/**\n\t * Constructs a new {@link ListTokenSource} instance from the specified\n\t * collection of {@link Token} objects and source name.\n\t *\n\t * @param tokens The collection of {@link Token} objects to provide as a\n\t * {@link TokenSource}.\n\t * @param sourceName The name of the {@link TokenSource}. If this value is\n\t * `undefined`, {@link #getSourceName} will attempt to infer the name from\n\t * the next {@link Token} (or the previous token if the end of the input has\n\t * been reached).\n\t *\n\t * @exception NullPointerException if `tokens` is `undefined`\n\t */\n\tconstructor(@NotNull tokens: Token[], sourceName?: string) {\n\t\tif (tokens == null) {\n\t\t\tthrow new Error(\"tokens cannot be null\");\n\t\t}\n\n\t\tthis.tokens = tokens;\n\t\tthis._sourceName = sourceName;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tget charPositionInLine(): number {\n\t\tif (this.i < this.tokens.length) {\n\t\t\treturn this.tokens[this.i].charPositionInLine;\n\t\t} else if (this.eofToken != null) {\n\t\t\treturn this.eofToken.charPositionInLine;\n\t\t} else if (this.tokens.length > 0) {\n\t\t\t// have to calculate the result from the line/column of the previous\n\t\t\t// token, along with the text of the token.\n\t\t\tlet lastToken: Token = this.tokens[this.tokens.length - 1];\n\t\t\tlet tokenText: string | undefined = lastToken.text;\n\t\t\tif (tokenText != null) {\n\t\t\t\tlet lastNewLine: number = tokenText.lastIndexOf(\"\\n\");\n\t\t\t\tif (lastNewLine >= 0) {\n\t\t\t\t\treturn tokenText.length - lastNewLine - 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn lastToken.charPositionInLine + lastToken.stopIndex - lastToken.startIndex + 1;\n\t\t}\n\n\t\t// only reach this if tokens is empty, meaning EOF occurs at the first\n\t\t// position in the input\n\t\treturn 0;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tpublic nextToken(): Token {\n\t\tif (this.i >= this.tokens.length) {\n\t\t\tif (this.eofToken == null) {\n\t\t\t\tlet start: number = -1;\n\t\t\t\tif (this.tokens.length > 0) {\n\t\t\t\t\tlet previousStop: number = this.tokens[this.tokens.length - 1].stopIndex;\n\t\t\t\t\tif (previousStop !== -1) {\n\t\t\t\t\t\tstart = previousStop + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet stop: number = Math.max(-1, start - 1);\n\t\t\t\tthis.eofToken = this._factory.create({ source: this, stream: this.inputStream }, Token.EOF, \"EOF\", Token.DEFAULT_CHANNEL, start, stop, this.line, this.charPositionInLine);\n\t\t\t}\n\n\t\t\treturn this.eofToken;\n\t\t}\n\n\t\tlet t: Token = this.tokens[this.i];\n\t\tif (this.i === this.tokens.length - 1 && t.type === Token.EOF) {\n\t\t\tthis.eofToken = t;\n\t\t}\n\n\t\tthis.i++;\n\t\treturn t;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tget line(): number {\n\t\tif (this.i < this.tokens.length) {\n\t\t\treturn this.tokens[this.i].line;\n\t\t} else if (this.eofToken != null) {\n\t\t\treturn this.eofToken.line;\n\t\t} else if (this.tokens.length > 0) {\n\t\t\t// have to calculate the result from the line/column of the previous\n\t\t\t// token, along with the text of the token.\n\t\t\tlet lastToken: Token = this.tokens[this.tokens.length - 1];\n\t\t\tlet line: number = lastToken.line;\n\n\t\t\tlet tokenText: string | undefined = lastToken.text;\n\t\t\tif (tokenText != null) {\n\t\t\t\tfor (let i = 0; i < tokenText.length; i++) {\n\t\t\t\t\tif (tokenText.charAt(i) === \"\\n\") {\n\t\t\t\t\t\tline++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if no text is available, assume the token did not contain any newline characters.\n\t\t\treturn line;\n\t\t}\n\n\t\t// only reach this if tokens is empty, meaning EOF occurs at the first\n\t\t// position in the input\n\t\treturn 1;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tget inputStream(): CharStream | undefined {\n\t\tif (this.i < this.tokens.length) {\n\t\t\treturn this.tokens[this.i].inputStream;\n\t\t} else if (this.eofToken != null) {\n\t\t\treturn this.eofToken.inputStream;\n\t\t} else if (this.tokens.length > 0) {\n\t\t\treturn this.tokens[this.tokens.length - 1].inputStream;\n\t\t}\n\n\t\t// no input stream information is available\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\tget sourceName(): string {\n\t\tif (this._sourceName) {\n\t\t\treturn this._sourceName;\n\t\t}\n\n\t\tlet inputStream: CharStream | undefined = this.inputStream;\n\t\tif (inputStream != null) {\n\t\t\treturn inputStream.sourceName;\n\t\t}\n\n\t\treturn \"List\";\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t// @Override\n\tset tokenFactory(@NotNull factory: TokenFactory) {\n\t\tthis._factory = factory;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t */\n\t@Override\n\t@NotNull\n\tget tokenFactory(): TokenFactory {\n\t\treturn this._factory;\n\t}\n}\n"]}