{"version":3,"sources":["atn/LexerPopModeAction.js","../src/atn/LexerPopModeAction.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","MurmurHash_1","require","Decorators_1","LexerPopModeAction","lexer","popMode","hash","MurmurHash","initialize","update","actionType","finish","obj","Override","prototype","NotNull","INSTANCE"],"mappings":"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","file":"LexerPopModeAction.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MurmurHash_1 = require(\"../misc/MurmurHash\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * Implements the `popMode` lexer action by calling {@link Lexer#popMode}.\n *\n * The `popMode` command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link #INSTANCE}.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nclass LexerPopModeAction {\n    /**\n     * Constructs the singleton instance of the lexer `popMode` command.\n     */\n    constructor() {\n        // intentionally empty\n    }\n    /**\n     * {@inheritDoc}\n     * @returns This method returns {@link LexerActionType#POP_MODE}.\n     */\n    get actionType() {\n        return 4 /* POP_MODE */;\n    }\n    /**\n     * {@inheritDoc}\n     * @returns This method returns `false`.\n     */\n    get isPositionDependent() {\n        return false;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * This action is implemented by calling {@link Lexer#popMode}.\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n    hashCode() {\n        let hash = MurmurHash_1.MurmurHash.initialize();\n        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n        return MurmurHash_1.MurmurHash.finish(hash, 1);\n    }\n    equals(obj) {\n        return obj === this;\n    }\n    toString() {\n        return \"popMode\";\n    }\n}\n__decorate([\n    Decorators_1.Override\n], LexerPopModeAction.prototype, \"actionType\", null);\n__decorate([\n    Decorators_1.Override\n], LexerPopModeAction.prototype, \"isPositionDependent\", null);\n__decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n], LexerPopModeAction.prototype, \"execute\", null);\n__decorate([\n    Decorators_1.Override\n], LexerPopModeAction.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], LexerPopModeAction.prototype, \"equals\", null);\n__decorate([\n    Decorators_1.Override\n], LexerPopModeAction.prototype, \"toString\", null);\nexports.LexerPopModeAction = LexerPopModeAction;\n(function (LexerPopModeAction) {\n    /**\n     * Provides a singleton instance of this parameterless lexer action.\n     */\n    LexerPopModeAction.INSTANCE = new LexerPopModeAction();\n})(LexerPopModeAction = exports.LexerPopModeAction || (exports.LexerPopModeAction = {}));\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.0449220-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Implements the `popMode` lexer action by calling {@link Lexer#popMode}.\n *\n * The `popMode` command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link #INSTANCE}.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerPopModeAction implements LexerAction {\n\t/**\n\t * Constructs the singleton instance of the lexer `popMode` command.\n\t */\n\tconstructor() {\n\t\t// intentionally empty\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns {@link LexerActionType#POP_MODE}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.POP_MODE;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @returns This method returns `false`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This action is implemented by calling {@link Lexer#popMode}.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.popMode();\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\treturn MurmurHash.finish(hash, 1);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\treturn obj === this;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn \"popMode\";\n\t}\n}\n\nexport namespace LexerPopModeAction {\n\t/**\n\t * Provides a singleton instance of this parameterless lexer action.\n\t */\n\texport const INSTANCE: LexerPopModeAction = new LexerPopModeAction();\n}\n"]}