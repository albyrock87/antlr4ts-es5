{"version":3,"sources":["atn/LookaheadEventInfo.js","../src/atn/LookaheadEventInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","DecisionEventInfo_1","require","Decorators_1","LookaheadEventInfo","decision","state","predictedAlt","input","startIndex","stopIndex","fullCtx","DecisionEventInfo","NotNull"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,OAAO,GAAI,UAAQ,SAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACrE,SAAO,UAAUhB,MAAV,EAAkBC,GAAlB,EAAuB;AAAEe,IAAAA,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcc,UAAd,CAAT;AAAqC,GAArE;AACH,CAFD;;AAGAR,MAAM,CAACM,cAAP,CAAsBI,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCTA;;AAEA,IAAAC,mBAAA,GAAAC,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAAC,YAAA,GAAAD,OAAA,CAAA,eAAA,CAAA;AAIA;;;;;;;;AAMA,IAAaE,kBAAkB;AAAA;AAAA;AAAA;;AAQ9B;;;;;;;;;;;;;;;AAeA,8BACCC,QADD,EAECC,KAFD,EAGCC,YAHD,EAIUC,KAJV,EAKCC,UALD,EAMCC,SAND,EAOCC,OAPD,EAOiB;AAAA;;AAAA;AAEhB,8HAAMN,QAAN,EAAgBC,KAAhB,EAAuBE,KAAvB,EAA8BC,UAA9B,EAA0CC,SAA1C,EAAqDC,OAArD;AACA,UAAKJ,YAAL,GAAoBA,YAApB;AAHgB;AAIhB;;AAlC6B;AAAA,EAASN,mBAAA,CAAAW,iBAAT,CAA/B;;AAAaR,kBAAkB,GAAAxB,UAAA,CAAA,CA2B5BgB,OAAA,CAAA,CAAA,EAAAO,YAAA,CAAAU,OAAA,CA3B4B,CAAA,EAAlBT,kBAAkB,CAAlB;AAAAL,OAAA,CAAAK,kBAAA,GAAAA,kBAAA","file":"LookaheadEventInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00\nconst DecisionEventInfo_1 = require(\"./DecisionEventInfo\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This class represents profiling event information for tracking the lookahead\n * depth required in order to make a prediction.\n *\n * @since 4.3\n */\nlet LookaheadEventInfo = class LookaheadEventInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    /**\n     * Constructs a new instance of the {@link LookaheadEventInfo} class with\n     * the specified detailed lookahead information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state containing the necessary\n     * information to determine the result of a prediction, or `undefined` if\n     * the final state is not available\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the prediction was finally made\n     * @param fullCtx `true` if the current lookahead is part of an LL\n     * prediction; otherwise, `false` if the current lookahead is part of\n     * an SLL prediction\n     */\n    constructor(decision, state, predictedAlt, input, startIndex, stopIndex, fullCtx) {\n        super(decision, state, input, startIndex, stopIndex, fullCtx);\n        this.predictedAlt = predictedAlt;\n    }\n};\nLookaheadEventInfo = __decorate([\n    __param(3, Decorators_1.NotNull)\n], LookaheadEventInfo);\nexports.LookaheadEventInfo = LookaheadEventInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.6852565-07:00\n\nimport { DecisionEventInfo } from \"./DecisionEventInfo\";\nimport { NotNull } from \"../Decorators\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This class represents profiling event information for tracking the lookahead\n * depth required in order to make a prediction.\n *\n * @since 4.3\n */\nexport class LookaheadEventInfo extends DecisionEventInfo {\n\t/** The alternative chosen by adaptivePredict(), not necessarily\n\t *  the outermost alt shown for a rule; left-recursive rules have\n\t *  user-level alts that differ from the rewritten rule with a (...) block\n\t *  and a (..)* loop.\n\t */\n\tpublic predictedAlt: number;\n\n\t/**\n\t * Constructs a new instance of the {@link LookaheadEventInfo} class with\n\t * the specified detailed lookahead information.\n\t *\n\t * @param decision The decision number\n\t * @param state The final simulator state containing the necessary\n\t * information to determine the result of a prediction, or `undefined` if\n\t * the final state is not available\n\t * @param input The input token stream\n\t * @param startIndex The start index for the current prediction\n\t * @param stopIndex The index at which the prediction was finally made\n\t * @param fullCtx `true` if the current lookahead is part of an LL\n\t * prediction; otherwise, `false` if the current lookahead is part of\n\t * an SLL prediction\n\t */\n\tconstructor(\n\t\tdecision: number,\n\t\tstate: SimulatorState | undefined,\n\t\tpredictedAlt: number,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\tfullCtx: boolean) {\n\n\t\tsuper(decision, state, input, startIndex, stopIndex, fullCtx);\n\t\tthis.predictedAlt = predictedAlt;\n\t}\n}\n"]}