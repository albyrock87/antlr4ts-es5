{"version":3,"sources":["atn/DecisionEventInfo.js","../src/atn/DecisionEventInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","DecisionEventInfo","decision","state","input","startIndex","stopIndex","fullCtx","NotNull","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,OAAO,GAAI,UAAQ,SAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACrE,SAAO,UAAUhB,MAAV,EAAkBC,GAAlB,EAAuB;AAAEe,IAAAA,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcc,UAAd,CAAT;AAAqC,GAArE;AACH,CAFD;;AAGAR,MAAM,CAACM,cAAP,CAAsBI,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCTA;;AAEA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;AAIA;;;;;;;;;;;;;;;;;AAeA,IAAaC,iBAAiB,GAsC7B,2BACCC,QADD,EAECC,KAFD,EAGUC,KAHV,EAICC,UAJD,EAKCC,SALD,EAMCC,OAND,EAMiB;AAAA;AAEhB,OAAKL,QAAL,GAAgBA,QAAhB;AACA,OAAKK,OAAL,GAAeA,OAAf;AACA,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKF,KAAL,GAAaA,KAAb;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACA,OAAKF,KAAL,GAAaA,KAAb;AACA,CApDF;;AAmBCzB,UAAA,CAAA,CADCqB,YAAA,CAAAS,OACD,CAAA,EDDEP,iBAAiB,CAACQ,SCCpB,EDD+B,OCC/B,EDDwC,KAAK,CCC7C,CAAA;;AAnBYR,iBAAiB,GAAAvB,UAAA,CAAA,CAyC3BgB,OAAA,CAAA,CAAA,EAAAK,YAAA,CAAAS,OAAA,CAzC2B,CAAA,EAAjBP,iBAAiB,CAAjB;AAAAJ,OAAA,CAAAI,iBAAA,GAAAA,iBAAA","file":"DecisionEventInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This is the base class for gathering detailed information about prediction\n * events which occur during parsing.\n *\n * Note that we could record the parser call stack at the time this event\n * occurred but in the presence of left recursive rules, the stack is kind of\n * meaningless. It's better to look at the individual configurations for their\n * individual stacks. Of course that is a {@link PredictionContext} object\n * not a parse tree node and so it does not have information about the extent\n * (start...stop) of the various subtrees. Examining the stack tops of all\n * configurations provide the return states for the rule invocations.\n * From there you can get the enclosing rule.\n *\n * @since 4.3\n */\nlet DecisionEventInfo = class DecisionEventInfo {\n    constructor(decision, state, input, startIndex, stopIndex, fullCtx) {\n        this.decision = decision;\n        this.fullCtx = fullCtx;\n        this.stopIndex = stopIndex;\n        this.input = input;\n        this.startIndex = startIndex;\n        this.state = state;\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], DecisionEventInfo.prototype, \"input\", void 0);\nDecisionEventInfo = __decorate([\n    __param(2, Decorators_1.NotNull)\n], DecisionEventInfo);\nexports.DecisionEventInfo = DecisionEventInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:28.2401032-07:00\n\nimport { NotNull } from \"../Decorators\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This is the base class for gathering detailed information about prediction\n * events which occur during parsing.\n *\n * Note that we could record the parser call stack at the time this event\n * occurred but in the presence of left recursive rules, the stack is kind of\n * meaningless. It's better to look at the individual configurations for their\n * individual stacks. Of course that is a {@link PredictionContext} object\n * not a parse tree node and so it does not have information about the extent\n * (start...stop) of the various subtrees. Examining the stack tops of all\n * configurations provide the return states for the rule invocations.\n * From there you can get the enclosing rule.\n *\n * @since 4.3\n */\nexport class DecisionEventInfo {\n\t/**\n\t * The invoked decision number which this event is related to.\n\t *\n\t * @see ATN#decisionToState\n\t */\n\tpublic decision: number;\n\n\t/**\n\t * The simulator state containing additional information relevant to the\n\t * prediction state when the current event occurred, or `undefined` if no\n\t * additional information is relevant or available.\n\t */\n\tpublic state: SimulatorState | undefined;\n\n\t/**\n\t * The input token stream which is being parsed.\n\t */\n\t@NotNull\n\tpublic input: TokenStream;\n\n\t/**\n\t * The token index in the input stream at which the current prediction was\n\t * originally invoked.\n\t */\n\tpublic startIndex: number;\n\n\t/**\n\t * The token index in the input stream at which the current event occurred.\n\t */\n\tpublic stopIndex: number;\n\n\t/**\n\t * `true` if the current event occurred during LL prediction;\n\t * otherwise, `false` if the input occurred during SLL prediction.\n\t */\n\tpublic fullCtx: boolean;\n\n\tconstructor(\n\t\tdecision: number,\n\t\tstate: SimulatorState | undefined,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\tfullCtx: boolean) {\n\n\t\tthis.decision = decision;\n\t\tthis.fullCtx = fullCtx;\n\t\tthis.stopIndex = stopIndex;\n\t\tthis.input = input;\n\t\tthis.startIndex = startIndex;\n\t\tthis.state = state;\n\t}\n}\n"]}