{"version":3,"sources":["atn/OrderedATNConfigSet.js","../src/atn/OrderedATNConfigSet.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ATNConfigSet_1","require","Decorators_1","OrderedATNConfigSet","set","readonly","copy","isReadOnly","addAll","e","state","alt","hashCode","left","leftKey","right","equals","ATNConfigSet","Override","prototype"],"mappings":"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","file":"OrderedATNConfigSet.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ATNConfigSet_1 = require(\"./ATNConfigSet\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n *\n * @author Sam Harwell\n */\nclass OrderedATNConfigSet extends ATNConfigSet_1.ATNConfigSet {\n    constructor(set, readonly) {\n        if (set != null && readonly != null) {\n            super(set, readonly);\n        }\n        else {\n            super();\n        }\n    }\n    clone(readonly) {\n        let copy = new OrderedATNConfigSet(this, readonly);\n        if (!readonly && this.isReadOnly) {\n            copy.addAll(this);\n        }\n        return copy;\n    }\n    getKey(e) {\n        // This is a specially crafted key to ensure configurations are only merged if they are equal\n        return { state: 0, alt: e.hashCode() };\n    }\n    canMerge(left, leftKey, right) {\n        return left.equals(right);\n    }\n}\n__decorate([\n    Decorators_1.Override\n], OrderedATNConfigSet.prototype, \"clone\", null);\n__decorate([\n    Decorators_1.Override\n], OrderedATNConfigSet.prototype, \"getKey\", null);\n__decorate([\n    Decorators_1.Override\n], OrderedATNConfigSet.prototype, \"canMerge\", null);\nexports.OrderedATNConfigSet = OrderedATNConfigSet;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:30.9444556-07:00\n\nimport { ATNConfig } from \"./ATNConfig\";\nimport { ATNConfigSet } from \"./ATNConfigSet\";\nimport { Override } from \"../Decorators\";\n\n/**\n *\n * @author Sam Harwell\n */\nexport class OrderedATNConfigSet extends ATNConfigSet {\n\n\tconstructor();\n\tconstructor(set: ATNConfigSet, readonly: boolean);\n\tconstructor(set?: ATNConfigSet, readonly?: boolean) {\n\t\tif (set != null && readonly != null) {\n\t\t\tsuper(set, readonly);\n\t\t} else {\n\t\t\tsuper();\n\t\t}\n\t}\n\n\t@Override\n\tpublic clone(readonly: boolean): ATNConfigSet {\n\t\tlet copy: OrderedATNConfigSet = new OrderedATNConfigSet(this, readonly);\n\t\tif (!readonly && this.isReadOnly) {\n\t\t\tcopy.addAll(this);\n\t\t}\n\n\t\treturn copy;\n\t}\n\n\t@Override\n\tprotected getKey(e: ATNConfig): { state: number, alt: number } {\n\t\t// This is a specially crafted key to ensure configurations are only merged if they are equal\n\t\treturn { state: 0, alt: e.hashCode() };\n\t}\n\n\t@Override\n\tprotected canMerge(left: ATNConfig, leftKey: { state: number, alt: number }, right: ATNConfig): boolean {\n\t\treturn left.equals(right);\n\t}\n\n}\n"]}