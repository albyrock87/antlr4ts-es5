{"version":3,"sources":["atn/PredicateEvalInfo.js","../src/atn/PredicateEvalInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","DecisionEventInfo_1","require","Decorators_1","PredicateEvalInfo","state","decision","input","startIndex","stopIndex","semctx","evalResult","predictedAlt","useContext","DecisionEventInfo","NotNull"],"mappings":"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","file":"PredicateEvalInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00\nconst DecisionEventInfo_1 = require(\"./DecisionEventInfo\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This class represents profiling event information for semantic predicate\n * evaluations which occur during prediction.\n *\n * @see ParserATNSimulator#evalSemanticContext\n *\n * @since 4.3\n */\nlet PredicateEvalInfo = class PredicateEvalInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    /**\n     * Constructs a new instance of the {@link PredicateEvalInfo} class with the\n     * specified detailed predicate evaluation information.\n     *\n     * @param state The simulator state\n     * @param decision The decision number\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the predicate evaluation was\n     * triggered. Note that the input stream may be reset to other positions for\n     * the actual evaluation of individual predicates.\n     * @param semctx The semantic context which was evaluated\n     * @param evalResult The results of evaluating the semantic context\n     * @param predictedAlt The alternative number for the decision which is\n     * guarded by the semantic context `semctx`. See {@link #predictedAlt}\n     * for more information.\n     *\n     * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)\n     * @see SemanticContext#eval(Recognizer, RuleContext)\n     */\n    constructor(state, decision, input, startIndex, stopIndex, semctx, evalResult, predictedAlt) {\n        super(decision, state, input, startIndex, stopIndex, state.useContext);\n        this.semctx = semctx;\n        this.evalResult = evalResult;\n        this.predictedAlt = predictedAlt;\n    }\n};\nPredicateEvalInfo = __decorate([\n    __param(0, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(5, Decorators_1.NotNull)\n], PredicateEvalInfo);\nexports.PredicateEvalInfo = PredicateEvalInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.1914305-07:00\n\nimport { DecisionEventInfo } from \"./DecisionEventInfo\";\nimport { NotNull } from \"../Decorators\";\nimport { SemanticContext } from \"./SemanticContext\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This class represents profiling event information for semantic predicate\n * evaluations which occur during prediction.\n *\n * @see ParserATNSimulator#evalSemanticContext\n *\n * @since 4.3\n */\nexport class PredicateEvalInfo extends DecisionEventInfo {\n\t/**\n\t * The semantic context which was evaluated.\n\t */\n\tpublic semctx: SemanticContext;\n\t/**\n\t * The alternative number for the decision which is guarded by the semantic\n\t * context {@link #semctx}. Note that other ATN\n\t * configurations may predict the same alternative which are guarded by\n\t * other semantic contexts and/or {@link SemanticContext#NONE}.\n\t */\n\tpublic predictedAlt: number;\n\t/**\n\t * The result of evaluating the semantic context {@link #semctx}.\n\t */\n\tpublic evalResult: boolean;\n\n\t/**\n\t * Constructs a new instance of the {@link PredicateEvalInfo} class with the\n\t * specified detailed predicate evaluation information.\n\t *\n\t * @param state The simulator state\n\t * @param decision The decision number\n\t * @param input The input token stream\n\t * @param startIndex The start index for the current prediction\n\t * @param stopIndex The index at which the predicate evaluation was\n\t * triggered. Note that the input stream may be reset to other positions for\n\t * the actual evaluation of individual predicates.\n\t * @param semctx The semantic context which was evaluated\n\t * @param evalResult The results of evaluating the semantic context\n\t * @param predictedAlt The alternative number for the decision which is\n\t * guarded by the semantic context `semctx`. See {@link #predictedAlt}\n\t * for more information.\n\t *\n\t * @see ParserATNSimulator#evalSemanticContext(SemanticContext, ParserRuleContext, int)\n\t * @see SemanticContext#eval(Recognizer, RuleContext)\n\t */\n\tconstructor(\n\t\t@NotNull state: SimulatorState,\n\t\tdecision: number,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\t@NotNull semctx: SemanticContext,\n\t\tevalResult: boolean,\n\t\tpredictedAlt: number) {\n\n\t\tsuper(decision, state, input, startIndex, stopIndex, state.useContext);\n\t\tthis.semctx = semctx;\n\t\tthis.evalResult = evalResult;\n\t\tthis.predictedAlt = predictedAlt;\n\t}\n}\n"]}