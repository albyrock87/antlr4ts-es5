{"version":3,"sources":["atn/PrecedencePredicateTransition.js","../src/atn/PrecedencePredicateTransition.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","AbstractPredicateTransition_1","require","Decorators_1","SemanticContext_1","PrecedencePredicateTransition","precedence","symbol","minVocabSymbol","maxVocabSymbol","SemanticContext","PrecedencePredicate","AbstractPredicateTransition","Override","prototype","NotNull"],"mappings":"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","file":"PrecedencePredicateTransition.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00\nconst AbstractPredicateTransition_1 = require(\"./AbstractPredicateTransition\");\nconst Decorators_1 = require(\"../Decorators\");\nconst SemanticContext_1 = require(\"./SemanticContext\");\n/**\n *\n * @author Sam Harwell\n */\nlet PrecedencePredicateTransition = class PrecedencePredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {\n    constructor(target, precedence) {\n        super(target);\n        this.precedence = precedence;\n    }\n    get serializationType() {\n        return 10 /* PRECEDENCE */;\n    }\n    get isEpsilon() {\n        return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n    get predicate() {\n        return new SemanticContext_1.SemanticContext.PrecedencePredicate(this.precedence);\n    }\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n};\n__decorate([\n    Decorators_1.Override\n], PrecedencePredicateTransition.prototype, \"serializationType\", null);\n__decorate([\n    Decorators_1.Override\n], PrecedencePredicateTransition.prototype, \"isEpsilon\", null);\n__decorate([\n    Decorators_1.Override\n], PrecedencePredicateTransition.prototype, \"matches\", null);\n__decorate([\n    Decorators_1.Override\n], PrecedencePredicateTransition.prototype, \"toString\", null);\nPrecedencePredicateTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n], PrecedencePredicateTransition);\nexports.PrecedencePredicateTransition = PrecedencePredicateTransition;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.0994191-07:00\n\nimport { AbstractPredicateTransition } from \"./AbstractPredicateTransition\";\nimport { ATNState } from \"./ATNState\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { SemanticContext } from \"./SemanticContext\";\nimport { TransitionType } from \"./TransitionType\";\n\n/**\n *\n * @author Sam Harwell\n */\nexport class PrecedencePredicateTransition extends AbstractPredicateTransition {\n\tpublic precedence: number;\n\n\tconstructor( @NotNull target: ATNState, precedence: number) {\n\t\tsuper(target);\n\t\tthis.precedence = precedence;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.PRECEDENCE;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n\n\tget predicate(): SemanticContext.PrecedencePredicate {\n\t\treturn new SemanticContext.PrecedencePredicate(this.precedence);\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\treturn this.precedence + \" >= _p\";\n\t}\n}\n"]}