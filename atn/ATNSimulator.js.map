{"version":3,"sources":["atn/ATNSimulator.js","../src/atn/ATNSimulator.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","ATNConfigSet_1","require","DFAState_1","Decorators_1","PredictionContext_1","ATNSimulator","atn","clearDFA","_ERROR","DFAState","ATNConfigSet","stateNumber","PredictionContext","EMPTY_FULL_STATE_KEY","NotNull","prototype","RULE_VARIANT_DELIMITER","RULE_LF_VARIANT_MARKER","RULE_NOLF_VARIANT_MARKER"],"mappings":"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","file":"ATNSimulator.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ATNConfigSet_1 = require(\"./ATNConfigSet\");\nconst DFAState_1 = require(\"../dfa/DFAState\");\nconst Decorators_1 = require(\"../Decorators\");\nconst PredictionContext_1 = require(\"./PredictionContext\");\nlet ATNSimulator = class ATNSimulator {\n    constructor(atn) {\n        this.atn = atn;\n    }\n    static get ERROR() {\n        if (!ATNSimulator._ERROR) {\n            ATNSimulator._ERROR = new DFAState_1.DFAState(new ATNConfigSet_1.ATNConfigSet());\n            ATNSimulator._ERROR.stateNumber = PredictionContext_1.PredictionContext.EMPTY_FULL_STATE_KEY;\n        }\n        return ATNSimulator._ERROR;\n    }\n    /**\n     * Clear the DFA cache used by the current instance. Since the DFA cache may\n     * be shared by multiple ATN simulators, this method may affect the\n     * performance (but not accuracy) of other parsers which are being used\n     * concurrently.\n     *\n     * @ if the current instance does not\n     * support clearing the DFA.\n     *\n     * @since 4.3\n     */\n    clearDFA() {\n        this.atn.clearDFA();\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], ATNSimulator.prototype, \"atn\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], ATNSimulator, \"ERROR\", null);\nATNSimulator = __decorate([\n    __param(0, Decorators_1.NotNull)\n], ATNSimulator);\nexports.ATNSimulator = ATNSimulator;\n(function (ATNSimulator) {\n    const RULE_VARIANT_DELIMITER = \"$\";\n    const RULE_LF_VARIANT_MARKER = \"$lf$\";\n    const RULE_NOLF_VARIANT_MARKER = \"$nolf$\";\n})(ATNSimulator = exports.ATNSimulator || (exports.ATNSimulator = {}));\nexports.ATNSimulator = ATNSimulator;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:27.3184311-07:00\n\nimport { ATN } from \"./ATN\";\nimport { ATNConfigSet } from \"./ATNConfigSet\";\nimport { DFAState } from \"../dfa/DFAState\";\nimport { NotNull } from \"../Decorators\";\nimport { PredictionContext } from \"./PredictionContext\";\n\nexport abstract class ATNSimulator {\n\t/** Must distinguish between missing edge and edge we know leads nowhere */\n\tprivate static _ERROR: DFAState;\n\t@NotNull\n\tstatic get ERROR(): DFAState {\n\t\tif (!ATNSimulator._ERROR) {\n\t\t\tATNSimulator._ERROR = new DFAState(new ATNConfigSet());\n\t\t\tATNSimulator._ERROR.stateNumber = PredictionContext.EMPTY_FULL_STATE_KEY;\n\t\t}\n\n\t\treturn ATNSimulator._ERROR;\n\t}\n\n\t@NotNull\n\tpublic atn: ATN;\n\n\tconstructor(@NotNull atn: ATN) {\n\t\tthis.atn = atn;\n\t}\n\n\tpublic abstract reset(): void;\n\n\t/**\n\t * Clear the DFA cache used by the current instance. Since the DFA cache may\n\t * be shared by multiple ATN simulators, this method may affect the\n\t * performance (but not accuracy) of other parsers which are being used\n\t * concurrently.\n\t *\n\t * @ if the current instance does not\n\t * support clearing the DFA.\n\t *\n\t * @since 4.3\n\t */\n\tpublic clearDFA(): void {\n\t\tthis.atn.clearDFA();\n\t}\n}\n\nexport namespace ATNSimulator {\n\tconst RULE_VARIANT_DELIMITER: string = \"$\";\n\tconst RULE_LF_VARIANT_MARKER: string = \"$lf$\";\n\tconst RULE_NOLF_VARIANT_MARKER: string = \"$nolf$\";\n}\n"]}