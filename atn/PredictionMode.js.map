{"version":3,"sources":["atn/PredictionMode.js","../src/atn/PredictionMode.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Array2DHashMap_1","require","MurmurHash_1","Decorators_1","RuleStopState_1","PredictionMode","AltAndContextMap","AltAndContextConfigEqualityComparator","INSTANCE","Array2DHashMap","o","hashCode","MurmurHash","initialize","update","state","stateNumber","context","finish","a","b","equals","Override","prototype","hasConfigInRuleStopState","configs","RuleStopState","allConfigsInRuleStopStates","config"],"mappings":"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","file":"PredictionMode.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:36.2673893-07:00\nconst Array2DHashMap_1 = require(\"../misc/Array2DHashMap\");\nconst MurmurHash_1 = require(\"../misc/MurmurHash\");\nconst Decorators_1 = require(\"../Decorators\");\nconst RuleStopState_1 = require(\"./RuleStopState\");\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nvar PredictionMode;\n(function (PredictionMode) {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link #LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link #SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link #LL} prediction abilities to complete successfully.\n     *\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.\n     */\n    PredictionMode[PredictionMode[\"SLL\"] = 0] = \"SLL\";\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for *exactly which* alternatives are\n     * ambiguous.\n     *\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.\n     */\n    PredictionMode[PredictionMode[\"LL\"] = 1] = \"LL\";\n    /**\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link #LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.\n     *\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.\n     */\n    PredictionMode[PredictionMode[\"LL_EXACT_AMBIG_DETECTION\"] = 2] = \"LL_EXACT_AMBIG_DETECTION\";\n})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));\n(function (PredictionMode) {\n    /** A Map that uses just the state and the stack context as the key. */\n    // NOTE: Base type used to be FlexibleHashMap<ATNConfig, BitSet>\n    class AltAndContextMap extends Array2DHashMap_1.Array2DHashMap {\n        constructor() {\n            super(AltAndContextConfigEqualityComparator.INSTANCE);\n        }\n    }\n    class AltAndContextConfigEqualityComparator {\n        AltAndContextConfigEqualityComparator() {\n            // intentionally empty\n        }\n        /**\n         * The hash code is only a function of the {@link ATNState#stateNumber}\n         * and {@link ATNConfig#context}.\n         */\n        hashCode(o) {\n            let hashCode = MurmurHash_1.MurmurHash.initialize(7);\n            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.state.stateNumber);\n            hashCode = MurmurHash_1.MurmurHash.update(hashCode, o.context);\n            hashCode = MurmurHash_1.MurmurHash.finish(hashCode, 2);\n            return hashCode;\n        }\n        equals(a, b) {\n            if (a === b) {\n                return true;\n            }\n            if (a == null || b == null) {\n                return false;\n            }\n            return a.state.stateNumber === b.state.stateNumber\n                && a.context.equals(b.context);\n        }\n    }\n    AltAndContextConfigEqualityComparator.INSTANCE = new AltAndContextConfigEqualityComparator();\n    __decorate([\n        Decorators_1.Override\n    ], AltAndContextConfigEqualityComparator.prototype, \"hashCode\", null);\n    __decorate([\n        Decorators_1.Override\n    ], AltAndContextConfigEqualityComparator.prototype, \"equals\", null);\n    /**\n     * Checks if any configuration in `configs` is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @returns `true` if any configuration in `configs` is in a\n     * {@link RuleStopState}, otherwise `false`\n     */\n    function hasConfigInRuleStopState(configs) {\n        for (let c of configs) {\n            if (c.state instanceof RuleStopState_1.RuleStopState) {\n                return true;\n            }\n        }\n        return false;\n    }\n    PredictionMode.hasConfigInRuleStopState = hasConfigInRuleStopState;\n    /**\n     * Checks if all configurations in `configs` are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @returns `true` if all configurations in `configs` are in a\n     * {@link RuleStopState}, otherwise `false`\n     */\n    function allConfigsInRuleStopStates(/*@NotNull*/ configs) {\n        for (let config of configs) {\n            if (!(config.state instanceof RuleStopState_1.RuleStopState)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    PredictionMode.allConfigsInRuleStopStates = allConfigsInRuleStopStates;\n})(PredictionMode = exports.PredictionMode || (exports.PredictionMode = {}));\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:36.2673893-07:00\n\nimport { Array2DHashMap } from \"../misc/Array2DHashMap\";\nimport { ATN } from \"./ATN\";\nimport { ATNConfig } from \"./ATNConfig\";\nimport { ATNConfigSet } from \"./ATNConfigSet\";\nimport { ATNState } from \"./ATNState\";\nimport { BitSet } from \"../misc/BitSet\";\nimport { EqualityComparator } from \"../misc/EqualityComparator\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { ObjectEqualityComparator } from \"../misc/ObjectEqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { RuleStopState } from \"./RuleStopState\";\nimport { SemanticContext } from \"./SemanticContext\";\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nexport enum PredictionMode {\n\t/**\n\t * The SLL(*) prediction mode. This prediction mode ignores the current\n\t * parser context when making predictions. This is the fastest prediction\n\t * mode, and provides correct results for many grammars. This prediction\n\t * mode is more powerful than the prediction mode provided by ANTLR 3, but\n\t * may result in syntax errors for grammar and input combinations which are\n\t * not SLL.\n\t *\n\t * When using this prediction mode, the parser will either return a correct\n\t * parse tree (i.e. the same parse tree that would be returned with the\n\t * {@link #LL} prediction mode), or it will report a syntax error. If a\n\t * syntax error is encountered when using the {@link #SLL} prediction mode,\n\t * it may be due to either an actual syntax error in the input or indicate\n\t * that the particular combination of grammar and input requires the more\n\t * powerful {@link #LL} prediction abilities to complete successfully.\n\t *\n\t * This prediction mode does not provide any guarantees for prediction\n\t * behavior for syntactically-incorrect inputs.\n\t */\n\tSLL,\n\t/**\n\t * The LL(*) prediction mode. This prediction mode allows the current parser\n\t * context to be used for resolving SLL conflicts that occur during\n\t * prediction. This is the fastest prediction mode that guarantees correct\n\t * parse results for all combinations of grammars with syntactically correct\n\t * inputs.\n\t *\n\t * When using this prediction mode, the parser will make correct decisions\n\t * for all syntactically-correct grammar and input combinations. However, in\n\t * cases where the grammar is truly ambiguous this prediction mode might not\n\t * report a precise answer for *exactly which* alternatives are\n\t * ambiguous.\n\t *\n\t * This prediction mode does not provide any guarantees for prediction\n\t * behavior for syntactically-incorrect inputs.\n\t */\n\tLL,\n\t/**\n\t * The LL(*) prediction mode with exact ambiguity detection. In addition to\n\t * the correctness guarantees provided by the {@link #LL} prediction mode,\n\t * this prediction mode instructs the prediction algorithm to determine the\n\t * complete and exact set of ambiguous alternatives for every ambiguous\n\t * decision encountered while parsing.\n\t *\n\t * This prediction mode may be used for diagnosing ambiguities during\n\t * grammar development. Due to the performance overhead of calculating sets\n\t * of ambiguous alternatives, this prediction mode should be avoided when\n\t * the exact results are not necessary.\n\t *\n\t * This prediction mode does not provide any guarantees for prediction\n\t * behavior for syntactically-incorrect inputs.\n\t */\n\tLL_EXACT_AMBIG_DETECTION,\n}\n\nexport namespace PredictionMode {\n\t/** A Map that uses just the state and the stack context as the key. */\n\t// NOTE: Base type used to be FlexibleHashMap<ATNConfig, BitSet>\n\tclass AltAndContextMap extends Array2DHashMap<ATNConfig, BitSet> {\n\t\tconstructor() {\n\t\t\tsuper(AltAndContextConfigEqualityComparator.INSTANCE);\n\t\t}\n\t}\n\n\tclass AltAndContextConfigEqualityComparator implements EqualityComparator<ATNConfig> {\n\t\tpublic static readonly INSTANCE: AltAndContextConfigEqualityComparator = new AltAndContextConfigEqualityComparator();\n\n\t\tprivate AltAndContextConfigEqualityComparator() {\n\t\t\t// intentionally empty\n\t\t}\n\n\t\t/**\n\t\t * The hash code is only a function of the {@link ATNState#stateNumber}\n\t\t * and {@link ATNConfig#context}.\n\t\t */\n\t\t@Override\n\t\tpublic hashCode(o: ATNConfig): number {\n\t\t\tlet hashCode: number = MurmurHash.initialize(7);\n\t\t\thashCode = MurmurHash.update(hashCode, o.state.stateNumber);\n\t\t\thashCode = MurmurHash.update(hashCode, o.context);\n\t\t\thashCode = MurmurHash.finish(hashCode, 2);\n\t\t\treturn hashCode;\n\t\t}\n\n\t\t@Override\n\t\tpublic equals(a: ATNConfig, b: ATNConfig): boolean {\n\t\t\tif (a === b) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (a == null || b == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn a.state.stateNumber === b.state.stateNumber\n\t\t\t\t&& a.context.equals(b.context);\n\t\t}\n\t}\n\n\t/**\n\t * Checks if any configuration in `configs` is in a\n\t * {@link RuleStopState}. Configurations meeting this condition have reached\n\t * the end of the decision rule (local context) or end of start rule (full\n\t * context).\n\t *\n\t * @param configs the configuration set to test\n\t * @returns `true` if any configuration in `configs` is in a\n\t * {@link RuleStopState}, otherwise `false`\n\t */\n\texport function hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\n\t\tfor (let c of configs) {\n\t\t\tif (c.state instanceof RuleStopState) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all configurations in `configs` are in a\n\t * {@link RuleStopState}. Configurations meeting this condition have reached\n\t * the end of the decision rule (local context) or end of start rule (full\n\t * context).\n\t *\n\t * @param configs the configuration set to test\n\t * @returns `true` if all configurations in `configs` are in a\n\t * {@link RuleStopState}, otherwise `false`\n\t */\n\texport function allConfigsInRuleStopStates(/*@NotNull*/ configs: ATNConfigSet): boolean {\n\t\tfor (let config of configs) {\n\t\t\tif (!(config.state instanceof RuleStopState)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n"]}