{"version":3,"sources":["atn/AmbiguityInfo.js","../src/atn/AmbiguityInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","DecisionEventInfo_1","require","Decorators_1","AmbiguityInfo","decision","state","ambigAlts","input","startIndex","stopIndex","useContext","DecisionEventInfo","NotNull","prototype"],"mappings":"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","file":"AmbiguityInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DecisionEventInfo_1 = require(\"./DecisionEventInfo\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This class represents profiling event information for an ambiguity.\n * Ambiguities are decisions where a particular input resulted in an SLL\n * conflict, followed by LL prediction also reaching a conflict state\n * (indicating a true ambiguity in the grammar).\n *\n * This event may be reported during SLL prediction in cases where the\n * conflicting SLL configuration set provides sufficient information to\n * determine that the SLL conflict is truly an ambiguity. For example, if none\n * of the ATN configurations in the conflicting SLL configuration set have\n * traversed a global follow transition (i.e.\n * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all\n * configurations), then the result of SLL prediction for that input is known to\n * be equivalent to the result of LL prediction for that input.\n *\n * In some cases, the minimum represented alternative in the conflicting LL\n * configuration set is not equal to the minimum represented alternative in the\n * conflicting SLL configuration set. Grammars and inputs which result in this\n * scenario are unable to use {@link PredictionMode#SLL}, which in turn means\n * they cannot use the two-stage parsing strategy to improve parsing performance\n * for that input.\n *\n * @see ParserATNSimulator#reportAmbiguity\n * @see ParserErrorListener#reportAmbiguity\n *\n * @since 4.3\n */\nlet AmbiguityInfo = class AmbiguityInfo extends DecisionEventInfo_1.DecisionEventInfo {\n    /**\n     * Constructs a new instance of the {@link AmbiguityInfo} class with the\n     * specified detailed ambiguity information.\n     *\n     * @param decision The decision number\n     * @param state The final simulator state identifying the ambiguous\n     * alternatives for the current input\n     * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.\n     *                  The predicted alt is the min(ambigAlts)\n     * @param input The input token stream\n     * @param startIndex The start index for the current prediction\n     * @param stopIndex The index at which the ambiguity was identified during\n     * prediction\n     */\n    constructor(decision, state, ambigAlts, input, startIndex, stopIndex) {\n        super(decision, state, input, startIndex, stopIndex, state.useContext);\n        this.ambigAlts = ambigAlts;\n    }\n    /**\n     * Gets the set of alternatives in the decision that lead to a valid parse.\n     *\n     * @since 4.5\n     */\n    get ambiguousAlternatives() {\n        return this.ambigAlts;\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], AmbiguityInfo.prototype, \"ambigAlts\", void 0);\n__decorate([\n    Decorators_1.NotNull\n], AmbiguityInfo.prototype, \"ambiguousAlternatives\", null);\nAmbiguityInfo = __decorate([\n    __param(1, Decorators_1.NotNull),\n    __param(2, Decorators_1.NotNull),\n    __param(3, Decorators_1.NotNull)\n], AmbiguityInfo);\nexports.AmbiguityInfo = AmbiguityInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:24.8229279-07:00\n\nimport { BitSet } from \"../misc/BitSet\";\nimport { DecisionEventInfo } from \"./DecisionEventInfo\";\nimport { NotNull } from \"../Decorators\";\nimport { SimulatorState } from \"./SimulatorState\";\nimport { TokenStream } from \"../TokenStream\";\n\n/**\n * This class represents profiling event information for an ambiguity.\n * Ambiguities are decisions where a particular input resulted in an SLL\n * conflict, followed by LL prediction also reaching a conflict state\n * (indicating a true ambiguity in the grammar).\n *\n * This event may be reported during SLL prediction in cases where the\n * conflicting SLL configuration set provides sufficient information to\n * determine that the SLL conflict is truly an ambiguity. For example, if none\n * of the ATN configurations in the conflicting SLL configuration set have\n * traversed a global follow transition (i.e.\n * {@link ATNConfig#getReachesIntoOuterContext} is `false` for all\n * configurations), then the result of SLL prediction for that input is known to\n * be equivalent to the result of LL prediction for that input.\n *\n * In some cases, the minimum represented alternative in the conflicting LL\n * configuration set is not equal to the minimum represented alternative in the\n * conflicting SLL configuration set. Grammars and inputs which result in this\n * scenario are unable to use {@link PredictionMode#SLL}, which in turn means\n * they cannot use the two-stage parsing strategy to improve parsing performance\n * for that input.\n *\n * @see ParserATNSimulator#reportAmbiguity\n * @see ParserErrorListener#reportAmbiguity\n *\n * @since 4.3\n */\nexport class AmbiguityInfo extends DecisionEventInfo {\n\t/** The set of alternative numbers for this decision event that lead to a valid parse. */\n\t@NotNull\n\tprivate ambigAlts: BitSet;\n\n\t/**\n\t * Constructs a new instance of the {@link AmbiguityInfo} class with the\n\t * specified detailed ambiguity information.\n\t *\n\t * @param decision The decision number\n\t * @param state The final simulator state identifying the ambiguous\n\t * alternatives for the current input\n\t * @param ambigAlts The set of alternatives in the decision that lead to a valid parse.\n\t *                  The predicted alt is the min(ambigAlts)\n\t * @param input The input token stream\n\t * @param startIndex The start index for the current prediction\n\t * @param stopIndex The index at which the ambiguity was identified during\n\t * prediction\n\t */\n\tconstructor(\n\t\tdecision: number,\n\t\t@NotNull state: SimulatorState,\n\t\t@NotNull ambigAlts: BitSet,\n\t\t@NotNull input: TokenStream,\n\t\tstartIndex: number,\n\t\tstopIndex: number) {\n\t\tsuper(decision, state, input, startIndex, stopIndex, state.useContext);\n\t\tthis.ambigAlts = ambigAlts;\n\t}\n\n\t/**\n\t * Gets the set of alternatives in the decision that lead to a valid parse.\n\t *\n\t * @since 4.5\n\t */\n\t@NotNull\n\tget ambiguousAlternatives(): BitSet {\n\t\treturn this.ambigAlts;\n\t}\n}\n"]}