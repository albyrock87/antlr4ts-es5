{"version":3,"sources":["atn/RuleStopState.js","../src/atn/RuleStopState.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ATNState_1","require","ATNStateType_1","Decorators_1","RuleStopState","ATNStateType","RULE_STOP","ATNState","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,UAAA,GAAAC,OAAA,CAAA,YAAA,CAAA;;AACA,IAAAC,cAAA,GAAAD,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAAE,YAAA,GAAAF,OAAA,CAAA,eAAA,CAAA;AAEA;;;;;;;IAKAG,a;;;;;;;;;;;;wBAGuB;AACrB,aAAO,CAAC,CAAR;AACA;;;wBAGY;AACZ,aAAOF,cAAA,CAAAG,YAAA,CAAaC,SAApB;AACA;;;EAViCN,UAAA,CAAAO,Q;;AAGlCzB,UAAA,CAAA,CADCqB,YAAA,CAAAK,QACD,CAAA,EDYEJ,aAAa,CAACK,SCZhB,EDY2B,oBCZ3B,EDYiD,ICZjD,CAAA;;AAKA3B,UAAA,CAAA,CADCqB,YAAA,CAAAK,QACD,CAAA,EDUEJ,aAAa,CAACK,SCVhB,EDU2B,WCV3B,EDUwC,ICVxC,CAAA;;AARDX,OAAA,CAAAM,aAAA,GAAAA,aAAA","file":"RuleStopState.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:36.7513856-07:00\nconst ATNState_1 = require(\"./ATNState\");\nconst ATNStateType_1 = require(\"./ATNStateType\");\nconst Decorators_1 = require(\"../Decorators\");\n/** The last node in the ATN for a rule, unless that rule is the start symbol.\n *  In that case, there is one transition to EOF. Later, we might encode\n *  references to all calls to this rule to compute FOLLOW sets for\n *  error handling.\n */\nclass RuleStopState extends ATNState_1.ATNState {\n    get nonStopStateNumber() {\n        return -1;\n    }\n    get stateType() {\n        return ATNStateType_1.ATNStateType.RULE_STOP;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], RuleStopState.prototype, \"nonStopStateNumber\", null);\n__decorate([\n    Decorators_1.Override\n], RuleStopState.prototype, \"stateType\", null);\nexports.RuleStopState = RuleStopState;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:36.7513856-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { ATNStateType } from \"./ATNStateType\";\nimport { Override } from \"../Decorators\";\n\n/** The last node in the ATN for a rule, unless that rule is the start symbol.\n *  In that case, there is one transition to EOF. Later, we might encode\n *  references to all calls to this rule to compute FOLLOW sets for\n *  error handling.\n */\nexport class RuleStopState extends ATNState {\n\n\t@Override\n\tget nonStopStateNumber(): number {\n\t\treturn -1;\n\t}\n\n\t@Override\n\tget stateType(): ATNStateType {\n\t\treturn ATNStateType.RULE_STOP;\n\t}\n\n}\n"]}