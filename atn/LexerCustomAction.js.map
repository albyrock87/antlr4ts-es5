{"version":3,"sources":["atn/LexerCustomAction.js","../src/atn/LexerCustomAction.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","MurmurHash_1","require","Decorators_1","LexerCustomAction","ruleIndex","actionIndex","_ruleIndex","_actionIndex","lexer","action","undefined","hash","MurmurHash","initialize","update","actionType","finish","obj","Override","prototype","NotNull"],"mappings":"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","file":"LexerCustomAction.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst MurmurHash_1 = require(\"../misc/MurmurHash\");\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * Executes a custom lexer action by calling {@link Recognizer#action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer#action} when the grammar is compiled.\n *\n * This class may represent embedded actions created with the `{...}`\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nclass LexerCustomAction {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer#action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer#action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        this._ruleIndex = ruleIndex;\n        this._actionIndex = actionIndex;\n    }\n    /**\n     * Gets the rule index to use for calls to {@link Recognizer#action}.\n     *\n     * @returns The rule index for the custom action.\n     */\n    get ruleIndex() {\n        return this._ruleIndex;\n    }\n    /**\n     * Gets the action index to use for calls to {@link Recognizer#action}.\n     *\n     * @returns The action index for the custom action.\n     */\n    get actionIndex() {\n        return this._actionIndex;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * @returns This method returns {@link LexerActionType#CUSTOM}.\n     */\n    get actionType() {\n        return 1 /* CUSTOM */;\n    }\n    /**\n     * Gets whether the lexer action is position-dependent. Position-dependent\n     * actions may have different semantics depending on the {@link CharStream}\n     * index at the time the action is executed.\n     *\n     * Custom actions are position-dependent since they may represent a\n     * user-defined embedded action which makes calls to methods like\n     * {@link Lexer#getText}.\n     *\n     * @returns This method returns `true`.\n     */\n    get isPositionDependent() {\n        return true;\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * Custom actions are implemented by calling {@link Lexer#action} with the\n     * appropriate rule and action indexes.\n     */\n    execute(lexer) {\n        lexer.action(undefined, this._ruleIndex, this._actionIndex);\n    }\n    hashCode() {\n        let hash = MurmurHash_1.MurmurHash.initialize();\n        hash = MurmurHash_1.MurmurHash.update(hash, this.actionType);\n        hash = MurmurHash_1.MurmurHash.update(hash, this._ruleIndex);\n        hash = MurmurHash_1.MurmurHash.update(hash, this._actionIndex);\n        return MurmurHash_1.MurmurHash.finish(hash, 3);\n    }\n    equals(obj) {\n        if (obj === this) {\n            return true;\n        }\n        else if (!(obj instanceof LexerCustomAction)) {\n            return false;\n        }\n        return this._ruleIndex === obj._ruleIndex\n            && this._actionIndex === obj._actionIndex;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], LexerCustomAction.prototype, \"actionType\", null);\n__decorate([\n    Decorators_1.Override\n], LexerCustomAction.prototype, \"isPositionDependent\", null);\n__decorate([\n    Decorators_1.Override,\n    __param(0, Decorators_1.NotNull)\n], LexerCustomAction.prototype, \"execute\", null);\n__decorate([\n    Decorators_1.Override\n], LexerCustomAction.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], LexerCustomAction.prototype, \"equals\", null);\nexports.LexerCustomAction = LexerCustomAction;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:29.6567992-07:00\n\nimport { Lexer } from \"../Lexer\";\nimport { LexerAction } from \"./LexerAction\";\nimport { LexerActionType } from \"./LexerActionType\";\nimport { MurmurHash } from \"../misc/MurmurHash\";\nimport { NotNull, Override } from \"../Decorators\";\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer#action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer#action} when the grammar is compiled.\n *\n * This class may represent embedded actions created with the `{...}`\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.\n *\n * @author Sam Harwell\n * @since 4.2\n */\nexport class LexerCustomAction implements LexerAction {\n\tprivate readonly _ruleIndex: number;\n\tprivate readonly _actionIndex: number;\n\n\t/**\n\t * Constructs a custom lexer action with the specified rule and action\n\t * indexes.\n\t *\n\t * @param ruleIndex The rule index to use for calls to\n\t * {@link Recognizer#action}.\n\t * @param actionIndex The action index to use for calls to\n\t * {@link Recognizer#action}.\n\t */\n\tconstructor(ruleIndex: number, actionIndex: number) {\n\t\tthis._ruleIndex = ruleIndex;\n\t\tthis._actionIndex = actionIndex;\n\t}\n\n\t/**\n\t * Gets the rule index to use for calls to {@link Recognizer#action}.\n\t *\n\t * @returns The rule index for the custom action.\n\t */\n\tget ruleIndex(): number {\n\t\treturn this._ruleIndex;\n\t}\n\n\t/**\n\t * Gets the action index to use for calls to {@link Recognizer#action}.\n\t *\n\t * @returns The action index for the custom action.\n\t */\n\tget actionIndex(): number {\n\t\treturn this._actionIndex;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * @returns This method returns {@link LexerActionType#CUSTOM}.\n\t */\n\t@Override\n\tget actionType(): LexerActionType {\n\t\treturn LexerActionType.CUSTOM;\n\t}\n\n\t/**\n\t * Gets whether the lexer action is position-dependent. Position-dependent\n\t * actions may have different semantics depending on the {@link CharStream}\n\t * index at the time the action is executed.\n\t *\n\t * Custom actions are position-dependent since they may represent a\n\t * user-defined embedded action which makes calls to methods like\n\t * {@link Lexer#getText}.\n\t *\n\t * @returns This method returns `true`.\n\t */\n\t@Override\n\tget isPositionDependent(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * Custom actions are implemented by calling {@link Lexer#action} with the\n\t * appropriate rule and action indexes.\n\t */\n\t@Override\n\tpublic execute(@NotNull lexer: Lexer): void {\n\t\tlexer.action(undefined, this._ruleIndex, this._actionIndex);\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\thash = MurmurHash.update(hash, this.actionType);\n\t\thash = MurmurHash.update(hash, this._ruleIndex);\n\t\thash = MurmurHash.update(hash, this._actionIndex);\n\t\treturn MurmurHash.finish(hash, 3);\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\tif (obj === this) {\n\t\t\treturn true;\n\t\t} else if (!(obj instanceof LexerCustomAction)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._ruleIndex === obj._ruleIndex\n\t\t\t&& this._actionIndex === obj._actionIndex;\n\t}\n}\n"]}