{"version":3,"sources":["atn/ParseInfo.js","../src/atn/ParseInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","ParseInfo","atnSimulator","getDecisionInfo","decisions","LL","fallBack","LL_Fallback","push","t","decision","timeInPrediction","k","SLL_TotalLook","LL_TotalLook","SLL_ATNTransitions","LL_ATNTransitions","decisionToDFA","atn","states","size","n","getDFASize","NotNull","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,IAAIQ,OAAO,GAAI,UAAQ,SAAKA,OAAd,IAA0B,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACrE,SAAO,UAAUhB,MAAV,EAAkBC,GAAlB,EAAuB;AAAEe,IAAAA,SAAS,CAAChB,MAAD,EAASC,GAAT,EAAcc,UAAd,CAAT;AAAqC,GAArE;AACH,CAFD;;AAGAR,MAAM,CAACM,cAAP,CAAsBI,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ACLA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;AAGA;;;;;;;;AAMA,IAAaC,SAAS;AAAA;AAAA;AAGrB,qBAAqBC,YAArB,EAAwD;AAAA;AACvD,SAAKA,YAAL,GAAoBA,YAApB;AACA;AAED;;;;;;;;;AAPqB;AAAA;AAAA,sCAeC;AACrB,aAAO,KAAKA,YAAL,CAAkBC,eAAlB,EAAP;AACA;AAED;;;;;;;;;AAnBqB;AAAA;AAAA,qCA4BA;AACpB,UAAIC,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIE,EAAE,GAAa,EAAnB;;AACA,WAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,SAAS,CAACnB,MAA9B,EAAsCO,CAAC,EAAvC,EAA2C;AAC1C,YAAIc,QAAQ,GAAWF,SAAS,CAACZ,CAAD,CAAT,CAAae,WAApC;;AACA,YAAID,QAAQ,GAAG,CAAf,EAAkB;AACjBD,UAAAA,EAAE,CAACG,IAAH,CAAQhB,CAAR;AACA;AACD;;AAED,aAAOa,EAAP;AACA;AAED;;;;;;AAzCqB;AAAA;AAAA,+CA8CU;AAC9B,UAAID,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIM,CAAC,GAAW,CAAhB;AAF8B;AAAA;AAAA;;AAAA;AAG9B,6BAAqBL,SAArB,8HAAgC;AAAA,cAAvBM,QAAuB;AAC/BD,UAAAA,CAAC,IAAIC,QAAQ,CAACC,gBAAd;AACA;AAL6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO9B,aAAOF,CAAP;AACA;AAED;;;;;;AAxDqB;AAAA;AAAA,8CA6DS;AAC7B,UAAIL,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIS,CAAC,GAAW,CAAhB;AAF6B;AAAA;AAAA;;AAAA;AAG7B,8BAAqBR,SAArB,mIAAgC;AAAA,cAAvBM,QAAuB;AAC/BE,UAAAA,CAAC,IAAIF,QAAQ,CAACG,aAAd;AACA;AAL4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO7B,aAAOD,CAAP;AACA;AAED;;;;;;AAvEqB;AAAA;AAAA,6CA4EQ;AAC5B,UAAIR,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIS,CAAC,GAAW,CAAhB;AAF4B;AAAA;AAAA;;AAAA;AAG5B,8BAAqBR,SAArB,mIAAgC;AAAA,cAAvBM,QAAuB;AAC/BE,UAAAA,CAAC,IAAIF,QAAQ,CAACI,YAAd;AACA;AAL2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO5B,aAAOF,CAAP;AACA;AAED;;;;;AAtFqB;AAAA;AAAA,iDA0FY;AAChC,UAAIR,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIS,CAAC,GAAW,CAAhB;AAFgC;AAAA;AAAA;;AAAA;AAGhC,8BAAqBR,SAArB,mIAAgC;AAAA,cAAvBM,QAAuB;AAC/BE,UAAAA,CAAC,IAAIF,QAAQ,CAACK,kBAAd;AACA;AAL+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOhC,aAAOH,CAAP;AACA;AAED;;;;;AApGqB;AAAA;AAAA,gDAwGW;AAC/B,UAAIR,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIS,CAAC,GAAW,CAAhB;AAF+B;AAAA;AAAA;;AAAA;AAG/B,8BAAqBR,SAArB,mIAAgC;AAAA,cAAvBM,QAAuB;AAC/BE,UAAAA,CAAC,IAAIF,QAAQ,CAACM,iBAAd;AACA;AAL8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO/B,aAAOJ,CAAP;AACA;AAED;;;;;;;;AAlHqB;AAAA;AAAA,8CAyHS;AAC7B,UAAIR,SAAS,GAAmB,KAAKF,YAAL,CAAkBC,eAAlB,EAAhC;AACA,UAAIS,CAAC,GAAW,CAAhB;AAF6B;AAAA;AAAA;;AAAA;AAG7B,8BAAqBR,SAArB,mIAAgC;AAAA,cAAvBM,QAAuB;AAC/BE,UAAAA,CAAC,IAAIF,QAAQ,CAACK,kBAAd;AACAH,UAAAA,CAAC,IAAIF,QAAQ,CAACM,iBAAd;AACA;AAN4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQ7B,aAAOJ,CAAP;AACA;AAlIoB;AAAA;AAAA,+BAgJHF,QAhJG,EAgJc;AAClC,UAAIA,QAAJ,EAAc;AACb,YAAIO,aAAa,GAAQ,KAAKf,YAAL,CAAkBgB,GAAlB,CAAsBD,aAAtB,CAAoCP,QAApC,CAAzB;AACA,eAAOO,aAAa,CAACE,MAAd,CAAqBC,IAA5B;AACA,OAHD,MAGO;AACN,YAAIC,CAAC,GAAW,CAAhB;AACA,YAAIJ,cAAa,GAAU,KAAKf,YAAL,CAAkBgB,GAAlB,CAAsBD,aAAjD;;AACA,aAAK,IAAIzB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyB,cAAa,CAAChC,MAAlC,EAA0CO,CAAC,EAA3C,EAA+C;AAC9C6B,UAAAA,CAAC,IAAI,KAAKC,UAAL,CAAgB9B,CAAhB,CAAL;AACA;;AAED,eAAO6B,CAAP;AACA;AACD;AA7JoB;AAAA;AAAA,GAAtB;;AAeC3C,UAAA,CAAA,CADCqB,YAAA,CAAAwB,OACD,CAAA,EDsHEtB,SAAS,CAACuB,SCtHZ,EDsHuB,iBCtHvB,EDsH0C,ICtH1C,CAAA;;AAaA9C,UAAA,CAAA,CADCqB,YAAA,CAAAwB,OACD,CAAA,ED4GEtB,SAAS,CAACuB,SC5GZ,ED4GuB,gBC5GvB,ED4GyC,IC5GzC,CAAA;;AA5BYvB,SAAS,GAAAvB,UAAA,CAAA,CAGRgB,OAAA,CAAA,CAAA,EAAAK,YAAA,CAAAwB,OAAA,CAHQ,CAAA,EAATtB,SAAS,CAAT;AAAAJ,OAAA,CAAAI,SAAA,GAAAA,SAAA","file":"ParseInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This class provides access to specific and aggregate statistics gathered\n * during profiling of a parser.\n *\n * @since 4.3\n */\nlet ParseInfo = class ParseInfo {\n    constructor(atnSimulator) {\n        this.atnSimulator = atnSimulator;\n    }\n    /**\n     * Gets an array of {@link DecisionInfo} instances containing the profiling\n     * information gathered for each decision in the ATN.\n     *\n     * @returns An array of {@link DecisionInfo} instances, indexed by decision\n     * number.\n     */\n    getDecisionInfo() {\n        return this.atnSimulator.getDecisionInfo();\n    }\n    /**\n     * Gets the decision numbers for decisions that required one or more\n     * full-context predictions during parsing. These are decisions for which\n     * {@link DecisionInfo#LL_Fallback} is non-zero.\n     *\n     * @returns A list of decision numbers which required one or more\n     * full-context predictions during parsing.\n     */\n    getLLDecisions() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let LL = [];\n        for (let i = 0; i < decisions.length; i++) {\n            let fallBack = decisions[i].LL_Fallback;\n            if (fallBack > 0) {\n                LL.push(i);\n            }\n        }\n        return LL;\n    }\n    /**\n     * Gets the total time spent during prediction across all decisions made\n     * during parsing. This value is the sum of\n     * {@link DecisionInfo#timeInPrediction} for all decisions.\n     */\n    getTotalTimeInPrediction() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let t = 0;\n        for (let decision of decisions) {\n            t += decision.timeInPrediction;\n        }\n        return t;\n    }\n    /**\n     * Gets the total number of SLL lookahead operations across all decisions\n     * made during parsing. This value is the sum of\n     * {@link DecisionInfo#SLL_TotalLook} for all decisions.\n     */\n    getTotalSLLLookaheadOps() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let k = 0;\n        for (let decision of decisions) {\n            k += decision.SLL_TotalLook;\n        }\n        return k;\n    }\n    /**\n     * Gets the total number of LL lookahead operations across all decisions\n     * made during parsing. This value is the sum of\n     * {@link DecisionInfo#LL_TotalLook} for all decisions.\n     */\n    getTotalLLLookaheadOps() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let k = 0;\n        for (let decision of decisions) {\n            k += decision.LL_TotalLook;\n        }\n        return k;\n    }\n    /**\n     * Gets the total number of ATN lookahead operations for SLL prediction\n     * across all decisions made during parsing.\n     */\n    getTotalSLLATNLookaheadOps() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let k = 0;\n        for (let decision of decisions) {\n            k += decision.SLL_ATNTransitions;\n        }\n        return k;\n    }\n    /**\n     * Gets the total number of ATN lookahead operations for LL prediction\n     * across all decisions made during parsing.\n     */\n    getTotalLLATNLookaheadOps() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let k = 0;\n        for (let decision of decisions) {\n            k += decision.LL_ATNTransitions;\n        }\n        return k;\n    }\n    /**\n     * Gets the total number of ATN lookahead operations for SLL and LL\n     * prediction across all decisions made during parsing.\n     *\n     * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and\n     * {@link #getTotalLLATNLookaheadOps}.\n     */\n    getTotalATNLookaheadOps() {\n        let decisions = this.atnSimulator.getDecisionInfo();\n        let k = 0;\n        for (let decision of decisions) {\n            k += decision.SLL_ATNTransitions;\n            k += decision.LL_ATNTransitions;\n        }\n        return k;\n    }\n    getDFASize(decision) {\n        if (decision) {\n            let decisionToDFA = this.atnSimulator.atn.decisionToDFA[decision];\n            return decisionToDFA.states.size;\n        }\n        else {\n            let n = 0;\n            let decisionToDFA = this.atnSimulator.atn.decisionToDFA;\n            for (let i = 0; i < decisionToDFA.length; i++) {\n                n += this.getDFASize(i);\n            }\n            return n;\n        }\n    }\n};\n__decorate([\n    Decorators_1.NotNull\n], ParseInfo.prototype, \"getDecisionInfo\", null);\n__decorate([\n    Decorators_1.NotNull\n], ParseInfo.prototype, \"getLLDecisions\", null);\nParseInfo = __decorate([\n    __param(0, Decorators_1.NotNull)\n], ParseInfo);\nexports.ParseInfo = ParseInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:31.0349605-07:00\n\nimport { DecisionInfo } from \"./DecisionInfo\";\nimport { DFA } from \"../dfa/DFA\";\nimport { NotNull } from \"../Decorators\";\nimport { ProfilingATNSimulator } from \"./ProfilingATNSimulator\";\n\n/**\n * This class provides access to specific and aggregate statistics gathered\n * during profiling of a parser.\n *\n * @since 4.3\n */\nexport class ParseInfo {\n\tprotected atnSimulator: ProfilingATNSimulator;\n\n\tconstructor(@NotNull atnSimulator: ProfilingATNSimulator) {\n\t\tthis.atnSimulator = atnSimulator;\n\t}\n\n\t/**\n\t * Gets an array of {@link DecisionInfo} instances containing the profiling\n\t * information gathered for each decision in the ATN.\n\t *\n\t * @returns An array of {@link DecisionInfo} instances, indexed by decision\n\t * number.\n\t */\n\t@NotNull\n\tpublic getDecisionInfo(): DecisionInfo[] {\n\t\treturn this.atnSimulator.getDecisionInfo();\n\t}\n\n\t/**\n\t * Gets the decision numbers for decisions that required one or more\n\t * full-context predictions during parsing. These are decisions for which\n\t * {@link DecisionInfo#LL_Fallback} is non-zero.\n\t *\n\t * @returns A list of decision numbers which required one or more\n\t * full-context predictions during parsing.\n\t */\n\t@NotNull\n\tpublic getLLDecisions(): number[] {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet LL: number[] = [];\n\t\tfor (let i = 0; i < decisions.length; i++) {\n\t\t\tlet fallBack: number = decisions[i].LL_Fallback;\n\t\t\tif (fallBack > 0) {\n\t\t\t\tLL.push(i);\n\t\t\t}\n\t\t}\n\n\t\treturn LL;\n\t}\n\n\t/**\n\t * Gets the total time spent during prediction across all decisions made\n\t * during parsing. This value is the sum of\n\t * {@link DecisionInfo#timeInPrediction} for all decisions.\n\t */\n\tpublic getTotalTimeInPrediction(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet t: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tt += decision.timeInPrediction;\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t/**\n\t * Gets the total number of SLL lookahead operations across all decisions\n\t * made during parsing. This value is the sum of\n\t * {@link DecisionInfo#SLL_TotalLook} for all decisions.\n\t */\n\tpublic getTotalSLLLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_TotalLook;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of LL lookahead operations across all decisions\n\t * made during parsing. This value is the sum of\n\t * {@link DecisionInfo#LL_TotalLook} for all decisions.\n\t */\n\tpublic getTotalLLLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.LL_TotalLook;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for SLL prediction\n\t * across all decisions made during parsing.\n\t */\n\tpublic getTotalSLLATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for LL prediction\n\t * across all decisions made during parsing.\n\t */\n\tpublic getTotalLLATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.LL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of ATN lookahead operations for SLL and LL\n\t * prediction across all decisions made during parsing.\n\t *\n\t * This value is the sum of {@link #getTotalSLLATNLookaheadOps} and\n\t * {@link #getTotalLLATNLookaheadOps}.\n\t */\n\tpublic getTotalATNLookaheadOps(): number {\n\t\tlet decisions: DecisionInfo[] = this.atnSimulator.getDecisionInfo();\n\t\tlet k: number = 0;\n\t\tfor (let decision of decisions) {\n\t\t\tk += decision.SLL_ATNTransitions;\n\t\t\tk += decision.LL_ATNTransitions;\n\t\t}\n\n\t\treturn k;\n\t}\n\n\t/**\n\t * Gets the total number of DFA states stored in the DFA cache for all\n\t * decisions in the ATN.\n\t */\n\tpublic getDFASize(): number;\n\n\t/**\n\t * Gets the total number of DFA states stored in the DFA cache for a\n\t * particular decision.\n\t */\n\tpublic getDFASize(decision: number): number;\n\n\tpublic getDFASize(decision?: number): number {\n\t\tif (decision) {\n\t\t\tlet decisionToDFA: DFA = this.atnSimulator.atn.decisionToDFA[decision];\n\t\t\treturn decisionToDFA.states.size;\n\t\t} else {\n\t\t\tlet n: number = 0;\n\t\t\tlet decisionToDFA: DFA[] = this.atnSimulator.atn.decisionToDFA;\n\t\t\tfor (let i = 0; i < decisionToDFA.length; i++) {\n\t\t\t\tn += this.getDFASize(i);\n\t\t\t}\n\n\t\t\treturn n;\n\t\t}\n\t}\n}\n"]}