{"version":3,"sources":["atn/StarLoopEntryState.js","../src/atn/StarLoopEntryState.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ATNStateType_1","require","BitSet_1","DecisionState_1","Decorators_1","StarLoopEntryState","precedenceRuleDecision","precedenceLoopbackStates","BitSet","ATNStateType","STAR_LOOP_ENTRY","DecisionState","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,cAAA,GAAAC,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAAC,QAAA,GAAAD,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAAE,eAAA,GAAAF,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAAG,YAAA,GAAAH,OAAA,CAAA,eAAA,CAAA;;IAGAI,kB;;;;;AAAA,gCAAA;AAAA;;AAAA;ADMQ,+HAASjB,SAAT;ACHP;;;;;;;;;;;AAUO,UAAAkB,sBAAA,GAAkC,KAAlC;AAEP;;;;;;;;;;;;;;AAaO,UAAAC,wBAAA,GAAmC,IAAIL,QAAA,CAAAM,MAAJ,EAAnC;AA5BR;AAkCC;;;;wBAHa;AACZ,aAAOR,cAAA,CAAAS,YAAA,CAAaC,eAApB;AACA;;;EAjCsCP,eAAA,CAAAQ,a;;AA+BvC7B,UAAA,CAAA,CADCsB,YAAA,CAAAQ,QACD,CAAA,EDQEP,kBAAkB,CAACQ,SCRrB,EDQgC,WCRhC,EDQ6C,ICR7C,CAAA;;AA/BDf,OAAA,CAAAO,kBAAA,GAAAA,kBAAA","file":"StarLoopEntryState.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:37.7099201-07:00\nconst ATNStateType_1 = require(\"./ATNStateType\");\nconst BitSet_1 = require(\"../misc/BitSet\");\nconst DecisionState_1 = require(\"./DecisionState\");\nconst Decorators_1 = require(\"../Decorators\");\nclass StarLoopEntryState extends DecisionState_1.DecisionState {\n    constructor() {\n        super(...arguments);\n        /**\n         * Indicates whether this state can benefit from a precedence DFA during SLL\n         * decision making.\n         *\n         * This is a computed property that is calculated during ATN deserialization\n         * and stored for use in {@link ParserATNSimulator} and\n         * {@link ParserInterpreter}.\n         *\n         * @see `DFA.isPrecedenceDfa`\n         */\n        this.precedenceRuleDecision = false;\n        /**\n         * For precedence decisions, this set marks states *S* which have all\n         * of the following characteristics:\n         *\n         * * One or more invocation sites of the current rule returns to\n         *   *S*.\n         * * The closure from *S* includes the current decision without\n         *   passing through any rule invocations or stepping out of the current\n         *   rule.\n         *\n         * This field is not used when {@link #precedenceRuleDecision} is\n         * `false`.\n         */\n        this.precedenceLoopbackStates = new BitSet_1.BitSet();\n    }\n    get stateType() {\n        return ATNStateType_1.ATNStateType.STAR_LOOP_ENTRY;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], StarLoopEntryState.prototype, \"stateType\", null);\nexports.StarLoopEntryState = StarLoopEntryState;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:37.7099201-07:00\n\nimport { ATNStateType } from \"./ATNStateType\";\nimport { BitSet } from \"../misc/BitSet\";\nimport { DecisionState } from \"./DecisionState\";\nimport { Override } from \"../Decorators\";\nimport { StarLoopbackState } from \"./StarLoopbackState\";\n\nexport class StarLoopEntryState extends DecisionState {\n\tpublic loopBackState: StarLoopbackState;\n\n\t/**\n\t * Indicates whether this state can benefit from a precedence DFA during SLL\n\t * decision making.\n\t *\n\t * This is a computed property that is calculated during ATN deserialization\n\t * and stored for use in {@link ParserATNSimulator} and\n\t * {@link ParserInterpreter}.\n\t *\n\t * @see `DFA.isPrecedenceDfa`\n\t */\n\tpublic precedenceRuleDecision: boolean = false;\n\n\t/**\n\t * For precedence decisions, this set marks states *S* which have all\n\t * of the following characteristics:\n\t *\n\t * * One or more invocation sites of the current rule returns to\n\t *   *S*.\n\t * * The closure from *S* includes the current decision without\n\t *   passing through any rule invocations or stepping out of the current\n\t *   rule.\n\t *\n\t * This field is not used when {@link #precedenceRuleDecision} is\n\t * `false`.\n\t */\n\tpublic precedenceLoopbackStates: BitSet = new BitSet();\n\n\t@Override\n\tget stateType(): ATNStateType {\n\t\treturn ATNStateType.STAR_LOOP_ENTRY;\n\t}\n}\n"]}