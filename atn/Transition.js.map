{"version":3,"sources":["atn/Transition.js","../src/atn/Transition.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","Transition","Error","undefined","serializationNames","NotNull","prototype"],"mappings":"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","file":"Transition.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\n/** An ATN transition between any two ATN states.  Subclasses define\n *  atom, set, epsilon, action, predicate, rule transitions.\n *\n *  This is a one way link.  It emanates from a state (usually via a list of\n *  transitions) and has a target state.\n *\n *  Since we never have to change the ATN transitions once we construct it,\n *  we can fix these transitions as specific classes. The DFA transitions\n *  on the other hand need to update the labels as it adds transitions to\n *  the states. We'll use the term Edge for the DFA to distinguish them from\n *  ATN transitions.\n */\nlet Transition = class Transition {\n    constructor(target) {\n        if (target == null) {\n            throw new Error(\"target cannot be null.\");\n        }\n        this.target = target;\n    }\n    /**\n     * Determines if the transition is an \"epsilon\" transition.\n     *\n     * The default implementation returns `false`.\n     *\n     * @returns `true` if traversing this transition in the ATN does not\n     * consume an input symbol; otherwise, `false` if traversing this\n     * transition consumes (matches) an input symbol.\n     */\n    get isEpsilon() {\n        return false;\n    }\n    get label() {\n        return undefined;\n    }\n};\nTransition.serializationNames = [\n    \"INVALID\",\n    \"EPSILON\",\n    \"RANGE\",\n    \"RULE\",\n    \"PREDICATE\",\n    \"ATOM\",\n    \"ACTION\",\n    \"SET\",\n    \"NOT_SET\",\n    \"WILDCARD\",\n    \"PRECEDENCE\",\n];\n__decorate([\n    Decorators_1.NotNull\n], Transition.prototype, \"target\", void 0);\nTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n], Transition);\nexports.Transition = Transition;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:37.8530496-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { IntervalSet } from \"../misc/IntervalSet\";\nimport { NotNull } from \"../Decorators\";\nimport { TransitionType } from \"./TransitionType\";\n\n/** An ATN transition between any two ATN states.  Subclasses define\n *  atom, set, epsilon, action, predicate, rule transitions.\n *\n *  This is a one way link.  It emanates from a state (usually via a list of\n *  transitions) and has a target state.\n *\n *  Since we never have to change the ATN transitions once we construct it,\n *  we can fix these transitions as specific classes. The DFA transitions\n *  on the other hand need to update the labels as it adds transitions to\n *  the states. We'll use the term Edge for the DFA to distinguish them from\n *  ATN transitions.\n */\nexport abstract class Transition {\n\tpublic static readonly serializationNames: string[] = [\n\t\t\"INVALID\",\n\t\t\"EPSILON\",\n\t\t\"RANGE\",\n\t\t\"RULE\",\n\t\t\"PREDICATE\",\n\t\t\"ATOM\",\n\t\t\"ACTION\",\n\t\t\"SET\",\n\t\t\"NOT_SET\",\n\t\t\"WILDCARD\",\n\t\t\"PRECEDENCE\",\n\t];\n\n\t// @SuppressWarnings(\"serial\")\n\t// static serializationTypes: Map<Class<? extends Transition>, number> =\n\t// \tCollections.unmodifiableMap(new HashMap<Class<? extends Transition>, Integer>() {{\n\t// \t\tput(EpsilonTransition.class, EPSILON);\n\t// \t\tput(RangeTransition.class, RANGE);\n\t// \t\tput(RuleTransition.class, RULE);\n\t// \t\tput(PredicateTransition.class, PREDICATE);\n\t// \t\tput(AtomTransition.class, ATOM);\n\t// \t\tput(ActionTransition.class, ACTION);\n\t// \t\tput(SetTransition.class, SET);\n\t// \t\tput(NotSetTransition.class, NOT_SET);\n\t// \t\tput(WildcardTransition.class, WILDCARD);\n\t// \t\tput(PrecedencePredicateTransition.class, PRECEDENCE);\n\t// \t}});\n\n\t/** The target of this transition. */\n\t@NotNull\n\tpublic target: ATNState;\n\n\tconstructor(@NotNull target: ATNState) {\n\t\tif (target == null) {\n\t\t\tthrow new Error(\"target cannot be null.\");\n\t\t}\n\n\t\tthis.target = target;\n\t}\n\n\tpublic abstract readonly serializationType: TransitionType;\n\n\t/**\n\t * Determines if the transition is an \"epsilon\" transition.\n\t *\n\t * The default implementation returns `false`.\n\t *\n\t * @returns `true` if traversing this transition in the ATN does not\n\t * consume an input symbol; otherwise, `false` if traversing this\n\t * transition consumes (matches) an input symbol.\n\t */\n\tget isEpsilon(): boolean {\n\t\treturn false;\n\t}\n\n\tget label(): IntervalSet | undefined {\n\t\treturn undefined;\n\t}\n\n\tpublic abstract matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean;\n}\n"]}