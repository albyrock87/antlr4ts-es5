{"version":3,"sources":["atn/PredictionContextCache.js","../src/atn/PredictionContextCache.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Array2DHashMap_1","require","Decorators_1","ObjectEqualityComparator_1","PredictionContext_1","assert","PredictionContextCache","enableCache","contexts","Array2DHashMap","ObjectEqualityComparator","INSTANCE","childContexts","joinContexts","context","result","get","put","invokingState","getChild","operands","PredictionContextAndInt","getAsCached","x","y","PredictionContext","join","IdentityCommutativePredictionContextOperands","UNCACHED","obj","other","equals","hashCode","Override","prototype","_x","_y","o"],"mappings":"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","file":"PredictionContextCache.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:35.6390614-07:00\nconst Array2DHashMap_1 = require(\"../misc/Array2DHashMap\");\nconst Decorators_1 = require(\"../Decorators\");\nconst ObjectEqualityComparator_1 = require(\"../misc/ObjectEqualityComparator\");\nconst PredictionContext_1 = require(\"./PredictionContext\");\nconst assert = require(\"assert\");\n/** Used to cache {@link PredictionContext} objects. Its used for the shared\n *  context cash associated with contexts in DFA states. This cache\n *  can be used for both lexers and parsers.\n *\n * @author Sam Harwell\n */\nclass PredictionContextCache {\n    constructor(enableCache = true) {\n        this.contexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        this.childContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        this.joinContexts = new Array2DHashMap_1.Array2DHashMap(ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE);\n        this.enableCache = enableCache;\n    }\n    getAsCached(context) {\n        if (!this.enableCache) {\n            return context;\n        }\n        let result = this.contexts.get(context);\n        if (!result) {\n            result = context;\n            this.contexts.put(context, context);\n        }\n        return result;\n    }\n    getChild(context, invokingState) {\n        if (!this.enableCache) {\n            return context.getChild(invokingState);\n        }\n        let operands = new PredictionContextCache.PredictionContextAndInt(context, invokingState);\n        let result = this.childContexts.get(operands);\n        if (!result) {\n            result = context.getChild(invokingState);\n            result = this.getAsCached(result);\n            this.childContexts.put(operands, result);\n        }\n        return result;\n    }\n    join(x, y) {\n        if (!this.enableCache) {\n            return PredictionContext_1.PredictionContext.join(x, y, this);\n        }\n        let operands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);\n        let result = this.joinContexts.get(operands);\n        if (result) {\n            return result;\n        }\n        result = PredictionContext_1.PredictionContext.join(x, y, this);\n        result = this.getAsCached(result);\n        this.joinContexts.put(operands, result);\n        return result;\n    }\n}\nPredictionContextCache.UNCACHED = new PredictionContextCache(false);\nexports.PredictionContextCache = PredictionContextCache;\n(function (PredictionContextCache) {\n    class PredictionContextAndInt {\n        constructor(obj, value) {\n            this.obj = obj;\n            this.value = value;\n        }\n        equals(obj) {\n            if (!(obj instanceof PredictionContextAndInt)) {\n                return false;\n            }\n            else if (obj === this) {\n                return true;\n            }\n            let other = obj;\n            return this.value === other.value\n                && (this.obj === other.obj || (this.obj != null && this.obj.equals(other.obj)));\n        }\n        hashCode() {\n            let hashCode = 5;\n            hashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);\n            hashCode = 7 * hashCode + this.value;\n            return hashCode;\n        }\n    }\n    __decorate([\n        Decorators_1.Override\n    ], PredictionContextAndInt.prototype, \"equals\", null);\n    __decorate([\n        Decorators_1.Override\n    ], PredictionContextAndInt.prototype, \"hashCode\", null);\n    PredictionContextCache.PredictionContextAndInt = PredictionContextAndInt;\n    class IdentityCommutativePredictionContextOperands {\n        constructor(x, y) {\n            assert(x != null);\n            assert(y != null);\n            this._x = x;\n            this._y = y;\n        }\n        get x() {\n            return this._x;\n        }\n        get y() {\n            return this._y;\n        }\n        equals(o) {\n            if (!(o instanceof IdentityCommutativePredictionContextOperands)) {\n                return false;\n            }\n            else if (this === o) {\n                return true;\n            }\n            let other = o;\n            return (this._x === other._x && this._y === other._y) || (this._x === other._y && this._y === other._x);\n        }\n        hashCode() {\n            return this._x.hashCode() ^ this._y.hashCode();\n        }\n    }\n    __decorate([\n        Decorators_1.Override\n    ], IdentityCommutativePredictionContextOperands.prototype, \"equals\", null);\n    __decorate([\n        Decorators_1.Override\n    ], IdentityCommutativePredictionContextOperands.prototype, \"hashCode\", null);\n    PredictionContextCache.IdentityCommutativePredictionContextOperands = IdentityCommutativePredictionContextOperands;\n})(PredictionContextCache = exports.PredictionContextCache || (exports.PredictionContextCache = {}));\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.6390614-07:00\n\nimport { Array2DHashMap } from \"../misc/Array2DHashMap\";\nimport { Override } from \"../Decorators\";\nimport { JavaMap } from \"../misc/Stubs\";\nimport { ObjectEqualityComparator } from \"../misc/ObjectEqualityComparator\";\nimport { PredictionContext } from \"./PredictionContext\";\nimport * as assert from \"assert\";\n\n/** Used to cache {@link PredictionContext} objects. Its used for the shared\n *  context cash associated with contexts in DFA states. This cache\n *  can be used for both lexers and parsers.\n *\n * @author Sam Harwell\n */\nexport class PredictionContextCache {\n\tpublic static UNCACHED: PredictionContextCache = new PredictionContextCache(false);\n\n\tprivate contexts: JavaMap<PredictionContext, PredictionContext> =\n\t\tnew Array2DHashMap<PredictionContext, PredictionContext>(ObjectEqualityComparator.INSTANCE);\n\tprivate childContexts: JavaMap<PredictionContextCache.PredictionContextAndInt, PredictionContext> =\n\t\tnew Array2DHashMap<PredictionContextCache.PredictionContextAndInt, PredictionContext>(ObjectEqualityComparator.INSTANCE);\n\tprivate joinContexts: JavaMap<PredictionContextCache.IdentityCommutativePredictionContextOperands, PredictionContext> =\n\t\tnew Array2DHashMap<PredictionContextCache.IdentityCommutativePredictionContextOperands, PredictionContext>(ObjectEqualityComparator.INSTANCE);\n\n\tprivate enableCache: boolean;\n\n\tconstructor(enableCache: boolean = true) {\n\t\tthis.enableCache = enableCache;\n\t}\n\n\tpublic getAsCached(context: PredictionContext): PredictionContext {\n\t\tif (!this.enableCache) {\n\t\t\treturn context;\n\t\t}\n\n\t\tlet result = this.contexts.get(context);\n\t\tif (!result) {\n\t\t\tresult = context;\n\t\t\tthis.contexts.put(context, context);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getChild(context: PredictionContext, invokingState: number): PredictionContext {\n\t\tif (!this.enableCache) {\n\t\t\treturn context.getChild(invokingState);\n\t\t}\n\n\t\tlet operands: PredictionContextCache.PredictionContextAndInt = new PredictionContextCache.PredictionContextAndInt(context, invokingState);\n\t\tlet result = this.childContexts.get(operands);\n\t\tif (!result) {\n\t\t\tresult = context.getChild(invokingState);\n\t\t\tresult = this.getAsCached(result);\n\t\t\tthis.childContexts.put(operands, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic join(x: PredictionContext, y: PredictionContext): PredictionContext {\n\t\tif (!this.enableCache) {\n\t\t\treturn PredictionContext.join(x, y, this);\n\t\t}\n\n\t\tlet operands: PredictionContextCache.IdentityCommutativePredictionContextOperands = new PredictionContextCache.IdentityCommutativePredictionContextOperands(x, y);\n\t\tlet result = this.joinContexts.get(operands);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = PredictionContext.join(x, y, this);\n\t\tresult = this.getAsCached(result);\n\t\tthis.joinContexts.put(operands, result);\n\t\treturn result;\n\t}\n}\n\nexport namespace PredictionContextCache {\n\texport class PredictionContextAndInt {\n\t\tprivate obj: PredictionContext;\n\t\tprivate value: number;\n\n\t\tconstructor(obj: PredictionContext, value: number) {\n\t\t\tthis.obj = obj;\n\t\t\tthis.value = value;\n\t\t}\n\n\t\t@Override\n\t\tpublic equals(obj: any): boolean {\n\t\t\tif (!(obj instanceof PredictionContextAndInt)) {\n\t\t\t\treturn false;\n\t\t\t} else if (obj === this) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tlet other: PredictionContextAndInt = obj;\n\t\t\treturn this.value === other.value\n\t\t\t\t&& (this.obj === other.obj || (this.obj != null && this.obj.equals(other.obj)));\n\t\t}\n\n\t\t@Override\n\t\tpublic hashCode(): number {\n\t\t\tlet hashCode: number = 5;\n\t\t\thashCode = 7 * hashCode + (this.obj != null ? this.obj.hashCode() : 0);\n\t\t\thashCode = 7 * hashCode + this.value;\n\t\t\treturn hashCode;\n\t\t}\n\t}\n\n\texport class IdentityCommutativePredictionContextOperands {\n\t\tprivate _x: PredictionContext;\n\t\tprivate _y: PredictionContext;\n\n\t\tconstructor(x: PredictionContext, y: PredictionContext) {\n\t\t\tassert(x != null);\n\t\t\tassert(y != null);\n\t\t\tthis._x = x;\n\t\t\tthis._y = y;\n\t\t}\n\n\t\tget x(): PredictionContext {\n\t\t\treturn this._x;\n\t\t}\n\n\t\tget y(): PredictionContext {\n\t\t\treturn this._y;\n\t\t}\n\n\t\t@Override\n\t\tpublic equals(o: any): boolean {\n\t\t\tif (!(o instanceof IdentityCommutativePredictionContextOperands)) {\n\t\t\t\treturn false;\n\t\t\t} else if (this === o) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tlet other: IdentityCommutativePredictionContextOperands = o;\n\t\t\treturn (this._x === other._x && this._y === other._y) || (this._x === other._y && this._y === other._x);\n\t\t}\n\n\t\t@Override\n\t\tpublic hashCode(): number {\n\t\t\treturn this._x.hashCode() ^ this._y.hashCode();\n\t\t}\n\t}\n}\n"]}