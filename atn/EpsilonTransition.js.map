{"version":3,"sources":["atn/EpsilonTransition.js","../src/atn/EpsilonTransition.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","Decorators_1","require","Transition_1","EpsilonTransition","outermostPrecedenceReturn","_outermostPrecedenceReturn","symbol","minVocabSymbol","maxVocabSymbol","Transition","Override","prototype","NotNull"],"mappings":"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","file":"EpsilonTransition.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\nconst Transition_1 = require(\"./Transition\");\nlet EpsilonTransition = class EpsilonTransition extends Transition_1.Transition {\n    constructor(target, outermostPrecedenceReturn = -1) {\n        super(target);\n        this._outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n    /**\n     * @returns the rule index of a precedence rule for which this transition is\n     * returning from, where the precedence value is 0; otherwise, -1.\n     *\n     * @see ATNConfig.isPrecedenceFilterSuppressed\n     * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)\n     * @since 4.4.1\n     */\n    get outermostPrecedenceReturn() {\n        return this._outermostPrecedenceReturn;\n    }\n    get serializationType() {\n        return 1 /* EPSILON */;\n    }\n    get isEpsilon() {\n        return true;\n    }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n    toString() {\n        return \"epsilon\";\n    }\n};\n__decorate([\n    Decorators_1.Override\n], EpsilonTransition.prototype, \"serializationType\", null);\n__decorate([\n    Decorators_1.Override\n], EpsilonTransition.prototype, \"isEpsilon\", null);\n__decorate([\n    Decorators_1.Override\n], EpsilonTransition.prototype, \"matches\", null);\n__decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n], EpsilonTransition.prototype, \"toString\", null);\nEpsilonTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n], EpsilonTransition);\nexports.EpsilonTransition = EpsilonTransition;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:28.6283213-07:00\n\nimport { ATNState } from \"./ATNState\";\nimport { Override, NotNull } from \"../Decorators\";\nimport { Transition } from \"./Transition\";\nimport { TransitionType } from \"./TransitionType\";\n\nexport class EpsilonTransition extends Transition {\n\n\tprivate _outermostPrecedenceReturn: number;\n\n\tconstructor(@NotNull target: ATNState, outermostPrecedenceReturn: number = -1) {\n\t\tsuper(target);\n\t\tthis._outermostPrecedenceReturn = outermostPrecedenceReturn;\n\t}\n\n\t/**\n\t * @returns the rule index of a precedence rule for which this transition is\n\t * returning from, where the precedence value is 0; otherwise, -1.\n\t *\n\t * @see ATNConfig.isPrecedenceFilterSuppressed\n\t * @see ParserATNSimulator#applyPrecedenceFilter(ATNConfigSet, ParserRuleContext, PredictionContextCache)\n\t * @since 4.4.1\n\t */\n\tget outermostPrecedenceReturn(): number {\n\t\treturn this._outermostPrecedenceReturn;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.EPSILON;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean {\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n\n\t@Override\n\t@NotNull\n\tpublic toString(): string {\n\t\treturn \"epsilon\";\n\t}\n}\n"]}