{"version":3,"sources":["atn/PredicateTransition.js","../src/atn/PredicateTransition.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","AbstractPredicateTransition_1","require","Decorators_1","SemanticContext_1","PredicateTransition","ruleIndex","predIndex","isCtxDependent","symbol","minVocabSymbol","maxVocabSymbol","SemanticContext","Predicate","AbstractPredicateTransition","Override","prototype","NotNull"],"mappings":"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","file":"PredicateTransition.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:35.2826960-07:00\nconst AbstractPredicateTransition_1 = require(\"./AbstractPredicateTransition\");\nconst Decorators_1 = require(\"../Decorators\");\nconst SemanticContext_1 = require(\"./SemanticContext\");\n/** TODO: this is old comment:\n *  A tree of semantic predicates from the grammar AST if label==SEMPRED.\n *  In the ATN, labels will always be exactly one predicate, but the DFA\n *  may have to combine a bunch of them as it collects predicates from\n *  multiple ATN configurations into a single DFA state.\n */\nlet PredicateTransition = class PredicateTransition extends AbstractPredicateTransition_1.AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent;\n    }\n    get serializationType() {\n        return 4 /* PREDICATE */;\n    }\n    get isEpsilon() { return true; }\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n    get predicate() {\n        return new SemanticContext_1.SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n};\n__decorate([\n    Decorators_1.Override\n], PredicateTransition.prototype, \"serializationType\", null);\n__decorate([\n    Decorators_1.Override\n], PredicateTransition.prototype, \"isEpsilon\", null);\n__decorate([\n    Decorators_1.Override\n], PredicateTransition.prototype, \"matches\", null);\n__decorate([\n    Decorators_1.Override,\n    Decorators_1.NotNull\n], PredicateTransition.prototype, \"toString\", null);\nPredicateTransition = __decorate([\n    __param(0, Decorators_1.NotNull)\n], PredicateTransition);\nexports.PredicateTransition = PredicateTransition;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:35.2826960-07:00\n\nimport { AbstractPredicateTransition } from \"./AbstractPredicateTransition\";\nimport { ATNState } from \"./ATNState\";\nimport { NotNull, Override } from \"../Decorators\";\nimport { SemanticContext } from \"./SemanticContext\";\nimport { TransitionType } from \"./TransitionType\";\n\n/** TODO: this is old comment:\n *  A tree of semantic predicates from the grammar AST if label==SEMPRED.\n *  In the ATN, labels will always be exactly one predicate, but the DFA\n *  may have to combine a bunch of them as it collects predicates from\n *  multiple ATN configurations into a single DFA state.\n */\nexport class PredicateTransition extends AbstractPredicateTransition {\n\tpublic ruleIndex: number;\n\tpublic predIndex: number;\n\tpublic isCtxDependent: boolean;   // e.g., $i ref in pred\n\n\tconstructor(@NotNull target: ATNState, ruleIndex: number, predIndex: number, isCtxDependent: boolean) {\n\t\tsuper(target);\n\t\tthis.ruleIndex = ruleIndex;\n\t\tthis.predIndex = predIndex;\n\t\tthis.isCtxDependent = isCtxDependent;\n\t}\n\n\t@Override\n\tget serializationType(): TransitionType {\n\t\treturn TransitionType.PREDICATE;\n\t}\n\n\t@Override\n\tget isEpsilon(): boolean { return true; }\n\n\t@Override\n\tpublic matches(symbol: number, minVocabSymbol: number, maxVocabSymbol: number): boolean {\n\t\treturn false;\n\t}\n\n\tget predicate(): SemanticContext.Predicate {\n\t\treturn new SemanticContext.Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t}\n\n\t@Override\n\t@NotNull\n\tpublic toString(): string {\n\t\treturn \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n\t}\n}\n"]}