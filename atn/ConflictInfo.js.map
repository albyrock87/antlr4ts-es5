{"version":3,"sources":["atn/ConflictInfo.js","../src/atn/ConflictInfo.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","Utils","ConflictInfo","conflictedAlts","exact","_conflictedAlts","obj","isExact","equals","hashCode","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ACHA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;;AACA,IAAAC,KAAA,GAAAD,OAAA,CAAA,eAAA,CAAA;AAEA;;;;;;;IAKAE,Y;;;AAKC,wBAAYC,cAAZ,EAAoCC,KAApC,EAAkD;AAAA;AACjD,SAAKC,eAAL,GAAuBF,cAAvB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA;AAED;;;;;;;2BAyBcE,G,EAAQ;AACrB,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AACjB,eAAO,IAAP;AACA,OAFD,MAEO,IAAI,EAAEA,GAAG,YAAYJ,YAAjB,CAAJ,EAAoC;AAC1C,eAAO,KAAP;AACA;;AAED,aAAO,KAAKK,OAAL,KAAiBD,GAAG,CAACC,OAArB,IACHN,KAAK,CAACO,MAAN,CAAa,KAAKL,cAAlB,EAAkCG,GAAG,CAACH,cAAtC,CADJ;AAEA;;;+BAGc;AACd,aAAO,KAAKA,cAAL,CAAoBM,QAApB,EAAP;AACA;;;wBApCiB;AACjB,aAAO,KAAKJ,eAAZ;AACA;AAED;;;;;;;;;;;;;;;;wBAaW;AACV,aAAO,KAAKD,KAAZ;AACA;;;;;AAGDvB,UAAA,CAAA,CADCkB,YAAA,CAAAW,QACD,CAAA,EDWER,YAAY,CAACS,SCXf,EDW0B,QCX1B,EDWoC,ICXpC,CAAA;;AAYA9B,UAAA,CAAA,CADCkB,YAAA,CAAAW,QACD,CAAA,EDEER,YAAY,CAACS,SCFf,EDE0B,UCF1B,EDEsC,ICFtC,CAAA;;AA/CDd,OAAA,CAAAK,YAAA,GAAAA,YAAA","file":"ConflictInfo.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\nconst Utils = require(\"../misc/Utils\");\n/**\n * This class stores information about a configuration conflict.\n *\n * @author Sam Harwell\n */\nclass ConflictInfo {\n    constructor(conflictedAlts, exact) {\n        this._conflictedAlts = conflictedAlts;\n        this.exact = exact;\n    }\n    /**\n     * Gets the set of conflicting alternatives for the configuration set.\n     */\n    get conflictedAlts() {\n        return this._conflictedAlts;\n    }\n    /**\n     * Gets whether or not the configuration conflict is an exact conflict.\n     * An exact conflict occurs when the prediction algorithm determines that\n     * the represented alternatives for a particular configuration set cannot be\n     * further reduced by consuming additional input. After reaching an exact\n     * conflict during an SLL prediction, only switch to full-context prediction\n     * could reduce the set of viable alternatives. In LL prediction, an exact\n     * conflict indicates a true ambiguity in the input.\n     *\n     * For the {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} prediction mode,\n     * accept states are conflicting but not exact are treated as non-accept\n     * states.\n     */\n    get isExact() {\n        return this.exact;\n    }\n    equals(obj) {\n        if (obj === this) {\n            return true;\n        }\n        else if (!(obj instanceof ConflictInfo)) {\n            return false;\n        }\n        return this.isExact === obj.isExact\n            && Utils.equals(this.conflictedAlts, obj.conflictedAlts);\n    }\n    hashCode() {\n        return this.conflictedAlts.hashCode();\n    }\n}\n__decorate([\n    Decorators_1.Override\n], ConflictInfo.prototype, \"equals\", null);\n__decorate([\n    Decorators_1.Override\n], ConflictInfo.prototype, \"hashCode\", null);\nexports.ConflictInfo = ConflictInfo;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:28.0710131-07:00\n\nimport { BitSet } from \"../misc/BitSet\";\nimport { Override } from \"../Decorators\";\nimport * as Utils from \"../misc/Utils\";\n\n/**\n * This class stores information about a configuration conflict.\n *\n * @author Sam Harwell\n */\nexport class ConflictInfo {\n\tprivate _conflictedAlts: BitSet;\n\n\tprivate exact: boolean;\n\n\tconstructor(conflictedAlts: BitSet, exact: boolean) {\n\t\tthis._conflictedAlts = conflictedAlts;\n\t\tthis.exact = exact;\n\t}\n\n\t/**\n\t * Gets the set of conflicting alternatives for the configuration set.\n\t */\n\tget conflictedAlts(): BitSet {\n\t\treturn this._conflictedAlts;\n\t}\n\n\t/**\n\t * Gets whether or not the configuration conflict is an exact conflict.\n\t * An exact conflict occurs when the prediction algorithm determines that\n\t * the represented alternatives for a particular configuration set cannot be\n\t * further reduced by consuming additional input. After reaching an exact\n\t * conflict during an SLL prediction, only switch to full-context prediction\n\t * could reduce the set of viable alternatives. In LL prediction, an exact\n\t * conflict indicates a true ambiguity in the input.\n\t *\n\t * For the {@link PredictionMode#LL_EXACT_AMBIG_DETECTION} prediction mode,\n\t * accept states are conflicting but not exact are treated as non-accept\n\t * states.\n\t */\n\tget isExact(): boolean {\n\t\treturn this.exact;\n\t}\n\n\t@Override\n\tpublic equals(obj: any): boolean {\n\t\tif (obj === this) {\n\t\t\treturn true;\n\t\t} else if (!(obj instanceof ConflictInfo)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.isExact === obj.isExact\n\t\t\t&& Utils.equals(this.conflictedAlts, obj.conflictedAlts);\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\treturn this.conflictedAlts.hashCode();\n\t}\n}\n"]}