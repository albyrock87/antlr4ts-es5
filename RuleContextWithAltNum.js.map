{"version":3,"sources":["RuleContextWithAltNum.js","../src/RuleContextWithAltNum.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ATN_1","require","Decorators_1","ParserRuleContext_1","RuleContextWithAltNum","parent","invokingStateNumber","undefined","_altNumber","ATN","INVALID_ALT_NUMBER","altNum","ParserRuleContext","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,KAAA,GAAAC,OAAA,CAAA,WAAA,CAAA;;AACA,IAAAC,YAAA,GAAAD,OAAA,CAAA,cAAA,CAAA;;AACA,IAAAE,mBAAA,GAAAF,OAAA,CAAA,qBAAA,CAAA;AAEA;;;;;;;;;;;;IAUAG,qB;;;;;AAKC,iCAAYC,MAAZ,EAAwCC,mBAAxC,EAAoE;AAAA;;AAAA;;AACnE,QAAIA,mBAAmB,KAAKC,SAA5B,EAAuC;AACtC,mIAAMF,MAAN,EAAcC,mBAAd;AACA,KAFD,MAEO;AACN;AACA;;AAED,UAAKE,UAAL,GAAkBR,KAAA,CAAAS,GAAA,CAAIC,kBAAtB;AAPmE;AAQnE;;;;wBAGY;AACZ,aAAO,KAAKF,UAAZ;AACA,K,CAED;;sBACcG,M,EAAc;AAC3B,WAAKH,UAAL,GAAkBG,MAAlB;AACA;;;EAvByCR,mBAAA,CAAAS,iB;;AAgB1C9B,UAAA,CAAA,CADCoB,YAAA,CAAAW,QACD,CAAA,EDSET,qBAAqB,CAACU,SCTxB,EDSmC,WCTnC,EDSgD,ICThD,CAAA;;AAhBDhB,OAAA,CAAAM,qBAAA,GAAAA,qBAAA","file":"RuleContextWithAltNum.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00\nconst ATN_1 = require(\"./atn/ATN\");\nconst Decorators_1 = require(\"./Decorators\");\nconst ParserRuleContext_1 = require(\"./ParserRuleContext\");\n/** A handy class for use with\n *\n *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}\n *\n *  that provides a backing field / impl for the outer alternative number\n *  matched for an internal parse tree node.\n *\n *  I'm only putting into Java runtime as I'm certain I'm the only one that\n *  will really every use this.\n */\nclass RuleContextWithAltNum extends ParserRuleContext_1.ParserRuleContext {\n    constructor(parent, invokingStateNumber) {\n        if (invokingStateNumber !== undefined) {\n            super(parent, invokingStateNumber);\n        }\n        else {\n            super();\n        }\n        this._altNumber = ATN_1.ATN.INVALID_ALT_NUMBER;\n    }\n    get altNumber() {\n        return this._altNumber;\n    }\n    // @Override\n    set altNumber(altNum) {\n        this._altNumber = altNum;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], RuleContextWithAltNum.prototype, \"altNumber\", null);\nexports.RuleContextWithAltNum = RuleContextWithAltNum;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:57.4741196-07:00\n\nimport { ATN } from \"./atn/ATN\";\nimport { Override } from \"./Decorators\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\n\n/** A handy class for use with\n *\n *  options {contextSuperClass=org.antlr.v4.runtime.RuleContextWithAltNum;}\n *\n *  that provides a backing field / impl for the outer alternative number\n *  matched for an internal parse tree node.\n *\n *  I'm only putting into Java runtime as I'm certain I'm the only one that\n *  will really every use this.\n */\nexport class RuleContextWithAltNum extends ParserRuleContext {\n\tprivate _altNumber: number;\n\n\tconstructor();\n\tconstructor(parent: ParserRuleContext | undefined, invokingStateNumber: number);\n\tconstructor(parent?: ParserRuleContext, invokingStateNumber?: number) {\n\t\tif (invokingStateNumber !== undefined) {\n\t\t\tsuper(parent, invokingStateNumber);\n\t\t} else {\n\t\t\tsuper();\n\t\t}\n\n\t\tthis._altNumber = ATN.INVALID_ALT_NUMBER;\n\t}\n\n\t@Override\n\tget altNumber(): number {\n\t\treturn this._altNumber;\n\t}\n\n\t// @Override\n\tset altNumber(altNum: number) {\n\t\tthis._altNumber = altNum;\n\t}\n}\n"]}