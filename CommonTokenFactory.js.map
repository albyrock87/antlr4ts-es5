{"version":3,"sources":["CommonTokenFactory.js","../src/CommonTokenFactory.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","CommonToken_1","require","Interval_1","Decorators_1","CommonTokenFactory","copyText","source","type","text","channel","start","stop","line","charPositionInLine","t","CommonToken","stream","getText","Interval","of","Override","prototype","DEFAULT"],"mappings":"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","file":"CommonTokenFactory.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst CommonToken_1 = require(\"./CommonToken\");\nconst Interval_1 = require(\"./misc/Interval\");\nconst Decorators_1 = require(\"./Decorators\");\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory {\n    /**\n     * Constructs a {@link CommonTokenFactory} with the specified value for\n     * {@link #copyText}.\n     *\n     * When `copyText` is `false`, the {@link #DEFAULT} instance\n     * should be used instead of constructing a new instance.\n     *\n     * @param copyText The value for {@link #copyText}.\n     */\n    constructor(copyText = false) {\n        this.copyText = copyText;\n    }\n    create(source, type, text, channel, start, stop, line, charPositionInLine) {\n        let t = new CommonToken_1.CommonToken(type, text, source, channel, start, stop);\n        t.line = line;\n        t.charPositionInLine = charPositionInLine;\n        if (text == null && this.copyText && source.stream != null) {\n            t.text = source.stream.getText(Interval_1.Interval.of(start, stop));\n        }\n        return t;\n    }\n    createSimple(type, text) {\n        return new CommonToken_1.CommonToken(type, text);\n    }\n}\n__decorate([\n    Decorators_1.Override\n], CommonTokenFactory.prototype, \"create\", null);\n__decorate([\n    Decorators_1.Override\n], CommonTokenFactory.prototype, \"createSimple\", null);\nexports.CommonTokenFactory = CommonTokenFactory;\n(function (CommonTokenFactory) {\n    /**\n     * The default {@link CommonTokenFactory} instance.\n     *\n     * This token factory does not explicitly copy token text when constructing\n     * tokens.\n     */\n    CommonTokenFactory.DEFAULT = new CommonTokenFactory();\n})(CommonTokenFactory = exports.CommonTokenFactory || (exports.CommonTokenFactory = {}));\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:50.3010112-07:00\n\nimport { CharStream } from \"./CharStream\";\nimport { CommonToken } from \"./CommonToken\";\nimport { Interval } from \"./misc/Interval\";\nimport { Override } from \"./Decorators\";\nimport { TokenFactory } from \"./TokenFactory\";\nimport { TokenSource } from \"./TokenSource\";\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nexport class CommonTokenFactory implements TokenFactory {\n\t/**\n\t * Indicates whether {@link CommonToken#setText} should be called after\n\t * constructing tokens to explicitly set the text. This is useful for cases\n\t * where the input stream might not be able to provide arbitrary substrings\n\t * of text from the input after the lexer creates a token (e.g. the\n\t * implementation of {@link CharStream#getText} in\n\t * {@link UnbufferedCharStream}\n\t * {@link UnsupportedOperationException}). Explicitly setting the token text\n\t * allows {@link Token#getText} to be called at any time regardless of the\n\t * input stream implementation.\n\t *\n\t * The default value is `false` to avoid the performance and memory\n\t * overhead of copying text for every token unless explicitly requested.\n\t */\n\tprotected copyText: boolean;\n\n\t/**\n\t * Constructs a {@link CommonTokenFactory} with the specified value for\n\t * {@link #copyText}.\n\t *\n\t * When `copyText` is `false`, the {@link #DEFAULT} instance\n\t * should be used instead of constructing a new instance.\n\t *\n\t * @param copyText The value for {@link #copyText}.\n\t */\n\tconstructor(copyText: boolean = false) {\n\t\tthis.copyText = copyText;\n\t}\n\n\t@Override\n\tpublic create(\n\t\tsource: { source?: TokenSource, stream?: CharStream },\n\t\ttype: number,\n\t\ttext: string | undefined,\n\t\tchannel: number,\n\t\tstart: number,\n\t\tstop: number,\n\t\tline: number,\n\t\tcharPositionInLine: number): CommonToken {\n\n\t\tlet t: CommonToken = new CommonToken(type, text, source, channel, start, stop);\n\t\tt.line = line;\n\t\tt.charPositionInLine = charPositionInLine;\n\t\tif (text == null && this.copyText && source.stream != null) {\n\t\t\tt.text = source.stream.getText(Interval.of(start, stop));\n\t\t}\n\n\t\treturn t;\n\t}\n\n\t@Override\n\tpublic createSimple(type: number, text: string): CommonToken {\n\t\treturn new CommonToken(type, text);\n\t}\n}\n\nexport namespace CommonTokenFactory {\n\t/**\n\t * The default {@link CommonTokenFactory} instance.\n\t *\n\t * This token factory does not explicitly copy token text when constructing\n\t * tokens.\n\t */\n\texport const DEFAULT: TokenFactory = new CommonTokenFactory();\n}\n"]}