{"version":3,"sources":["LexerNoViableAltException.js","../src/LexerNoViableAltException.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","RecognitionException_1","require","Decorators_1","Interval_1","Utils","LexerNoViableAltException","lexer","input","startIndex","deadEndConfigs","_startIndex","_deadEndConfigs","symbol","inputStream","size","getText","Interval","of","escapeWhitespace","RecognitionException","Override","prototype","NotNull"],"mappings":"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","file":"LexerNoViableAltException.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst RecognitionException_1 = require(\"./RecognitionException\");\nconst Decorators_1 = require(\"./Decorators\");\nconst Interval_1 = require(\"./misc/Interval\");\nconst Utils = require(\"./misc/Utils\");\nlet LexerNoViableAltException = class LexerNoViableAltException extends RecognitionException_1.RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super(lexer, input);\n        this._startIndex = startIndex;\n        this._deadEndConfigs = deadEndConfigs;\n    }\n    get startIndex() {\n        return this._startIndex;\n    }\n    get deadEndConfigs() {\n        return this._deadEndConfigs;\n    }\n    get inputStream() {\n        return super.inputStream;\n    }\n    toString() {\n        let symbol = \"\";\n        if (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {\n            symbol = this.inputStream.getText(Interval_1.Interval.of(this._startIndex, this._startIndex));\n            symbol = Utils.escapeWhitespace(symbol, false);\n        }\n        // return String.format(Locale.getDefault(), \"%s('%s')\", LexerNoViableAltException.class.getSimpleName(), symbol);\n        return `LexerNoViableAltException('${symbol}')`;\n    }\n};\n__decorate([\n    Decorators_1.Override\n], LexerNoViableAltException.prototype, \"inputStream\", null);\n__decorate([\n    Decorators_1.Override\n], LexerNoViableAltException.prototype, \"toString\", null);\nLexerNoViableAltException = __decorate([\n    __param(1, Decorators_1.NotNull)\n], LexerNoViableAltException);\nexports.LexerNoViableAltException = LexerNoViableAltException;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:52.0961136-07:00\n\nimport { ATNConfigSet } from \"./atn/ATNConfigSet\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { NotNull, Override } from \"./Decorators\";\nimport { Lexer } from \"./Lexer\";\nimport { CharStream } from \"./CharStream\";\nimport { Interval } from \"./misc/Interval\";\nimport * as Utils from \"./misc/Utils\";\n\nexport class LexerNoViableAltException extends RecognitionException {\n\t//private static serialVersionUID: number =  -730999203913001726L;\n\n\t/** Matching attempted at what input index? */\n\tprivate _startIndex: number;\n\n\t/** Which configurations did we try at input.index that couldn't match input.LA(1)? */\n\tprivate _deadEndConfigs?: ATNConfigSet;\n\n\tconstructor(\n\t\tlexer: Lexer | undefined,\n\t\t@NotNull input: CharStream,\n\t\tstartIndex: number,\n\t\tdeadEndConfigs: ATNConfigSet | undefined) {\n\t\tsuper(lexer, input);\n\t\tthis._startIndex = startIndex;\n\t\tthis._deadEndConfigs = deadEndConfigs;\n\t}\n\n\tget startIndex(): number {\n\t\treturn this._startIndex;\n\t}\n\n\tget deadEndConfigs(): ATNConfigSet | undefined {\n\t\treturn this._deadEndConfigs;\n\t}\n\n\t@Override\n\tget inputStream(): CharStream {\n\t\treturn super.inputStream as CharStream;\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tlet symbol = \"\";\n\t\tif (this._startIndex >= 0 && this._startIndex < this.inputStream.size) {\n\t\t\tsymbol = this.inputStream.getText(Interval.of(this._startIndex, this._startIndex));\n\t\t\tsymbol = Utils.escapeWhitespace(symbol, false);\n\t\t}\n\n\t\t// return String.format(Locale.getDefault(), \"%s('%s')\", LexerNoViableAltException.class.getSimpleName(), symbol);\n\t\treturn `LexerNoViableAltException('${symbol}')`;\n\t}\n}\n"]}