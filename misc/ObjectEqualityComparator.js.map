{"version":3,"sources":["misc/ObjectEqualityComparator.js","../src/misc/ObjectEqualityComparator.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","ObjectEqualityComparator","obj","hashCode","a","b","equals","INSTANCE","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ACJA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;AAGA;;;;;;;;IAMAC,wB;;;;;;;;;;AAGC;;;;;;6BAOgBC,G,EAAiC;AAChD,UAAIA,GAAG,IAAI,IAAX,EAAiB;AAChB,eAAO,CAAP;AACA;;AAED,aAAOA,GAAG,CAACC,QAAJ,EAAP;AACA;AAED;;;;;;;;;;;;2BAUcC,C,EAAiCC,C,EAA+B;AAC7E,UAAID,CAAC,IAAI,IAAT,EAAe;AACd,eAAOC,CAAC,IAAI,IAAZ;AACA;;AAED,aAAOD,CAAC,CAACE,MAAF,CAASD,CAAT,CAAP;AACA;;;;;AAjCsBJ,wBAAA,CAAAM,QAAA,GAAqC,IAAIN,wBAAJ,EAArC;;AASvBpB,UAAA,CAAA,CADCkB,YAAA,CAAAS,QACD,CAAA,EDyBEP,wBAAwB,CAACQ,SCzB3B,EDyBsC,UCzBtC,EDyBkD,ICzBlD,CAAA;;AAkBA5B,UAAA,CAAA,CADCkB,YAAA,CAAAS,QACD,CAAA,EDUEP,wBAAwB,CAACQ,SCV3B,EDUsC,QCVtC,EDUgD,ICVhD,CAAA;;AA5BDZ,OAAA,CAAAI,wBAAA,GAAAA,wBAAA","file":"ObjectEqualityComparator.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nclass ObjectEqualityComparator {\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation returns\n     * `obj.`{@link Object#hashCode hashCode()}.\n     */\n    hashCode(obj) {\n        if (obj == null) {\n            return 0;\n        }\n        return obj.hashCode();\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation relies on object equality. If both objects are\n     * `undefined` or `null`, this method returns `true`. Otherwise if only\n     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,\n     * this method returns the result of\n     * `a.`{@link Object#equals equals}`(b)`.\n     */\n    equals(a, b) {\n        if (a == null) {\n            return b == null;\n        }\n        return a.equals(b);\n    }\n}\nObjectEqualityComparator.INSTANCE = new ObjectEqualityComparator();\n__decorate([\n    Decorators_1.Override\n], ObjectEqualityComparator.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], ObjectEqualityComparator.prototype, \"equals\", null);\nexports.ObjectEqualityComparator = ObjectEqualityComparator;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:42.2127260-07:00\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\n\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nexport class ObjectEqualityComparator implements EqualityComparator<Equatable | null | undefined> {\n\tpublic static readonly INSTANCE: ObjectEqualityComparator = new ObjectEqualityComparator();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation returns\n\t * `obj.`{@link Object#hashCode hashCode()}.\n\t */\n\t@Override\n\tpublic hashCode(obj: Equatable | null | undefined): number {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn obj.hashCode();\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation relies on object equality. If both objects are\n\t * `undefined` or `null`, this method returns `true`. Otherwise if only\n\t * `a` is `undefined` or `null`, this method returns `false`. Otherwise,\n\t * this method returns the result of\n\t * `a.`{@link Object#equals equals}`(b)`.\n\t */\n\t@Override\n\tpublic equals(a: Equatable | null | undefined, b: Equatable | null | undefined): boolean {\n\t\tif (a == null) {\n\t\t\treturn b == null;\n\t\t}\n\n\t\treturn a.equals(b);\n\t}\n\n}\n"]}