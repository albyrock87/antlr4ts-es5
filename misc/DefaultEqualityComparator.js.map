{"version":3,"sources":["misc/DefaultEqualityComparator.js","../src/misc/DefaultEqualityComparator.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","MurmurHash_1","ObjectEqualityComparator_1","DefaultEqualityComparator","obj","MurmurHash","hashCode","ObjectEqualityComparator","INSTANCE","a","b","equals","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;ACLA,IAAAC,YAAA,GAAAC,OAAA,CAAA,eAAA,CAAA;;AAEA,IAAAC,YAAA,GAAAD,OAAA,CAAA,cAAA,CAAA;;AACA,IAAAE,0BAAA,GAAAF,OAAA,CAAA,4BAAA,CAAA;AAEA;;;;;;;;IAMAG,yB;;;;;;;;;;AAGC;;;;;;6BAOgBC,G,EAAQ;AACvB,UAAIA,GAAG,IAAI,IAAX,EAAiB;AAChB,eAAO,CAAP;AACA,OAFD,MAEO,IAAI,OAAOA,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAA9C,EAAwD;AAC9D,eAAOH,YAAA,CAAAI,UAAA,CAAWC,QAAX,CAAoB,CAACF,GAAD,CAApB,CAAP;AACA,OAFM,MAEA;AACN,eAAOF,0BAAA,CAAAK,wBAAA,CAAyBC,QAAzB,CAAkCF,QAAlC,CAA2CF,GAA3C,CAAP;AACA;AACD;AAED;;;;;;;;;;;;2BAUcK,C,EAAQC,C,EAAM;AAC3B,UAAID,CAAC,IAAI,IAAT,EAAe;AACd,eAAOC,CAAC,IAAI,IAAZ;AACA,OAFD,MAEO,IAAI,OAAOD,CAAP,KAAa,QAAb,IAAyB,OAAOA,CAAP,KAAa,QAA1C,EAAoD;AAC1D,eAAOA,CAAC,KAAKC,CAAb;AACA,OAFM,MAEA;AACN,eAAOR,0BAAA,CAAAK,wBAAA,CAAyBC,QAAzB,CAAkCG,MAAlC,CAAyCF,CAAzC,EAAyDC,CAAzD,CAAP;AACA;AACD;;;;;AArCsBP,yBAAA,CAAAK,QAAA,GAAsC,IAAIL,yBAAJ,EAAtC;;AASvBtB,UAAA,CAAA,CADCkB,YAAA,CAAAa,QACD,CAAA,EDoCET,yBAAyB,CAACU,SCpC5B,EDoCuC,UCpCvC,EDoCmD,ICpCnD,CAAA;;AAoBAhC,UAAA,CAAA,CADCkB,YAAA,CAAAa,QACD,CAAA,EDmBET,yBAAyB,CAACU,SCnB5B,EDmBuC,QCnBvC,EDmBiD,ICnBjD,CAAA;;AA9BDhB,OAAA,CAAAM,yBAAA,GAAAA,yBAAA","file":"DefaultEqualityComparator.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\nconst MurmurHash_1 = require(\"./MurmurHash\");\nconst ObjectEqualityComparator_1 = require(\"./ObjectEqualityComparator\");\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nclass DefaultEqualityComparator {\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation returns\n     * `obj.`{@link Object#hashCode hashCode()}.\n     */\n    hashCode(obj) {\n        if (obj == null) {\n            return 0;\n        }\n        else if (typeof obj === \"string\" || typeof obj === \"number\") {\n            return MurmurHash_1.MurmurHash.hashCode([obj]);\n        }\n        else {\n            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.hashCode(obj);\n        }\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation relies on object equality. If both objects are\n     * `undefined` or `null`, this method returns `true`. Otherwise if only\n     * `a` is `undefined` or `null`, this method returns `false`. Otherwise,\n     * this method returns the result of\n     * `a.`{@link Object#equals equals}`(b)`.\n     */\n    equals(a, b) {\n        if (a == null) {\n            return b == null;\n        }\n        else if (typeof a === \"string\" || typeof a === \"number\") {\n            return a === b;\n        }\n        else {\n            return ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a, b);\n        }\n    }\n}\nDefaultEqualityComparator.INSTANCE = new DefaultEqualityComparator();\n__decorate([\n    Decorators_1.Override\n], DefaultEqualityComparator.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], DefaultEqualityComparator.prototype, \"equals\", null);\nexports.DefaultEqualityComparator = DefaultEqualityComparator;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\nimport { MurmurHash } from \"./MurmurHash\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\n\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nexport class DefaultEqualityComparator implements EqualityComparator<any> {\n\tpublic static readonly INSTANCE: DefaultEqualityComparator = new DefaultEqualityComparator();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation returns\n\t * `obj.`{@link Object#hashCode hashCode()}.\n\t */\n\t@Override\n\tpublic hashCode(obj: any): number {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t} else if (typeof obj === \"string\" || typeof obj === \"number\") {\n\t\t\treturn MurmurHash.hashCode([obj]);\n\t\t} else {\n\t\t\treturn ObjectEqualityComparator.INSTANCE.hashCode(obj as Equatable);\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation relies on object equality. If both objects are\n\t * `undefined` or `null`, this method returns `true`. Otherwise if only\n\t * `a` is `undefined` or `null`, this method returns `false`. Otherwise,\n\t * this method returns the result of\n\t * `a.`{@link Object#equals equals}`(b)`.\n\t */\n\t@Override\n\tpublic equals(a: any, b: any): boolean {\n\t\tif (a == null) {\n\t\t\treturn b == null;\n\t\t} else if (typeof a === \"string\" || typeof a === \"number\") {\n\t\t\treturn a === b;\n\t\t} else {\n\t\t\treturn ObjectEqualityComparator.INSTANCE.equals(a as Equatable, b as Equatable);\n\t\t}\n\t}\n}\n"]}