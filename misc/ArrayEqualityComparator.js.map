{"version":3,"sources":["misc/ArrayEqualityComparator.js","../src/misc/ArrayEqualityComparator.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","MurmurHash_1","ObjectEqualityComparator_1","ArrayEqualityComparator","obj","MurmurHash","hashCode","a","b","ObjectEqualityComparator","INSTANCE","equals","Override","prototype"],"mappings":"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","file":"ArrayEqualityComparator.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Decorators_1 = require(\"../Decorators\");\nconst MurmurHash_1 = require(\"./MurmurHash\");\nconst ObjectEqualityComparator_1 = require(\"./ObjectEqualityComparator\");\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nclass ArrayEqualityComparator {\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation returns\n     * `obj.`{@link Object#hashCode hashCode()}.\n     */\n    hashCode(obj) {\n        if (obj == null) {\n            return 0;\n        }\n        return MurmurHash_1.MurmurHash.hashCode(obj, 0);\n    }\n    /**\n     * {@inheritDoc}\n     *\n     * This implementation relies on object equality. If both objects are\n     * `undefined`, this method returns `true`. Otherwise if only\n     * `a` is `undefined`, this method returns `false`. Otherwise,\n     * this method returns the result of\n     * `a.`{@link Object#equals equals}`(b)`.\n     */\n    equals(a, b) {\n        if (a == null) {\n            return b == null;\n        }\n        else if (b == null) {\n            return false;\n        }\n        if (a.length !== b.length) {\n            return false;\n        }\n        for (let i = 0; i < a.length; i++) {\n            if (!ObjectEqualityComparator_1.ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nArrayEqualityComparator.INSTANCE = new ArrayEqualityComparator();\n__decorate([\n    Decorators_1.Override\n], ArrayEqualityComparator.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], ArrayEqualityComparator.prototype, \"equals\", null);\nexports.ArrayEqualityComparator = ArrayEqualityComparator;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:42.2127260-07:00\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { Override } from \"../Decorators\";\nimport { Equatable } from \"./Stubs\";\nimport { MurmurHash } from \"./MurmurHash\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\n\n/**\n * This default implementation of {@link EqualityComparator} uses object equality\n * for comparisons by calling {@link Object#hashCode} and {@link Object#equals}.\n *\n * @author Sam Harwell\n */\nexport class ArrayEqualityComparator implements EqualityComparator<Equatable[]> {\n\tpublic static readonly INSTANCE: ArrayEqualityComparator = new ArrayEqualityComparator();\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation returns\n\t * `obj.`{@link Object#hashCode hashCode()}.\n\t */\n\t@Override\n\tpublic hashCode(obj: Equatable[]): number {\n\t\tif (obj == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn MurmurHash.hashCode(obj, 0);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * This implementation relies on object equality. If both objects are\n\t * `undefined`, this method returns `true`. Otherwise if only\n\t * `a` is `undefined`, this method returns `false`. Otherwise,\n\t * this method returns the result of\n\t * `a.`{@link Object#equals equals}`(b)`.\n\t */\n\t@Override\n\tpublic equals(a: Equatable[], b: Equatable[]): boolean {\n\t\tif (a == null) {\n\t\t\treturn b == null;\n\t\t} else if (b == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < a.length; i++) {\n\t\t\tif (!ObjectEqualityComparator.INSTANCE.equals(a[i], b[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n}\n"]}