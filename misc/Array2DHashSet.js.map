{"version":3,"sources":["misc/Array2DHashSet.js","../src/misc/Array2DHashSet.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","exports","value","assert","require","DefaultEqualityComparator_1","Decorators_1","MurmurHash_1","INITAL_CAPACITY","LOAD_FACTOR","Array2DHashSet","comparatorOrSet","initialCapacity","n","threshold","Math","floor","comparator","buckets","slice","bucket","DefaultEqualityComparator","INSTANCE","createBuckets","o","expand","getOrAddImpl","b","getBucket","existing","equals","push","undefined","e","hash","hashCode","MurmurHash","initialize","update","finish","size","same","containsAll","old","newCapacity","newTable","oldSize","newBucket","t","getOrAdd","containsFast","asElementType","obj","get","Symbol","iterator","toArray","a","Array","collection","s","changed","buf","first","toString","capacity","NotNull","prototype","Override","Nullable","SuppressWarnings"],"mappings":"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","file":"Array2DHashSet.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00\nconst assert = require(\"assert\");\nconst DefaultEqualityComparator_1 = require(\"./DefaultEqualityComparator\");\nconst Decorators_1 = require(\"../Decorators\");\nconst MurmurHash_1 = require(\"./MurmurHash\");\n/** {@link Set} implementation with closed hashing (open addressing). */\n// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:\n// \t\t  e.g. the return type of add() differs!\n//        For this reason I've commented tweaked the implements clause\nconst INITAL_CAPACITY = 16; // must be power of 2\nconst LOAD_FACTOR = 0.75;\nclass Array2DHashSet {\n    constructor(comparatorOrSet, initialCapacity = INITAL_CAPACITY) {\n        /** How many elements in set */\n        this.n = 0;\n        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand\n        if (comparatorOrSet instanceof Array2DHashSet) {\n            this.comparator = comparatorOrSet.comparator;\n            this.buckets = comparatorOrSet.buckets.slice(0);\n            for (let i = 0; i < this.buckets.length; i++) {\n                let bucket = this.buckets[i];\n                if (bucket) {\n                    this.buckets[i] = bucket.slice(0);\n                }\n            }\n            this.n = comparatorOrSet.n;\n            this.threshold = comparatorOrSet.threshold;\n        }\n        else {\n            this.comparator = comparatorOrSet || DefaultEqualityComparator_1.DefaultEqualityComparator.INSTANCE;\n            this.buckets = this.createBuckets(initialCapacity);\n        }\n    }\n    /**\n     * Add `o` to set if not there; return existing value if already\n     * there. This method performs the same operation as {@link #add} aside from\n     * the return value.\n     */\n    getOrAdd(o) {\n        if (this.n > this.threshold) {\n            this.expand();\n        }\n        return this.getOrAddImpl(o);\n    }\n    getOrAddImpl(o) {\n        let b = this.getBucket(o);\n        let bucket = this.buckets[b];\n        // NEW BUCKET\n        if (!bucket) {\n            bucket = [o];\n            this.buckets[b] = bucket;\n            this.n++;\n            return o;\n        }\n        // LOOK FOR IT IN BUCKET\n        for (let existing of bucket) {\n            if (this.comparator.equals(existing, o)) {\n                return existing; // found existing, quit\n            }\n        }\n        // FULL BUCKET, expand and add to end\n        bucket.push(o);\n        this.n++;\n        return o;\n    }\n    get(o) {\n        if (o == null) {\n            return o;\n        }\n        let b = this.getBucket(o);\n        let bucket = this.buckets[b];\n        if (!bucket) {\n            // no bucket\n            return undefined;\n        }\n        for (let e of bucket) {\n            if (this.comparator.equals(e, o)) {\n                return e;\n            }\n        }\n        return undefined;\n    }\n    getBucket(o) {\n        let hash = this.comparator.hashCode(o);\n        let b = hash & (this.buckets.length - 1); // assumes len is power of 2\n        return b;\n    }\n    hashCode() {\n        let hash = MurmurHash_1.MurmurHash.initialize();\n        for (let bucket of this.buckets) {\n            if (bucket == null) {\n                continue;\n            }\n            for (let o of bucket) {\n                if (o == null) {\n                    break;\n                }\n                hash = MurmurHash_1.MurmurHash.update(hash, this.comparator.hashCode(o));\n            }\n        }\n        hash = MurmurHash_1.MurmurHash.finish(hash, this.size);\n        return hash;\n    }\n    equals(o) {\n        if (o === this) {\n            return true;\n        }\n        if (!(o instanceof Array2DHashSet)) {\n            return false;\n        }\n        if (o.size !== this.size) {\n            return false;\n        }\n        let same = this.containsAll(o);\n        return same;\n    }\n    expand() {\n        let old = this.buckets;\n        let newCapacity = this.buckets.length * 2;\n        let newTable = this.createBuckets(newCapacity);\n        this.buckets = newTable;\n        this.threshold = Math.floor(newCapacity * LOAD_FACTOR);\n        //\t\tSystem.out.println(\"new size=\"+newCapacity+\", thres=\"+threshold);\n        // rehash all existing entries\n        let oldSize = this.size;\n        for (let bucket of old) {\n            if (!bucket) {\n                continue;\n            }\n            for (let o of bucket) {\n                let b = this.getBucket(o);\n                let newBucket = this.buckets[b];\n                if (!newBucket) {\n                    newBucket = [];\n                    this.buckets[b] = newBucket;\n                }\n                newBucket.push(o);\n            }\n        }\n        assert(this.n === oldSize);\n    }\n    add(t) {\n        let existing = this.getOrAdd(t);\n        return existing === t;\n    }\n    get size() {\n        return this.n;\n    }\n    get isEmpty() {\n        return this.n === 0;\n    }\n    contains(o) {\n        return this.containsFast(this.asElementType(o));\n    }\n    containsFast(obj) {\n        if (obj == null) {\n            return false;\n        }\n        return this.get(obj) != null;\n    }\n    *[Symbol.iterator]() {\n        yield* this.toArray();\n    }\n    toArray() {\n        const a = new Array(this.size);\n        // Copy elements from the nested arrays into the destination array\n        let i = 0; // Position within destination array\n        for (let bucket of this.buckets) {\n            if (bucket == null) {\n                continue;\n            }\n            for (let o of bucket) {\n                if (o == null) {\n                    break;\n                }\n                a[i++] = o;\n            }\n        }\n        return a;\n    }\n    containsAll(collection) {\n        if (collection instanceof Array2DHashSet) {\n            let s = collection;\n            for (let bucket of s.buckets) {\n                if (bucket == null) {\n                    continue;\n                }\n                for (let o of bucket) {\n                    if (o == null) {\n                        break;\n                    }\n                    if (!this.containsFast(this.asElementType(o))) {\n                        return false;\n                    }\n                }\n            }\n        }\n        else {\n            for (let o of collection) {\n                if (!this.containsFast(this.asElementType(o))) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    addAll(c) {\n        let changed = false;\n        for (let o of c) {\n            let existing = this.getOrAdd(o);\n            if (existing !== o) {\n                changed = true;\n            }\n        }\n        return changed;\n    }\n    clear() {\n        this.buckets = this.createBuckets(INITAL_CAPACITY);\n        this.n = 0;\n        this.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);\n    }\n    toString() {\n        if (this.size === 0) {\n            return \"{}\";\n        }\n        let buf = \"{\";\n        let first = true;\n        for (let bucket of this.buckets) {\n            if (bucket == null) {\n                continue;\n            }\n            for (let o of bucket) {\n                if (o == null) {\n                    break;\n                }\n                if (first) {\n                    first = false;\n                }\n                else {\n                    buf += \", \";\n                }\n                buf += o.toString();\n            }\n        }\n        buf += \"}\";\n        return buf;\n    }\n    toTableString() {\n        let buf = \"\";\n        for (let bucket of this.buckets) {\n            if (bucket == null) {\n                buf += \"null\\n\";\n                continue;\n            }\n            buf += \"[\";\n            let first = true;\n            for (let o of bucket) {\n                if (first) {\n                    first = false;\n                }\n                else {\n                    buf += \" \";\n                }\n                if (o == null) {\n                    buf += \"_\";\n                }\n                else {\n                    buf += o.toString();\n                }\n            }\n            buf += \"]\\n\";\n        }\n        return buf;\n    }\n    /**\n     * Return `o` as an instance of the element type `T`. If\n     * `o` is non-undefined but known to not be an instance of `T`, this\n     * method returns `undefined`. The base implementation does not perform any\n     * type checks; override this method to provide strong type checks for the\n     * {@link #contains} and {@link #remove} methods to ensure the arguments to\n     * the {@link EqualityComparator} for the set always have the expected\n     * types.\n     *\n     * @param o the object to try and cast to the element type of the set\n     * @returns `o` if it could be an instance of `T`, otherwise\n     * `undefined`.\n     */\n    asElementType(o) {\n        return o;\n    }\n    /**\n     * Return an array of `T[]` with length `capacity`.\n     *\n     * @param capacity the length of the array to return\n     * @returns the newly constructed array\n     */\n    createBuckets(capacity) {\n        return new Array(capacity);\n    }\n}\n__decorate([\n    Decorators_1.NotNull\n], Array2DHashSet.prototype, \"comparator\", void 0);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"hashCode\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"equals\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"add\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"size\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"isEmpty\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"contains\", null);\n__decorate([\n    __param(0, Decorators_1.Nullable)\n], Array2DHashSet.prototype, \"containsFast\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, Symbol.iterator, null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"toArray\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"containsAll\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"addAll\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"clear\", null);\n__decorate([\n    Decorators_1.Override\n], Array2DHashSet.prototype, \"toString\", null);\n__decorate([\n    Decorators_1.SuppressWarnings(\"unchecked\")\n], Array2DHashSet.prototype, \"asElementType\", null);\n__decorate([\n    Decorators_1.SuppressWarnings(\"unchecked\")\n], Array2DHashSet.prototype, \"createBuckets\", null);\nexports.Array2DHashSet = Array2DHashSet;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-03T02:09:41.7434086-07:00\n\nimport * as assert from \"assert\";\nimport { DefaultEqualityComparator } from \"./DefaultEqualityComparator\";\nimport { EqualityComparator } from \"./EqualityComparator\";\nimport { NotNull, Nullable, Override, SuppressWarnings } from \"../Decorators\";\nimport { JavaCollection, JavaSet } from \"./Stubs\";\nimport { ObjectEqualityComparator } from \"./ObjectEqualityComparator\";\nimport { MurmurHash } from \"./MurmurHash\";\n\n/** {@link Set} implementation with closed hashing (open addressing). */\n\n// NOTE:  JavaScript's Set interface has on significant different diffrence from Java's:\n// \t\t  e.g. the return type of add() differs!\n//        For this reason I've commented tweaked the implements clause\n\nconst INITAL_CAPACITY: number = 16; // must be power of 2\nconst LOAD_FACTOR: number = 0.75;\n\nexport class Array2DHashSet<T> implements JavaSet<T> {\n\t@NotNull\n\tprotected comparator: EqualityComparator<T>;\n\n\tprotected buckets: Array<T[] | undefined>;\n\n\t/** How many elements in set */\n\tprotected n: number = 0;\n\n\tprotected threshold: number = Math.floor(INITAL_CAPACITY * LOAD_FACTOR); // when to expand\n\n\tconstructor(comparator?: EqualityComparator<T>, initialCapacity?: number);\n\tconstructor(set: Array2DHashSet<T>);\n\tconstructor(\n\t\tcomparatorOrSet?: EqualityComparator<T> | Array2DHashSet<T>,\n\t\tinitialCapacity: number = INITAL_CAPACITY) {\n\n\t\tif (comparatorOrSet instanceof Array2DHashSet) {\n\t\t\tthis.comparator = comparatorOrSet.comparator;\n\t\t\tthis.buckets = comparatorOrSet.buckets.slice(0);\n\t\t\tfor (let i = 0; i < this.buckets.length; i++) {\n\t\t\t\tlet bucket = this.buckets[i];\n\t\t\t\tif (bucket) {\n\t\t\t\t\tthis.buckets[i] = bucket.slice(0);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.n = comparatorOrSet.n;\n\t\t\tthis.threshold = comparatorOrSet.threshold;\n\t\t} else {\n\t\t\tthis.comparator = comparatorOrSet || DefaultEqualityComparator.INSTANCE;\n\t\t\tthis.buckets = this.createBuckets(initialCapacity);\n\t\t}\n\t}\n\n\t/**\n\t * Add `o` to set if not there; return existing value if already\n\t * there. This method performs the same operation as {@link #add} aside from\n\t * the return value.\n\t */\n\tpublic getOrAdd(o: T): T {\n\t\tif (this.n > this.threshold) {\n\t\t\tthis.expand();\n\t\t}\n\t\treturn this.getOrAddImpl(o);\n\t}\n\n\tprotected getOrAddImpl(o: T): T {\n\t\tlet b: number = this.getBucket(o);\n\t\tlet bucket = this.buckets[b];\n\n\t\t// NEW BUCKET\n\t\tif (!bucket) {\n\t\t\tbucket = [o];\n\t\t\tthis.buckets[b] = bucket;\n\t\t\tthis.n++;\n\t\t\treturn o;\n\t\t}\n\n\t\t// LOOK FOR IT IN BUCKET\n\t\tfor (let existing of bucket) {\n\t\t\tif (this.comparator.equals(existing, o)) {\n\t\t\t\treturn existing; // found existing, quit\n\t\t\t}\n\t\t}\n\n\t\t// FULL BUCKET, expand and add to end\n\t\tbucket.push(o);\n\t\tthis.n++;\n\t\treturn o;\n\t}\n\n\tpublic get(o: T): T | undefined {\n\t\tif (o == null) {\n\t\t\treturn o;\n\t\t}\n\t\tlet b: number = this.getBucket(o);\n\t\tlet bucket = this.buckets[b];\n\t\tif (!bucket) {\n\t\t\t// no bucket\n\t\t\treturn undefined;\n\t\t}\n\n\t\tfor (let e of bucket) {\n\t\t\tif (this.comparator.equals(e, o)) {\n\t\t\t\treturn e;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected getBucket(o: T): number {\n\t\tlet hash: number = this.comparator.hashCode(o);\n\t\tlet b: number = hash & (this.buckets.length - 1); // assumes len is power of 2\n\t\treturn b;\n\t}\n\n\t@Override\n\tpublic hashCode(): number {\n\t\tlet hash: number = MurmurHash.initialize();\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\thash = MurmurHash.update(hash, this.comparator.hashCode(o));\n\t\t\t}\n\t\t}\n\n\t\thash = MurmurHash.finish(hash, this.size);\n\t\treturn hash;\n\t}\n\n\t@Override\n\tpublic equals(o: any): boolean {\n\t\tif (o === this) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!(o instanceof Array2DHashSet)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (o.size !== this.size) {\n\t\t\treturn false;\n\t\t}\n\t\tlet same: boolean = this.containsAll(o);\n\t\treturn same;\n\t}\n\n\tprotected expand(): void {\n\t\tlet old = this.buckets;\n\t\tlet newCapacity: number = this.buckets.length * 2;\n\t\tlet newTable: Array<T[] | undefined> = this.createBuckets(newCapacity);\n\t\tthis.buckets = newTable;\n\t\tthis.threshold = Math.floor(newCapacity * LOAD_FACTOR);\n//\t\tSystem.out.println(\"new size=\"+newCapacity+\", thres=\"+threshold);\n\t\t// rehash all existing entries\n\t\tlet oldSize: number = this.size;\n\t\tfor (let bucket of old) {\n\t\t\tif (!bucket) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let o of bucket) {\n\t\t\t\tlet b: number = this.getBucket(o);\n\t\t\t\tlet newBucket: T[] | undefined = this.buckets[b];\n\t\t\t\tif (!newBucket) {\n\t\t\t\t\tnewBucket = [];\n\t\t\t\t\tthis.buckets[b] = newBucket;\n\t\t\t\t}\n\n\t\t\t\tnewBucket.push(o);\n\t\t\t}\n\t\t}\n\n\t\tassert(this.n === oldSize);\n\t}\n\n\t@Override\n\tpublic add(t: T): boolean {\n\t\tlet existing: T = this.getOrAdd(t);\n\t\treturn existing === t;\n\t}\n\n\t@Override\n\tget size(): number {\n\t\treturn this.n;\n\t}\n\n\t@Override\n\tget isEmpty(): boolean {\n\t\treturn this.n === 0;\n\t}\n\n\t@Override\n\tpublic contains(o: any): boolean {\n\t\treturn this.containsFast(this.asElementType(o));\n\t}\n\n\tpublic containsFast(@Nullable obj: T): boolean {\n\t\tif (obj == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.get(obj) != null;\n\t}\n\n\t@Override\n\tpublic *[Symbol.iterator](): IterableIterator<T> {\n\t\tyield* this.toArray();\n\t}\n\n\t@Override\n\tpublic toArray(): T[] {\n\t\tconst a = new Array<T>(this.size);\n\n\t\t// Copy elements from the nested arrays into the destination array\n\t\tlet i: number = 0; // Position within destination array\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ta[i++] = o;\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\n\t@Override\n\tpublic containsAll(collection: JavaCollection<T>): boolean {\n\t\tif (collection instanceof Array2DHashSet) {\n\t\t\tlet s = collection as any as Array2DHashSet<T>;\n\t\t\tfor (let bucket of s.buckets) {\n\t\t\t\tif (bucket == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tfor (let o of bucket) {\n\t\t\t\t\tif (o == null) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.containsFast(this.asElementType(o))) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (let o of collection) {\n\t\t\t\tif (!this.containsFast(this.asElementType(o))) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t@Override\n\tpublic addAll(c: Iterable<T>): boolean {\n\t\tlet changed: boolean = false;\n\n\t\tfor (let o of c) {\n\t\t\tlet existing: T = this.getOrAdd(o);\n\t\t\tif (existing !== o) {\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\t\treturn changed;\n\t}\n\n\t@Override\n\tpublic clear(): void {\n\t\tthis.buckets = this.createBuckets(INITAL_CAPACITY);\n\t\tthis.n = 0;\n\t\tthis.threshold = Math.floor(INITAL_CAPACITY * LOAD_FACTOR);\n\t}\n\n\t@Override\n\tpublic toString(): string {\n\t\tif (this.size === 0) {\n\t\t\treturn \"{}\";\n\t\t}\n\n\t\tlet buf = \"{\";\n\t\tlet first: boolean = true;\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (first) {\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \", \";\n\t\t\t\t}\n\t\t\t\tbuf += o.toString();\n\t\t\t}\n\t\t}\n\t\tbuf += \"}\";\n\t\treturn buf;\n\t}\n\n\tpublic toTableString(): string {\n\t\tlet buf = \"\";\n\t\tfor (let bucket of this.buckets) {\n\t\t\tif (bucket == null) {\n\t\t\t\tbuf += \"null\\n\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tbuf += \"[\";\n\t\t\tlet first: boolean = true;\n\t\t\tfor (let o of bucket) {\n\t\t\t\tif (first) {\n\t\t\t\t\tfirst = false;\n\t\t\t\t} else {\n\t\t\t\t\tbuf += \" \";\n\t\t\t\t}\n\t\t\t\tif (o == null) {\n\t\t\t\t\tbuf += \"_\";\n\t\t\t\t} else {\n\t\t\t\t\tbuf += o.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbuf += \"]\\n\";\n\t\t}\n\t\treturn buf;\n\t}\n\n\t/**\n\t * Return `o` as an instance of the element type `T`. If\n\t * `o` is non-undefined but known to not be an instance of `T`, this\n\t * method returns `undefined`. The base implementation does not perform any\n\t * type checks; override this method to provide strong type checks for the\n\t * {@link #contains} and {@link #remove} methods to ensure the arguments to\n\t * the {@link EqualityComparator} for the set always have the expected\n\t * types.\n\t *\n\t * @param o the object to try and cast to the element type of the set\n\t * @returns `o` if it could be an instance of `T`, otherwise\n\t * `undefined`.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected asElementType(o: any): T {\n\t\treturn o as T;\n\t}\n\n\t/**\n\t * Return an array of `T[]` with length `capacity`.\n\t *\n\t * @param capacity the length of the array to return\n\t * @returns the newly constructed array\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected createBuckets(capacity: number): Array<T[] | undefined> {\n\t\treturn new Array<T[]>(capacity);\n\t}\n}\n"]}