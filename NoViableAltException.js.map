{"version":3,"sources":["NoViableAltException.js","../src/NoViableAltException.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Parser_1","require","RecognitionException_1","Decorators_1","NoViableAltException","recognizer","input","startToken","offendingToken","deadEndConfigs","ctx","Parser","undefined","inputStream","currentToken","context","_deadEndConfigs","_startToken","setOffendingToken","RecognitionException","NotNull","prototype"],"mappings":"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","file":"NoViableAltException.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Parser_1 = require(\"./Parser\");\nconst RecognitionException_1 = require(\"./RecognitionException\");\nconst Decorators_1 = require(\"./Decorators\");\n/** Indicates that the parser could not decide which of two or more paths\n *  to take based upon the remaining input. It tracks the starting token\n *  of the offending input and also knows where the parser was\n *  in the various paths when the error. Reported by reportNoViableAlternative()\n */\nclass NoViableAltException extends RecognitionException_1.RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        if (recognizer instanceof Parser_1.Parser) {\n            if (input === undefined) {\n                input = recognizer.inputStream;\n            }\n            if (startToken === undefined) {\n                startToken = recognizer.currentToken;\n            }\n            if (offendingToken === undefined) {\n                offendingToken = recognizer.currentToken;\n            }\n            if (ctx === undefined) {\n                ctx = recognizer.context;\n            }\n        }\n        super(recognizer, input, ctx);\n        this._deadEndConfigs = deadEndConfigs;\n        this._startToken = startToken;\n        this.setOffendingToken(recognizer, offendingToken);\n    }\n    get startToken() {\n        return this._startToken;\n    }\n    get deadEndConfigs() {\n        return this._deadEndConfigs;\n    }\n}\n__decorate([\n    Decorators_1.NotNull\n], NoViableAltException.prototype, \"_startToken\", void 0);\nexports.NoViableAltException = NoViableAltException;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:52.3255548-07:00\n\nimport { ATNConfigSet } from \"./atn/ATNConfigSet\";\nimport { Parser } from \"./Parser\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { Token } from \"./Token\";\nimport { TokenStream } from \"./TokenStream\";\nimport { IntStream } from \"./IntStream\";\nimport { NotNull } from \"./Decorators\";\n\n/** Indicates that the parser could not decide which of two or more paths\n *  to take based upon the remaining input. It tracks the starting token\n *  of the offending input and also knows where the parser was\n *  in the various paths when the error. Reported by reportNoViableAlternative()\n */\nexport class NoViableAltException extends RecognitionException {\n\t//private static serialVersionUID: number =  5096000008992867052L;\n\n\t/** Which configurations did we try at input.index that couldn't match input.LT(1)? */\n\tprivate _deadEndConfigs?: ATNConfigSet;\n\n\t/** The token object at the start index; the input stream might\n\t * \tnot be buffering tokens so get a reference to it. (At the\n\t *  time the error occurred, of course the stream needs to keep a\n\t *  buffer all of the tokens but later we might not have access to those.)\n\t */\n\t@NotNull\n\tprivate _startToken: Token;\n\n\tconstructor(/*@NotNull*/ recognizer: Parser);\n\tconstructor(\n\t\t/*@NotNull*/\n\t\trecognizer: Recognizer<Token, any>,\n\t\t/*@NotNull*/\n\t\tinput: TokenStream,\n\t\t/*@NotNull*/\n\t\tstartToken: Token,\n\t\t/*@NotNull*/\n\t\toffendingToken: Token,\n\t\tdeadEndConfigs: ATNConfigSet | undefined,\n\t\t/*@NotNull*/\n\t\tctx: ParserRuleContext);\n\n\tconstructor(\n\t\trecognizer: Recognizer<Token, any>,\n\t\tinput?: TokenStream,\n\t\tstartToken?: Token,\n\t\toffendingToken?: Token,\n\t\tdeadEndConfigs?: ATNConfigSet,\n\t\tctx?: ParserRuleContext) {\n\t\tif (recognizer instanceof Parser) {\n\t\t\tif (input === undefined) {\n\t\t\t\tinput = recognizer.inputStream;\n\t\t\t}\n\n\t\t\tif (startToken === undefined) {\n\t\t\t\tstartToken = recognizer.currentToken;\n\t\t\t}\n\n\t\t\tif (offendingToken === undefined) {\n\t\t\t\toffendingToken = recognizer.currentToken;\n\t\t\t}\n\n\t\t\tif (ctx === undefined) {\n\t\t\t\tctx = recognizer.context;\n\t\t\t}\n\t\t}\n\n\t\tsuper(recognizer, input, ctx);\n\t\tthis._deadEndConfigs = deadEndConfigs;\n\t\tthis._startToken = startToken as Token;\n\t\tthis.setOffendingToken(recognizer, offendingToken);\n\t}\n\n\tget startToken(): Token {\n\t\treturn this._startToken;\n\t}\n\n\tget deadEndConfigs(): ATNConfigSet | undefined {\n\t\treturn this._deadEndConfigs;\n\t}\n\n}\n"]}