{"version":3,"sources":["ProxyParserErrorListener.js","../src/ProxyParserErrorListener.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","ProxyErrorListener_1","require","Decorators_1","ProxyParserErrorListener","delegates","recognizer","dfa","startIndex","stopIndex","exact","ambigAlts","configs","getDelegates","forEach","listener","reportAmbiguity","conflictingAlts","conflictState","reportAttemptingFullContext","prediction","acceptState","reportContextSensitivity","ProxyErrorListener","Override","prototype"],"mappings":"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","file":"ProxyParserErrorListener.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ProxyErrorListener_1 = require(\"./ProxyErrorListener\");\nconst Decorators_1 = require(\"./Decorators\");\n/**\n * @author Sam Harwell\n */\nclass ProxyParserErrorListener extends ProxyErrorListener_1.ProxyErrorListener {\n    constructor(delegates) {\n        super(delegates);\n    }\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.getDelegates()\n            .forEach((listener) => {\n            if (listener.reportAmbiguity) {\n                listener.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n            }\n        });\n    }\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState) {\n        this.getDelegates()\n            .forEach((listener) => {\n            if (listener.reportAttemptingFullContext) {\n                listener.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, conflictState);\n            }\n        });\n    }\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState) {\n        this.getDelegates()\n            .forEach((listener) => {\n            if (listener.reportContextSensitivity) {\n                listener.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, acceptState);\n            }\n        });\n    }\n}\n__decorate([\n    Decorators_1.Override\n], ProxyParserErrorListener.prototype, \"reportAmbiguity\", null);\n__decorate([\n    Decorators_1.Override\n], ProxyParserErrorListener.prototype, \"reportAttemptingFullContext\", null);\n__decorate([\n    Decorators_1.Override\n], ProxyParserErrorListener.prototype, \"reportContextSensitivity\", null);\nexports.ProxyParserErrorListener = ProxyParserErrorListener;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:56.9812284-07:00\nimport { ANTLRErrorListener } from \"./ANTLRErrorListener\";\nimport { ATNConfigSet } from \"./atn/ATNConfigSet\";\nimport { BitSet } from \"./misc/BitSet\";\nimport { DFA } from \"./dfa/DFA\";\nimport { Parser } from \"./Parser\";\nimport { RecognitionException } from \"./RecognitionException\";\nimport { Recognizer } from \"./Recognizer\";\nimport { ProxyErrorListener } from \"./ProxyErrorListener\";\nimport { ParserErrorListener } from \"./ParserErrorListener\";\nimport { SimulatorState } from \"./atn/SimulatorState\";\nimport { Token } from \"./Token\";\nimport { Override } from \"./Decorators\";\n\n/**\n * @author Sam Harwell\n */\nexport class ProxyParserErrorListener extends ProxyErrorListener<Token, ParserErrorListener>\n\timplements ParserErrorListener {\n\n\tconstructor(delegates: ParserErrorListener[]) {\n\t\tsuper(delegates);\n\t}\n\n\t@Override\n\tpublic reportAmbiguity(\n\t\trecognizer: Parser,\n\t\tdfa: DFA,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\texact: boolean,\n\t\tambigAlts: BitSet | undefined,\n\t\tconfigs: ATNConfigSet): void {\n\t\tthis.getDelegates()\n\t\t\t.forEach((listener) => {\n\t\t\t\tif (listener.reportAmbiguity) {\n\t\t\t\t\tlistener.reportAmbiguity(\n\t\t\t\t\t\trecognizer,\n\t\t\t\t\t\tdfa,\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tstopIndex,\n\t\t\t\t\t\texact,\n\t\t\t\t\t\tambigAlts,\n\t\t\t\t\t\tconfigs);\n\t\t\t\t}\n\n\t\t\t});\n\t}\n\n\t@Override\n\tpublic reportAttemptingFullContext(\n\t\trecognizer: Parser,\n\t\tdfa: DFA,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\tconflictingAlts: BitSet | undefined,\n\t\tconflictState: SimulatorState): void {\n\t\tthis.getDelegates()\n\t\t\t.forEach((listener) => {\n\t\t\t\tif (listener.reportAttemptingFullContext) {\n\t\t\t\t\tlistener.reportAttemptingFullContext(\n\t\t\t\t\t\trecognizer,\n\t\t\t\t\t\tdfa,\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tstopIndex,\n\t\t\t\t\t\tconflictingAlts,\n\t\t\t\t\t\tconflictState);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t@Override\n\tpublic reportContextSensitivity(\n\t\trecognizer: Parser,\n\t\tdfa: DFA,\n\t\tstartIndex: number,\n\t\tstopIndex: number,\n\t\tprediction: number,\n\t\tacceptState: SimulatorState): void {\n\t\tthis.getDelegates()\n\t\t\t.forEach((listener) => {\n\t\t\t\tif (listener.reportContextSensitivity) {\n\t\t\t\t\tlistener.reportContextSensitivity(\n\t\t\t\t\t\trecognizer,\n\t\t\t\t\t\tdfa,\n\t\t\t\t\t\tstartIndex,\n\t\t\t\t\t\tstopIndex,\n\t\t\t\t\t\tprediction,\n\t\t\t\t\t\tacceptState);\n\t\t\t\t}\n\t\t\t});\n\t}\n}\n"]}