{"version":3,"sources":["InterpreterRuleContext.js","../src/InterpreterRuleContext.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","exports","value","Decorators_1","require","ParserRuleContext_1","InterpreterRuleContext","ruleIndex","parent","invokingStateNumber","undefined","_ruleIndex","ParserRuleContext","Override","prototype"],"mappings":"AAAA;ACAA;;;;;;;;;;;;;;;;;;;ADKA,IAAIA,UAAU,GAAI,UAAQ,SAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,QAAOC,OAAP,0DAAOA,OAAP,OAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C;AAAiD,QAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAAxE;AACL,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMAC,MAAM,CAACM,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C,E,CCNA;;AAEA,IAAAC,YAAA,GAAAC,OAAA,CAAA,cAAA,CAAA;;AACA,IAAAC,mBAAA,GAAAD,OAAA,CAAA,qBAAA,CAAA;AAEA;;;;;;;;;;;;;IAWAE,sB;;;;;AAkBC,kCAAYC,SAAZ,EAA+BC,MAA/B,EAA2DC,mBAA3D,EAAuF;AAAA;;AAAA;;AACtF,QAAIA,mBAAmB,KAAKC,SAA5B,EAAuC;AACtC,oIAAMF,MAAN,EAAcC,mBAAd;AACA,KAFD,MAEO;AACN;AACA;;AAED,UAAKE,UAAL,GAAkBJ,SAAlB;AAPsF;AAQtF;;;;wBAGY;AACZ,aAAO,KAAKI,UAAZ;AACA;;;EA/B0CN,mBAAA,CAAAO,iB;;AA6B3C3B,UAAA,CAAA,CADCkB,YAAA,CAAAU,QACD,CAAA,EDREP,sBAAsB,CAACQ,SCQzB,EDRoC,WCQpC,EDRiD,ICQjD,CAAA;;AA7BDb,OAAA,CAAAK,sBAAA,GAAAA,sBAAA","file":"InterpreterRuleContext.js","sourcesContent":["\"use strict\";\n/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00\nconst Decorators_1 = require(\"./Decorators\");\nconst ParserRuleContext_1 = require(\"./ParserRuleContext\");\n/**\n * This class extends {@link ParserRuleContext} by allowing the value of\n * {@link #getRuleIndex} to be explicitly set for the context.\n *\n * {@link ParserRuleContext} does not include field storage for the rule index\n * since the context classes created by the code generator override the\n * {@link #getRuleIndex} method to return the correct value for that context.\n * Since the parser interpreter does not use the context classes generated for a\n * parser, this class (with slightly more memory overhead per node) is used to\n * provide equivalent functionality.\n */\nclass InterpreterRuleContext extends ParserRuleContext_1.ParserRuleContext {\n    constructor(ruleIndex, parent, invokingStateNumber) {\n        if (invokingStateNumber !== undefined) {\n            super(parent, invokingStateNumber);\n        }\n        else {\n            super();\n        }\n        this._ruleIndex = ruleIndex;\n    }\n    get ruleIndex() {\n        return this._ruleIndex;\n    }\n}\n__decorate([\n    Decorators_1.Override\n], InterpreterRuleContext.prototype, \"ruleIndex\", null);\nexports.InterpreterRuleContext = InterpreterRuleContext;\n","/*!\n * Copyright 2016 The ANTLR Project. All rights reserved.\n * Licensed under the BSD-3-Clause license. See LICENSE file in the project root for license information.\n */\n\n// ConvertTo-TS run at 2016-10-04T11:26:51.5898546-07:00\n\nimport { Override } from \"./Decorators\";\nimport { ParserRuleContext } from \"./ParserRuleContext\";\n\n/**\n * This class extends {@link ParserRuleContext} by allowing the value of\n * {@link #getRuleIndex} to be explicitly set for the context.\n *\n * {@link ParserRuleContext} does not include field storage for the rule index\n * since the context classes created by the code generator override the\n * {@link #getRuleIndex} method to return the correct value for that context.\n * Since the parser interpreter does not use the context classes generated for a\n * parser, this class (with slightly more memory overhead per node) is used to\n * provide equivalent functionality.\n */\nexport class InterpreterRuleContext extends ParserRuleContext {\n\t/**\n\t * This is the backing field for {@link #getRuleIndex}.\n\t */\n\tprivate _ruleIndex: number;\n\n\tconstructor(ruleIndex: number);\n\n\t/**\n\t * Constructs a new {@link InterpreterRuleContext} with the specified\n\t * parent, invoking state, and rule index.\n\t *\n\t * @param ruleIndex The rule index for the current context.\n\t * @param parent The parent context.\n\t * @param invokingStateNumber The invoking state number.\n\t */\n\tconstructor(ruleIndex: number, parent: ParserRuleContext | undefined, invokingStateNumber: number);\n\n\tconstructor(ruleIndex: number, parent?: ParserRuleContext, invokingStateNumber?: number) {\n\t\tif (invokingStateNumber !== undefined) {\n\t\t\tsuper(parent, invokingStateNumber);\n\t\t} else {\n\t\t\tsuper();\n\t\t}\n\n\t\tthis._ruleIndex = ruleIndex;\n\t}\n\n\t@Override\n\tget ruleIndex(): number {\n\t\treturn this._ruleIndex;\n\t}\n}\n"]}